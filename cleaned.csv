,text
0,maintainers
1,omnibus builds are already in pain so merging to fix those
2,client core reviewage lets not think too hard about the breakpoint resource itself just picked it because its the shortest bit of provider code out there
3,this blows up because allow downgrades is not supported there so you ll need to figure out the first versions of ubuntu and debian that can safely support this and conditionally add the flag
4,know granquist and are going to be unhappy about this one this is absolutely short term fix until we get choco on the windows jenkins nodes like it was before our system failure
5,no that absolutely the right thing to do
6,trailing comma is trolling you
7,yolo link fixing
8,should get added too missed adding it to the release notes in my pr
9,might also be cool to do this for node platform version in the ohai loading we could do something like automatic platform version versionstring new automatic platform version
10,the hack might be too much would be cool if everyone else wants to just do the fancy operator and skip the case magic
11,yeah probably not the monkeypatching of
12,okay the trickery is gone and chef config is no longer wrecked
13,chefstyle needs care and feeding
14,and now fingers crossed that this doesn some how jam the bumpbot
15,would rather we just leave it as invalid and surface the bundler error to the user it just like you ve requested an invalid cookbook dependency should be fatal error not warning
16,unfortunately it would be totally valid that two cookbooks want to install the same gem with the same options install from the same git repo but currently it would produce an invalid gemfile in that case edit ah nvm you mean replacing the warning with fatal error yes that makes sense
17,we should check that the values are compatible then make sure it still an error if two cookbooks do actually request differing versions of the same gem and whatnot
18,changed the request to fail directly whenever we would have directly conflicting requirements further checking if values are compatible might be quite complicated and is probably better done by bundler
19,think we need to get to point where running these tests on fipsified system actually ensures fipsiness so let pass through the read want to get fips windows node and fips linux node in to the test matrix soon
20,makes me bit twitchy should really be allow file to recieve read and call original which is much clearer that the problem is that you re working around the stub on the next line blocking other arguments and it feels like it should bit more explicitly test this setup the non fips case and explicitly mock it out to run non fips even on fips box and then mock it to fips and make sure the behavior is correct even on non fips box
21,closes
22,we ll want to put the ohai plugin deprecation note in there for this release though
23,looks correct it looks like we were testing the broken behavior so existing tests just need to be changed to return systemd correctly and the use cases for systemd everything else at the same time all look right with everything defaulting to systemd except in the case where only an upstart script exists which is probably not going to work anyways but its certainly the best we could ever do and we can let the os fail in that case
24,this is super frustrating bug that love to have fixed
25,could have sworn that the fixed behavior was the way it worked all along
26,yeah in we had this test ruby shared examples for an ubuntu platform with upstart update rc and systemd do before do stub service providers debian invokercd upstart systemd end it when only the sysv init script exists it returns service debian provider do allow chef platform servicehelpers to receive config for service with ntp and return initd systemd expect resolved provider to eql chef provider service systemd end so this likely broke in
27,looks like it was actually always broken with the new solver diff db ebfc in rc
28,travis appveyor hate you but the code looks right
29,hey what the fundamental problem or problems you re trying to solve with such change is pulling the oss docs out of chef web docs the only way to achieve it them as member of the doc team strongly in favor of keeping the docs together and feel having the oss content split into their respective repos would lead to poor user experience overall scenario content that crosses multiple technologies having common ia and keeping one place for people to submit doc updates are few reasons that have for keeping all of the content in one repo instead of having this conversation in pr comments open to discussing this through zoom with folks in person at chefconf or in some other fashion
30,this makes me nervous as structural thing if user requests depth we should probably honor that or error clearly
31,you have valid point we use this for specific instances where both uploadarchive allowunreachable and uploadpack allowreachablesha inwant are enabled on the git server this allows pulls fetches using any commit id not just advertised references this type of un shallowing is also used within some builds systems for similar conditions if it would be better to explicitly fail under this condition for the largest group of consumers then we probably shouldn change the behavior if we think it would be useful and warrants the addition or change to the attributes actions on the resource can certainly provide that as well let me know either way what your opinion is on this we have this code as stand alone cookbook and leverage the dsl that way so if this pr isn accepted it isn the end of the world just wanted to provide the community with an opportunity to have this functionality available natively if desired thanks
32,not sure the targeted for chef deprecations should be here
33,it looks like missing the dco portion of this request ll address this and resubmit thanks everyone
34,ll resubmit with the dco requirements in place thanks
35,you can just force push to your branch after running dco sign
36,oooh thanks ve already redone this pr but will definetly use that for next time
37,ci failure test server not starting jenkins test this
38,efb
39,
40,jenkins test this
41,cc
42,jenkins test this
43,backported to by fb edef bdff af by cb fea bab ac abf by cacf bc
44,revert in
45,we have determined to not fix path plugins the flag will be deprecated in and removed in as such we do not need to fix multivalued options as we do not need them in this way thanks for taking the time to write this we hope you continue to support and enhance logstash in the future
46,lgtm merged as
47,nice to see the lambdas
48,thanks rather than hard coding some additional media types think it would be better to check for compatibility against xml that would mean that standard media types like application xml text xml and application rss xml are all supported as well as custom media types like application vnd com example xml would you like to update your pr to do that
49,thanks for your feedback glad to update the pr and now doing the following java private boolean iscompatiblewithxml mediatype contenttype mediatype xmlmediatype new mediatype xml return xmlmediatype iscompatiblewith contenttype but since the type is even application json is valid for xml pretty sure misunderstood something in the process to do this could you provide any hint thanks in advance
50,nope you haven misunderstood using check against xml was wishful thinking on my part we could check for application xml text xml application xml and text xml but that would still miss custom xml media types as well as things like image svg xml now think that the most robust approach would be to treat the content as json by default if that throws an exception then try xml if that throws an exception then give up
51,thank you for your efforts here there more time pressure than usual here as release is needed for spring boot so ve fixed in projects spring restdocs commit eb bea thanks anyway
52,thank you for the pr but there was bit more to this please see the changes made in projects spring restdocs commit ae eaf edc ac and projects spring restdocs commit df fd ffce for the details
53,please sign the contributor license agreement repositoryid spring projects spring restdocs pullrequestid click here repositoryid spring projects spring restdocs pullrequestid to manually synchronize the status of this pull request see the faq for frequently asked questions
54,thank you for signing the contributor license agreement repositoryid spring projects spring restdocs pullrequestid
55,well spotted thanks very much for the pr
56,thank you
57,thank you
58,thanks once again
59,you ve done it again thank you very much
60,thanks for the pr resourcebundleconstraintdescriptionresolver constructor will throw missingresourceexception did you mean resourcebundleconstraintdescriptionresolver here its constructor doesn do much and won throw missingresourceexception that can see as things stand when constraint is encountered for which there is no description constraintdescriptions descriptionsforproperty string will throw an exception that identifies the constraint java util missingresourceexception can find resource for bundle java util propertyresourcebundle key org hibernate validator constraints time durationmin description at java util resourcebundle getobject resourcebundle java at java util resourcebundle getstring resourcebundle java at org springframework restdocs constraints resourcebundleconstraintdescriptionresolver getdescription resourcebundleconstraintdescriptionresolver java at org springframework restdocs constraints resourcebundleconstraintdescriptionresolver resolvedescription resourcebundleconstraintdescriptionresolver java at org springframework restdocs constraints constraintdescriptions descriptionsforproperty constraintdescriptions java think that good thing as it makes it clear that there constraint that needs to be described with your proposed change the undescribed constraint will be ignored as result the documentation may fail to describe constraint this goes against the spring rest docs ethos which is to make your tests fail if your documentation is inaccurate or incomplete have misunderstood the intent of your change
61,my apologies mis summarized the issue the exceptionininitializererror is due to how using spring rest docs not in spring rest docs itself ve updated the title and description of this issue appropriately here the stack trace java util missingresourceexception can find resource for bundle java util propertyresourcebundle key org hibernate validator constraints time durationmin description at java util resourcebundle getobject resourcebundle java at java util resourcebundle getstring resourcebundle java at org springframework restdocs constraints resourcebundleconstraintdescriptionresolver getdescription resourcebundleconstraintdescriptionresolver java at org springframework restdocs constraints resourcebundleconstraintdescriptionresolver resolvedescription resourcebundleconstraintdescriptionresolver java at org springframework restdocs constraints constraintdescriptions descriptionsforproperty constraintdescriptions java at com example sometest withpath sometest java and that line from com example sometest withpath is new constraintdescriptions myentity class descriptionsforproperty duration where myentity duration is defined as hibernate validator constraints time durationmin days private duration duration using hibernate validator to get durationmin which if you re using spring boot and maven can be done by adding these properties to pom xml alpha alpha don think it makes sense for org springframework restdocs constraints constraintdescriptions descriptionsforproperty to throw missingresourceexception if no descriptions are found would and did expect it to return an empty list and that the change this pr makes
62,thanks don think it makes sense for org springframework restdocs constraints constraintdescriptions descriptionsforproperty to throw missingresourceexception if no descriptions are found would and did expect it to return an empty list and that the change this pr makes ok so understood the intent correctly here what said about this above with your proposed change the undescribed constraint will be ignored as result the documentation may fail to describe constraint this goes against the spring rest docs ethos which is to make your tests fail if your documentation is inaccurate or incomplete thanks again for the pr but want to keep the current behaviour
63,makes sense and thank you for the rapid and thoughtful response how do you suggest such situation be handled obviously eventually spring rest docs will have the properties file updated for the new annotations but what do you recommend users do in the mean time for example is there different user controllable properties file that one could update to document such constraints
64,is there different user controllable properties file that one could update to document such constraints yes restdocs docs current reference html documenting your api constraints describing
65,thanks for the feedback think can do the changes but this may take until the next weekend
66,have updated the code and rebased it so that the code comments above are broken sorry for that major changes the include without any snippets will include every snippet in the operation directory the level of the include will be derived from the parent block level
67,thanks did you miss some files when you made the update the new tests are failing for me because they can find the build generated snippets some operation directory
68,there went something completely wrong with the update so went down in the code dungeon and found some commits with loose endings
69,ve merged this into master thank you very much for the contribution we couldn have done this without your help thank you very much
70,rest docs code style is to only use final when it required
71,think this should be called operationblockmacro and the file itself should be called operation block macro rb
72,think we could use parent level to figure this out automatically
73,don think the macro should be called srd as that would seem to imply the rest docs will only ever have single block macro there doesn seem to be tradition of trying to namespace macro names in asciidoctor so tempted to go with operation instead
74,intrigued by this test what was the reasoning behind adding nothing would expect this to either produce an error or to include all of the snippets for particular operation my preference is for the latter but not set on that
75,think using fetch doc org core hash html method fetch would make this read bit better ruby attrs fetch snippets split
76,think using file join and some string interpolation would improve the readability here something like ruby file join params snippet dir params operation snippet adoc
77,use string interpolation here too
78,use string interpolation here too
79,this should be named tests to match the other tests classes
80,my preference would be to store the expected content in files in src test resources
81,now it adds every exiting snippet in the operation folder
82,thanks for the pr unfortunately the discussion in didn reach conclusion all of the proposed options including the one implemented here had some downsides am not convinced that the benefits of any of them outweigh the downsides so going to close this
83,sorry but don want to make that class public can you please open an issue and we can explore another solution suspect that mustache lambda will be the answer rest docs already has one for escaping characters in asciidoctor tables
84,thanks for the pr this looks good really like the simplicity of it do wonder if it might benefit from being hidden behind an abstraction though when was looking at had something like commandformatter in mind that would take list of strings each of which should be kept on one line the formatter could then either concatenate them with separators with separators or whatever someone wants to implement particular formatter could be used by default and could be configured using snippetconfigurer or by passing one into new overloaded methods on clidocumentation
85,thanks as for your additional remarks was thinking about injecting commandformatter object to both curlrequestsnippet and httpierequestsnippet and using it for printing the output but then realized that it not that simple let look at the example from the initial issue curl post header one one header two two alpha bravo some curl parameters are printed after newline and some are not post this means that there are actually two different separators in use here see two possible options for dealing with this injecting instances of commandformatter and passing parameters to one or the other constructing commandformatter object by passing two separators to it and then maintaining both parameter lists inside it option seems to be better for me but like to reach decision before implementing this what do you think
86,wonder if we could keep it simple and have the curl snippet be somewhat opinionated about where line breaks could go it could pass the following to the formatter curl post header one one header two two alpha bravo the formatter would treat each of those items as string that should not be broken onto multiple lines the formatter is then free to join those four strings in whatever way it deems appropriate keeping them all on one long line splitting it over lines etc
87,have created the commandformatter class and applied it to the curl and httpie snippets what do you think about it
88,ve updated the pr as we discussed please take look
89,thanks
90,thanks again for the pr this change is now in master
91,great thanks for the review
92,could you make this an interface please there could be single implementation provided out of the box something like concatenatingcommandformatter that takes separator as constructor argument
93,ok think managed to introduce the concatenatingcommandformatter class as you proposed
94,there should be an overloaded variant of this method that takes command formatter and attributes
95,there should be an overloaded variant of this method that takes command formatter and attributes
96,looks like this is only used in the tests don think it needed
97,the contract shouldn mention the use of separator the job of the formatter is simply to format number of elements into single string
98,the method description shouldn mention concatenation as that can just be an implementation detail the contract of format is to take number of elements and turn them into single string
99,this constructor should call super with all the other constructors calling this one
100,this should be final with its initialisation happening in the constructor
101,this should be final with its initialisation happening in the constructor
102,this constructor should call super with all the other constructors calling this one
103,prefer that the existing tests were largely unaffected by the introduction of the commandformatter that could be done by leaving the content assertions as they were but creating the snippet with single line formatter
104,this constructor should be deprecated and new constructor that takes commandformatter introduced
105,this constructor should be deprecated and new constructor that takes commandformatter introduced
106,you could use collectionutils isempty here
107,think prefer it if this were package private
108,think this static method would be better on clidocumentation be tempted to call it multiline or multilineformat
109,think this static method would be better on clidocumentation be tempted to call it singleline or singlelineformat
110,not sure we need this
111,if the static methods are moved this test could be simplified to just check that no elements results in an empty string it would be good to have similar test for null too
112,think this could be simplified to just test against single formatter with whatever separator too
113,think this could be simplified to just test against single formatter with whatever separator too
114,prefer that the existing tests were largely unaffected by the introduction of the commandformatter that could be done by leaving the content assertions as they were but creating the snippet with single line formatter
115,it good to have tests for the curl snippet with different command formatters but there nothing mockmvc specific about it so don think they belong here
116,it good to have tests for the httpie snippet with different command formatters but there nothing mockmvc specific about it so don think they belong here
117,it good to have tests for the curl snippet with different command formatters but there nothing rest assured specific about it so don think they belong here
118,just quick question about this one deprecating this constructor would mean that would have to touch every test in curlrequestsnippettests to switch to different constructor is that ok for you
119,was torn on this earlier when was reviewing the change but while annoying think it probably the right thing to do it what was getting at when said but creating the snippet with single line formatter in my comment on the tests below my motivation was that wanted the opinion on what the default formatter should be to be in single place clidocumentation seemed to make sense as it can then pass the default formatter into curlrequestsnippet and httpierequestsnippet was also envisaging further change where the default moves to snippetconfigurer and it ll apply it to the default curlrequestsnippet and httpierequestsnippet that it creates the would lead to the deprecation of curlrequest and httpierequest on clidocumentation as well as said was torn on this so if you don think the reasoning above is sound really like to hear any counter arguments
120,ok understand now also in favour of putting the default formatter in one place just wasn sure where should it be after looking at the code again think that clidocumentation should be good enough place to put it there but to have it done in clean way would propose the following changes curlrequestsnippet create copy of all constructors with an additional commandformatter parameter and deprecate the old ones clidocumentation create additional curlrequest method that takes attributes and commandformatter parameters additionally change all existing curlrequestsnippet constructors so that they will receive the default formatter curlrequestsnippettests add the additional formatter parameter to each curlrequestsnippet constructor or call the appropriate clidocumentation method the former option feels better since these are the curlrequestsnippet tests do understand that this is more or less the same that you have proposed in the first place but now it written in one place and it easier for me to see the whole picture
121,sounds good to me thanks very much
122,no clue why the maven step fails in travis and am aware that there should be an additional rebase afterwards
123,as discussed in it looks like we can do this with block macro processor written in ruby so going to close this one sorry for the wasted effort
124,thanks for the pr the change is now in master
125,this one proving tricker than thought it would think like the response cookies to be available from operationresponse in the same way that they are now available from operationrequest it not totally straightforward though with the cookies available via getcookies method we have to figure out what to do with the set cookie header with rest assured there be the same information in two places with mockmvc the cookies would just be available from getcookies unless we explicitly set the header as well as is being proposed here having the same information in two places has caused problems in the past projects spring restdocs issues so we need to tread carefully ll give it some more thought
126,was thinking about this doubled information as well came to the conclusion that cookie information should be expressed as header in operationresponse this is why didn convert cookies from getcookies method in restassuredresponseconverter my reasoning for that was that cookies from set cookie header carry some additional information apart from the name and value like domain httponly flag etc and it would be better to just pass them in restassuredresponseconverter now that thinking about it getting more convinced that maybe it would be better to have this information structured in more object oriented fashion and create responsecookie class similar to the requestcookie you ve introduced ll update this pr accordingly when we reach decision see that need to do rebase anyway probably should have mentioned this problem in the pr description sorry about that
127,rest assured and jersey test client for which there third party rest docs support both set the set cookie header automatically it be nice of mockmvc wasn the odd one out mockmvc is also bit inconsistent on its own if you use setter to configure the content type of request or response it automatically sets the content type header as well ve opened spr to see if removing that inconsistency is possibility the outcome of that issue will probably tell us what is the right thing to do here
128,it looks like spr is going to be fixed but only in think that means we should proceed with setting the set cookie header for mockmvc but only if it hasn already been set that should allow rest docs to work with both spring framework and
129,updated the pr is it what you had in mind
130,yes thanks this looks good we talked above about making the cookies in the response available from operationresponse but think that can wait until
131,thanks again this is now in master
132,great thanks for merging this
133,please sign the contributor license agreement repositoryid spring projects spring restdocs pullrequestid click here repositoryid spring projects spring restdocs pullrequestid to manually synchronize the status of this pull request see the faq for frequently asked questions
134,thank you for signing the contributor license agreement repositoryid spring projects spring restdocs pullrequestid
135,this appears to have been opened in error
136,nice thanks for the pr
137,glad you like it like to continue this with pr to support cookies in response snippets it feels that would need to use some of the code written already here so what are your plans on merging this
138,soon hope just catching up after the holidays sorry for the delay but it will definitely be in rc
139,thank you
140,thanks for the pr what the problem that it is trying to address had imagined that service could be tested locally using whatever context path is required and the host scheme and port can then be modified to reflect the real service
141,we are using zuul as gateway for our microservices so we write our tests locally and we would like to modify the uri to the uri as it is exposed on the gateway including the context path as it is configured in our zuul routes
142,rather than modifying the uri to have different context path why not just run your micro service locally with that context path when you re generating its documentation
143,you mean by overriding it in the test configuration to fake the path being used by the gateway thought it would be nicer to have it explicitly defined it would also allow me to specify the zuul specific configuration all together in the same place scheme host port path
144,you mean by overriding it in the test configuration to fake the path being used by the gateway yes for example if it were spring boot app you just set server context path foo when running the tests that generate the documentation it would also allow me to specify the zuul specific configuration all together in the same place scheme host port path can see the benefit to that but assuming that you can fake the context path not yet convinced that the added complexity in rest docs is worth it
145,ok will rewrite my tests like you suggest and maybe create some reusable factory methods reading the zuul configuration which will also allow me to have it in one place
146,thank you
147,since there is build failure with the maven sample should do the pr against the branch
148,thanks for the pr not sure what wrong with travis and haven had time to investigate the build green on bamboo pub change to base off would be great please that the branch where like this to land
149,closing in favour of
150,please sign the contributor license agreement repositoryid spring projects spring restdocs pullrequestid click here repositoryid spring projects spring restdocs pullrequestid to manually synchronize the status of this pull request see the faq for frequently asked questions
151,thank you for signing the contributor license agreement repositoryid spring projects spring restdocs pullrequestid
152,thanks for the pr the fix is now in and master
153,without making some other changes this isn quite right templatedsnippet deliberately doesn think in terms of files it just cares about writer then can write output to wherever you want the change proposed here would make templatesnippet aware of file based output see the need for some more flexibility though at the moment the snippet name is used for two purposes to find the snippet template to resolve the writer would separating these two so that the same template can be used to write multiple differently named snippets do what you need
154,probably it comes to the same thing in the end we need the template location and the output file not to share name necessarily
155,ok thanks for the pr ve opened to implement the alternative approach
156,please sign the contributor license agreement repositoryid spring projects spring restdocs pullrequestid click here repositoryid spring projects spring restdocs pullrequestid to manually synchronize the status of this pull request see the faq for frequently asked questions
157,thank you for signing the contributor license agreement repositoryid spring projects spring restdocs pullrequestid
158,take look at my issue comment to see how to use projects spring restdocs issues issuecomment
159,after realized how the imports are ordered in the project thought it might be benefit to have the same in the samples is there any convention to use fixed ordering in the productive code but not in the samples it is ok for me to revert this since it is not the scope of the pr issue and split it in two prs
160,is there any convention to use fixed ordering in the productive code but not in the samples unfortunately not the samples are different for no better reason than they haven been set up with the same code formatter settings it is ok for me to revert this since it is not the scope of the pr issue and split it in two prs yes of course thanks
161,update done don know if there is any automated github notification
162,resolved most of the review points see projects spring restdocs pull discussion now the changes should be backward compatible and removed the system property as configuration option btw thanks for the clear and helpful review
163,not at all thank you for the contribution there are just couple of things missing now updates to the samples to use the new macro updates to the docs happy to take care of those as part of merging this but if you like to tackle them it be much appreciated
164,started with the samples and found bug in the plugin or asciidoctor if use the macro in two separated files docs doca asc docs docb asc the second one will throw an exception on the first occurrence execution of the macro will investigate the problem in the next days for documentation purpose an excerpt of the stacktrace caused by org apache maven plugin pluginexecutionexception execution generate docs of goal org asciidoctor asciidoctor maven plugin process asciidoc failed org jruby exceptions raiseexception typeerror can dup nilclass at org apache maven plugin defaultbuildpluginmanager executemojo defaultbuildpluginmanager java at org apache maven lifecycle internal mojoexecutor execute mojoexecutor java more caused by org asciidoctor internal asciidoctorcoreexception org jruby exceptions raiseexception typeerror can dup nilclass at org asciidoctor internal jrubyasciidoctor renderfile jrubyasciidoctor java at org asciidoctor maven asciidoctormojo renderfile asciidoctormojo java at org asciidoctor maven asciidoctormojo execute asciidoctormojo java at org apache maven plugin defaultbuildpluginmanager executemojo defaultbuildpluginmanager java more caused by org jruby exceptions raiseexception typeerror can dup nilclass at org jruby rubykernel dup org jruby rubykernel java at ruby at ruby at org jruby gen interfaceimpl convertfile org jruby gen interfaceimpl gen short status update fixed the bug above but now struggling with reliable project dir and resulting snippet dir detection if maven or gradle are getting called from another directory than the project base directory
165,thanks for the pr gerrit ve merged it in projects spring restdocs commit ac acada cacc edf and made some tweaks in bd as mentioned in comment on realised that macro was overkill the tweaks update things to automatically configure the snippets attribute instead this means that the normal include macro is used which has the added bonus of side stepping the bug that you described above
166,also think that this is an cleaner solution than doing the conversion by hand that results in only html support you could have still use pdf or something else but the old macro would have generated html content and chatted about this pull request and the possibilities in asciidoctor to use other backends with my block macro there will only be chance with asciidoctorj to use other contexts than pass to get asciidoctor to compile the file content without wrapping it in some kind of section there is still problem with your changes and it is the same mentioned above it will only work if you start maven or gradle in the project directory it will search for the files relative to the execution directory pwd one way to archive this is to use document getattr docfile or document getattr docdir or maybe some other attribute you can find here in the manual manual also thanks to robert for giving me this hint
167,using docdir with maven combined with the working directory to get relative path from the adoc file to the snippets in my testing this seems to work with multi module builds but may have missed something using projectdir with gradle which makes things very straightforward this all happens in projects spring restdocs blob master spring restdocs asciidoctor src main java org springframework restdocs asciidoctor snippetsdirectoryresolver java
168,ve just realised that missed your update above about having fixed the bug and the directory problem sorry out of interest what was the cause of the bug
169,since had to convert the file manually needed new instance of asciidoctor after few days thinking it has to depend on the options object in ruby because this was the only object that was dupped in the source files realized that there is create method that accepts the class path as parameter with this set to the class path of the current class it was working again
170,this constructor needs to be kept both to allow the output directory to be overridden and to maintain backwards compatibility
171,this constructor needs to remain public both to allow the output directory to be overridden and to maintain backwards compatibility
172,while this class is deprecated and might be removed before is released for the time being at least this constructor needs to be kept both to allow the output directory to be overridden and to maintain backwards compatibility
173,this is os specific so it doesn belong in the repository gitignore it should go in your own global gitignore files create global gitignore instead
174,why is this suppression necessary
175,this looks like duplicate of line
176,if this copy is necessary rather do it as part of the test than in the gradle build so that it happens when running things in an ide too
177,restdocs is too generic as we may want to add more macros in the future think the macro should be called snippet
178,don think this class should be named as if it specific to particular macro imo restdocsextensionregistry is better name
179,don like the use of system property rest docs used one in the past but it didn work well when running individual tests in an ide typically the system property is only set in build gradle or pom xml so you ended up with different configuration for now at least happy for people who don want to use the conventional locations to have to override the location using the constructor argument to junitrestdocumentation or manualrestdocumentation and continuing to use include
180,asciidoctor needs to instantiate the macro using reflection if reduce the visibility of the constructor get org jruby exceptions raiseexception typeerror asciidoctor failed failed to parse source no public constructors for java orgspringframeworkrestdocsasciidoctorextensions restdocssnippetblockmacro don see any possibility to use another registration method and also provide the macro block name
181,thanks
182,looks great thanks very much
183,thanks again ve merged this into master
184,my pleasure
185,thanks once again
186,pousse this looks excellent thank you very much ve made one comment on the commit if you haven done so already can you please sign the cla projects spring restdocs blob master contributing md sign the contributor license agreement
187,see did not implement anything here because think users will firstly document the parts with org springframework restdocs request requestdocumentation partwithname and then document the content of the part that implies org springframework restdocs request requestpartssnippet verifyrequestpartdescriptors has already handled missing parts let me know
188,that certainly possible but may not always be the case think it would be more in keeping with the rest of the project if it failed fast with an exception messaging indicating that the part doesn exist
189,yep am adding test cases and will add this exception can throw the same error as here org springframework restdocs request requestpartssnippetfailuretests missingpart on fri jun at am andy wilkinson notifications com wrote that certainly possible but may not always be the case think it would be more in keeping with the rest of the project if it failed fast with an exception messaging indicating that the part doesn exist you are receiving this because you were mentioned reply to this email directly view it on github projects spring restdocs pull issuecomment or mute the thread mathieu pousse pousse zenika ouest rue de la monnaie rennes
190,yep that be perfect thanks
191,here we are
192,pousse thanks again for the pr the changes are now in master
193,wonder if this should fail fast here rather than failing later when documented field in the part isn found
194,thanks for the pr
195,thanks very much
196,as said on like the idea however have feeling that this implementation is heavier than it needs to be it is only feeling at this stage sorry for not having anything more concrete at the moment but didn want to appear to be ignoring this pr and haven yet had time to investigate whether or not my feeling is right or not
197,no worries know how it is with non trivial prs kinda had the same feeling about it being bloated maybe was trying to make it too configurable
198,disagree like to see the table in the current alphabetical ordering
199,don like the proposed ordering either and prefer alphabetical although grails is in the wrong place at the moment perhaps it would make sense to split things up into three tables mockmvc containing spring data rest and spring hateoas rest assured containing grails and rest assured advanced containing slate and testng
200,closing in favour of
201,thank you this should just manage to squeeze into have you signed the cla projects spring restdocs blob master contributing md sign the contributor license agreement
202,sorry please ignore the above about the cla can see that you ve already signed thanks again
203,you re welcome and yes signed the cla first please let me know if you need the confirmation number
204,thanks for the pr the changes are now in master
205,thanks for the pr have you signed the cla projects spring restdocs blob master contributing md sign the contributor license agreement
206,yes just signed the cla
207,thanks again for the pr it been merged into master
208,thanks for the pr merged into master in projects spring restdocs commit fa decef ece
209,thanks for the pr but don want to duplicate information from the docs in the readme the details in the readme are intended to describe what required to build the project while the reference docs describe the requirements to use rest docs ve opened to clarify things including linking to the reference docs from the readme
210,merged see projects spring restdocs commit aeed bd ed aa thanks for the pr
211,thanks for the pr this looks excellent ve made few comments on the diff commits for your consideration
212,thanks for the pr this looks excellent ve made few comments on the diff commits for your consideration thanks for your review ve made bunch of the changes you requested and commented on the others
213,unfortunately can see your comments wonder if that my fault for making some comments on your commits rather than on the pull request diff they may have got lost when you pushed up your latest changes if you can remember what you said and where would you mind posting the comments on the diff please
214,wonder if that my fault for making some comments on your commits rather than on the pull request diff yeah when force pushed the updates those comments were lost along with the commits pushed branch httpie old from my reflog and thankfully it looks like github kept the comments against the old hashes see them here restdocs commits httpie old
215,reflog saves the day once again thank you ve added few responses think we re almost there now
216,round everything resolved except for the filename issue with the process substitution see my reply restdocs commit fdbc fca be bd commitcomment
217,thanks again for the pr ve merged it into master along with little bit of polish projects spring restdocs commit bc aee adbeeaa
218,thanks again for the pr ve merged it into master along with little bit of polish great
219,all of the authors of the original curlrequestsnippet should also be credited here
220,snippetname and attributes do not need to be final
221,alternatively an extra method removematchingheaders could be added guess its more or less matter of taste loose typing vs api inflation
222,thanks for the pr not keen on removeheaders taking an object do like that it lets you mix patterns and strings but imo that outweighed by the loss of type safety prefer to either have removematchingheaders string pattern or overload removeheaders with removeheaders pattern pattern leaning towards the former as the user doesn have to call pattern compile and the method name makes it clear that there some matching involved
223,ok updated the pr accordingly and rebased
224,thanks very much for the pr ve merged it into master made few changes along the way please take look at projects spring restdocs commit fa ee dbbf eb dec if you re interested
225,thanks for picking it up and also for tuning the code looks indeed nicer that way
226,thanks for the pr ve merged the change into and master
227,oops thanks very much did you use tool to find this checkstyle integrated into the build and the ci jobs also run sonar neither of them caught it
228,sonar should have the bug pattern but don know if its activated on default found this with findbugs
229,sonar should have the bug pattern but don know if its activated on default thanks it activated in the profile using now worried what else have false sense of security about
230,sorry that you found this confusing the need to use prepare package if you want to include the documentation in the jar file is mentioned in the call out referenced by if you want to package the documentation in your project jar you should use the prepare package phase it also mentioned again in the packaging the documentation restdocs docs current reference html getting started build configuration maven packaging section first configure the asciidoctor plugin so that it runs in the prepare package phase as described above if you have suggestions for how to make this clearer definitely like to hear them however can merge this change in its current form as it ll mean that the sections mentioned above among others no longer make sense
231,thank you for your comment found had misunderstood updated pr to explain the phase explicitly how do you think
232,having thought about this some more think it might be best to update the documentation to always use prepare package for the phase it ll be lot simpler as it ll mean one set of instructions that ll work for those who want to embed the documentation in the jar and those that don
233,thanks for the pr as discussed above ve decided to address the problem by recommending that the asciidoctor plugin is always bound to the prepare package phase see for that change
234,thanks very much for the pr if that all it takes to fix it we should be able to get this into have you signed the cla projects spring restdocs blob master contributing md sign the contributor license agreement
235,oh sorry missed that signed the cla minute ago it is all to make documenting xml attributes available though detecting undocumented attributes is not part of that don know if this is desirable
236,think that fine particularly for as it would be breaking change to require individual attributes to be documented
237,have signed the cla and contributed to spring projects before diskspacehealthindicator boot docs current api org springframework boot actuate health diskspacehealthindicator html
238,just pushed second implementation based on the jsonpath library so that you can compare what the different implementations may look like
239,thanks for the pr but haven seen anyone else with this requirement so prefer not to add support for it
240,thanks for the pr unfortunately not keen on the approach you ve taken for documenting path parameters specifically the need to duplicate the path is there way to capture the path in its original form before any parameters have been replaced so that they can be documented the approach took with mockmvc was to provide custom request builder projects spring restdocs blob master spring restdocs mockmvc src main java org springframework restdocs mockmvc restdocumentationrequestbuilders java don think that approach will work so well with rest assured due to the chaining of method calls
241,hmm as far as can remember you cannot do this in rest assured but willing to add it if required is all you need the path before applying the path parameters for example
242,agree the approach is not as elegant as the one you used for mockmvc unfortunately did not find similar way for rest assured the only solution found was to pass the path as the parameter if you think of better solution be glad to implement it best regards le oct andy wilkinson notifications com crit thanks for the pr unfortunately not keen on the approach you ve taken for documenting path parameters specifically the need to duplicate the path is there way to capture the path in its original form before any parameters have been replaced so that they can be documented the approach took with mockmvc was to provide custom request builder don think that approach will work so well with rest assured due to the chaining of method calls reply to this email directly or view it on github
243,ll be happy to make changes in rest assured to make integration with rest docs smoother
244,that be great thanks johan le oct johan haleby notifications com crit ll be happy to make changes in rest assured to make integration with rest docs smoother reply to this email directly or view it on github
245,just tell me what to do
246,could it be made available via the filtercontext
247,sure but should it include only the path or path query see resource identifier syntax
248,thanks just the path in its foo bar form is sufficent for our purposes the request spec query parameters are already sufficient for dealing with the query string
249,may ask what you think is good name for the method in filtercontext for example getoriginalrequestpath or getrequestpathwithpathparamnames
250,looking at filterablerequestspecification be tempted to take inspiration from getbasepath and call it getoriginalbasepath also be tempted to add the method to filterablerequestspecification rather than to filtercontext as originally suggested
251,thanks for your comments however base path might not actually be the entire path for example you could do like this in rest assured java restassured basepath given pathparam something pathparam else when get the original bash path would thus be but the original path probably ought to be the base path is prepended to the path specified in get this attracts me more to put the method in filtercontext since the original path will be derived value basepath get path just as the other values in filtercontext whether or not it was good idea to put these values in filtercontext in the first place is another discussion
252,ve added getoriginalrequestpath to filtercontext for now and published new snapshot snapshot it requires the following repository if anyone want to try it out xml sonatype have understand it correctly that you re working on better support for third party libraries such as restassured in the next version of spring rest docs or is it already implemented haven tried it myself if so should try to make proper release of rest assured with this fix asap
253,this is great thanks the rest assured support is still work in progress that ll hopefully be part of there not rush for rest assured release we can build against snapshots in the meantime
254,thanks ll probably release new version in weeks just tell me if there anything else can do to ease integration with rest docs
255,ve now released rest assured that contains the getoriginalrequestpath method in filtercontext that you should be able to use
256,thanks very much
257,thanks again for the pull request didn use it in the end for the reasons we already discussed above however it was still very useful as it led to the improvement to rest assured that kindly made so that the path parameters could be documented
258,thanks for the pr but the change you ve made is incorrect the sourcedir is the location from which your main asciidoc file should be read your change means it will only find the individual snippets also all tasks have inputs dir so whatever your problem was that wasn the cause have you perhaps put your main asciidoc file in the wrong place when using gradle they should go in src docs asciidoc by default
259,thanks lot misunderstood that even the main asciidoc would be created as part of the task blame it on my haste to implement something before reading the docs completely once corrected that everything worked like charm thanks for the clarification and this helpful project
260,ve previously signed the cla for spring data but can resign again if needed
261,thanks for the pr no need to sign the cla again
262,ve merged this into master thanks again particularly for taking the time to add some tests
263,of course test first have some free time right now so ll look through the open issues and see if there is anything can help out with
264,ve merged this into master thanks for the pr
265,thanks for the pr testing with gradle continuous mode works fine for me in both the main docs and in the sample can you please describe what you were doing that you expected to trigger build but it didn
266,hi andy sorry my mistake was running continuous mode in my project to and didn get the rebuild triggered but now it seems to work without the need to change the gradle build also checked the asciidoctor plugin they do use the inputdirectory annotation anyway keep up the good work
267,thanks for the pr
268,thank you think this might be better handled by having getcontentasstring method on operationrequest and operationresponse that way the conversion can be performed in central place for the benefit of any snippets that want to use the content as string would you be interested in updating this pr to do so
269,ok agree with you will update pr to do so
270,updated pr to have getcontentasstring method on operationrequest and operationresponse please check pr
271,thanks again can you please sign the cla projects spring restdocs blob master contributing md sign the contributor license agreement
272,have signed the cla
273,thanks once again for the pr ve merged this into master along with some additional changes to honour the charset wherever the contents of request or response are worked with as string
274,thanks
275,thanks have you signed the cla projects spring restdocs blob master contributing md sign the contributor license agreement
276,yes some minutes ago do you need the confirmation number
277,no we re good thank you
278,merged into master thanks again for the pr
279,merged into master thank you
280,thanks
281,thanks very much merged with few amendments
282,thanks for the nice tool
283,to make it easy
284,thanks caught that one as part of the merge see projects spring restdocs commit fe ea abd diff ffe bc ba br
285,just realized this does in fact not work need the tests to be completed to have the snippets and can not run tests without processing the resources
286,thanks have you signed the cla projects spring restdocs blob master contributing md sign the contributor license agreement
287,yep
288,merged thanks again for the pr
289,nice thanks very much
290,thank you have you signed the cla projects spring restdocs blob master contributing md sign the contributor license agreement
291,have signed the cla confirmation
292,thanks again for the pr ve merged it into master
293,well spotted thank you
294,you beat me to it was about to raise the same issue haven prepared pr yet though don know if startswith would work though since it would also match on application json something rather stringutils substringbefore contenttype and then make an equals comparison
295,thanks for the pr share concern about the use of startswith given the existing dependency on spring framework think the use of mediatype parsemediatype is the safest option
296,perfect fully agree with about the strictness sorry for the wildcard imports thats default behaviour of intellij
297,would you like to update the pr when you have moment
298,hey please have look at the updated classes
299,thank you ve merged the changes
300,please do not use wildcard imports
301,please do not use wildcard imports
302,as mentioned in the main comments on the pr think this should use mediatype parsemediatype contenttype
303,thanks
304,thanks for the pr like the idea but not totally sold on the implementation there have already been requests for better support for xml payloads see for example and prefer not to add to the problem of things being too json centric how about responseformatter abstraction that takes the response as input and returns the formatted content the default implementation identityresponseformatter would simply return the content as is to enable pretty printing or any other sort of response post processing users could associate responseformatter implementation with particular content type perhaps via an api on restdocumentationconfigurer that sets the formatters on restdocumentationcontext jackson based implementations for pretty printing json and xml could be provided the above described changes would probably mean that there only single snippet produced rather than one snippet for the formatted response and one for the unformatted response suspect that won be problem though as can imagine someone wanting to use both the formatted and the unformatted snippets in the same documentation that only hunch if you have real word experience the says otherwise please do say so
305,ve been thinking about this too and agree we even have need where we want to filter out headers from the response for instance it isn useful documenting things like cache control pragma or frame options in every request so responseformatter would be useful abstraction where we can fine tune exactly how headers are filtered and response bodies are formatted agree that single snippet is fine was hoping to do that but because documenthttpresponse gets added to the list of delegates in the constructor it is harder to fine tune do you think the default set of delegates should be configurable or maybe this point becomes moot when we can inject our own responseformatter let me take another look at this and get back to you
306,interesting hadn considered stripping out headers like that idea too given that capability perhaps responsepostprocessor would be more appropriate it no longer just about formatting haven looked in detail to confirm that this ll work but think that restdocumentationresulthandler could call the configured response formatters post processors and then call its delegates there no setter for an mvcresult response so think the result would have to be copied to contain the new response there may also be some hoops to jump through to produce response with formatted content judicious use of setcommitted false and resetbuffer should do the trick
307,thanks again for opening this pr and for inspiring large chunk of what ve implemented in those changes should be available in the latest snapshots if you get chance to try them out be interested to hear any feedback you may have
308,thanks have been playing with it since saw the commit it is looking very good right now as soon as ve converted over all of our current documenting actions ll get back with any feedback
309,merged thanks for the pr
310,ugh didn want github to merge the two commits into one pull request let me know if you want me to split them out or not
311,thanks for the pr given that the changes are unrelated would you mind splitting them out please also if you haven already done so can you please sign the cla committer signup
312,certainly ll submit two new prs
313,excellent thanks very much
314,merged many thanks for the pr
315,thanks have you signed the cla projects spring restdocs blob master contributing md sign the contributor license agreement
316,just did
317,thanks for the pr ve merged it with one notable change removed the logic for handling request parameters for post requests as not sure that it necessary for restful service and was specifically looking to address get requests
318,thanks for the merge but why did you remove the logic for post requests think it especially interesting in case of post requests because can see no workaround to document post requests with parameters java this mvc perform mockmvcrequestbuilders post constants url get token param param username user param param password userpwd andexpect status isok anddo document retrievetokenviapost
319,tried to explain my reasoning above the primary reason was because issue which this pr was addressing was specifically interested in get requests if there valid use case for post requests then prefer to tackle it in separate issue
320,thanks for the pr would you mind squashing it into single commit and doing forced push please it ll make it bit easier to review
321,okay done
322,thanks for the comments feel like ll learn lot from these remarks this weekend ll make all the changes and update the pull request
323,for request body fields it seems useful to document the fields client has or can pass failing the test if not all the fields are documented is in this case good idea to make sure the documentation stays up to date but for the response body it seems overkill to fail the test when not all the fields are documented especially if there are embedded resources this could be fairly big chunk of documentation in the unit test while not all developers may want to go about documenting every single field the service could return they could instead be happy with the response example what would your preference be in this case
324,always like to have options the developer should be able to decide when and how test fails on mar at am andreas evers notifications com wrote for request body fields it seems useful to document the fields client has or can pass failing the test if not all the fields are documented is in this case good idea to make sure the documentation stays up to date but for the response body it seems overkill to fail the test when not all the fields are documented especially if there are embedded resources this could be fairly big chunk of documentation in the unit test while not all developers may want to go about documenting every single field the service could return they could instead be happy with the response example what would your preference be in this case reply to this email directly or view it on github
325,if the person writing the documentation is happy with the response example then would expect them simply not to make any field documentation calls and for the test to pass when the user has opted to document some fields think it reasonable at least initially for the test to pass or fail based on the same criteria as the link documentation support if it becomes clear that this is too strict then we can relax both at the same time don think embedded resources complicate things here consider this example from the hal primer json links self href id matthew name matthew weier phinney embedded contacts links self href nibblet id mac nibblet name antoine hedgecock links self href id spiffyjr name kyle spraggs website links self href id mwop url there are only four fields that require documentation links id name and embedded if you want to go into more detail on the structure of embedded then you could document embedded contacts and embedded website instead of embedded this is probably the level go to with the documentation for embedded contacts and embedded website being nothing more than link to the documentation for the contacts and website resources respectively
326,alright can do just confused about the following parts when the user has opted to document some fields think it reasonable at least initially for the test to pass or fail based on the same criteria as the link documentation support if it becomes clear that this is too strict then we can relax both at the same time this conflicts in my opinion with this is probably the level go to with the documentation for embedded contacts and embedded website being nothing more than link to the documentation for the contacts and website resources respectively if understand the link documentation criteria all the field paths of the response should be gathered and compared with the documentation if the same is applied here the test would fail in your scenario think it would expect embedded website id or embedded website url to also be documented where would the recursive check draw the line should we have some more intelligent logic to check if one of the fields of certain depth level is documented all those fields on that level should be documented
327,my thinking is that if you ve documented embedded foo then anything beneath that embedded foo bar for example should be treated as documented also wonder if embedded should be considered to be documented if all of its children are documented
328,ve updated the pull request with all the changes you requested
329,the documentation shouldn include the name of java type the fact that the service is written in java is an implementation detail assuming json based format which is entirely reasonable the type can be one of number string boolean array or object
330,don think this code belongs in the hypermedia package any service will have fields in its requests and responses not just those that are using hypermedia
331,this feels like overkill to me the linkextractor abstraction was created to pull links out of response into common format not convinced that necessary for the fields in request response to be extracted in similar way don think there any need for them to be in common format as the format that they are in is the format that needs to be documented
332,could be convinced that links doesn need to be documented as it could be documented in the same for every resource pointer to the links documentation for the resource however embedded will vary and therefore suspect that people will want to document it
333,wonder if this should be path rather just name it would enable the documentation of more complex nested structures
334,agree for inspiration took closer look at how the hal specification specification html calls these fields the hal model is making the distinction between links embedded resources and plain old state more specifically called your bog standard json or xml data so moved the fields classes to org springframework restdocs state
335,well spotted thanks for the pr
336,thanks for the pr merged in bdd
337,thanks
338,thanks for the pr this project going to move over to the spring projects organisation projects once it there ll be able to accept prs from anyone who signed the contributor licence agreement ll comment again with more details after the move
339,okay sure
340,the project moved over now can you please sign the cla projects spring restdocs blob master contributing md sign the contributor license agreement
341,hi can you please specify which project should choose in the cla form there is no option for restdocs
342,apologies forgotten about the project drop down on the form ll let you know once it been updated
343,the form been updated and spring rest docs is now listed in the projects drop down hopefully that the final piece in the puzzle sorry it been little convoluted thankfully you only need to sign once
344,okay thanks ve signed it my confirmation number is
345,ve made few comments in the commit see above would you like to update the pr
346,yeah sure ll update it soon
347,ve created new pull request for this feature
348,would it be possible for the restdocs project itself to be mavenized as well
349,that unlikely why do you care which build system the project itself uses
350,thanks for this dave ve reworked things so that they re no longer quite so gradle specific see ec dca ae afe ca db for details both samples can now be built with maven and thankfully there less configuration required
351,merged thanks very much rob
352,merged thanks rossen
353,this is function based ctor so there is nothing about suffix
354,why do you select the extension replacing approach as default one seems for me foo txt complete is much robust solution especially when we may have foo exe foo jpg foo java at the same folder
355,
356,todo docs
357,merged as ecbb bf eb
358,javadocs default implementation returns
359,perhaps test to confirm we have sequencesize header
360,both will fix on merge
361,merged as bb ee bb ab fa ed
362,looks like spurious back tick note will fix on merge
363,thanks
364,merged as projects spring integration commit eebf ba ccc ea
365,thanks for taking time to review my code have modified the code to reflect review comment
366,updated the issue id to
367,appreciate any update on next step
368,anything you would like to see in order to merge this to master
369,please make sure you indent using tabs
370,please remove obsolete tags
371,please remove obsolete tags
372,that already defined by the parent pom and can be removed
373,also available via parent pom
374,make sure java source files contain apache license header
375,obsolete blank line
376,package declaration is not needed as it defaults to the base package the class resides in
377,please move to example springdata couchbase package
378,please use lombok annotation to avoid all the boilerplate for getters setters equals hashcode
379,please remove obsolete javadoc
380,please remove access modifiers for test class properties
381,please use assertj assertions and static import using so that static methods don need to be qualified see other projects for example
382,please order metadata tags consistently see other projects for example
383,please fix formatting tabs
384,please sign the contributor license agreement repositoryid spring projects spring data examples pullrequestid click here repositoryid spring projects spring data examples pullrequestid to manually synchronize the status of this pull request see the faq for frequently asked questions
385,thank you for signing the contributor license agreement repositoryid spring projects spring data examples pullrequestid
386,thanks for the effort but this is exactly the behavior we would expect if you do not use java with java we can obtain the parameter name via reflection and don need the annotation examples like all other master branches of spring data rely on java so as long as all things seem to indicate that the issue is with the environment used for compiling and running the code we won accept pr think
387,see my comment on the original ticket
388,please sign the contributor license agreement repositoryid spring projects spring data examples pullrequestid click here repositoryid spring projects spring data examples pullrequestid to manually synchronize the status of this pull request see the faq for frequently asked questions
389,haven updated the versioneye issues because it probably not relevant for this change let me know if need to update anything to complete this merge
390,to make this easier to understand without the use of the converter using string instead commit message wise was thinking update domain object and repository to reflect how to use sdn for version looking here projects spring data examples commits master for inspiration here but can see what else can add any tips
391,updated ve tried to make the example more clear with the intent and documentation
392,am still not sure can follow we still have long identifier but the repository exposing string id that highly unusual to the average spring data developer findone is supposed to lookup the entity by they identifier it looks like that not the case here can you elaborate this seems to be very fundamental change to what developers expect in spring data setup regarding the commit message if read that and look at the change get the impression that now need add that indexed property to all of my domain types to make them work with sdn is that really the case
393,wish we could get rid of the long id but we can at the moment for the same reason we can remove the default constructor the whole long graphid is misnomer it represents an object in neo database but that id may point to completely different object or to no object at all on restart of the database consequently it an encapsulation leak from the database into the ogm and also into sdn so we now have the ability to work with people who don care about database restarts like those who use the embedded database once off whereby they can use repository of id long see graphrepository and those that want to use natural or synthetic id which will work across database restarts that want to use repository of type whatever implements serializable
394,what if we just have two examples one with what was there previously and one with what we recommend people to use the one adding now besides that bit confused about what else needs to change exactly for the example sd sdn can abstract the user completely from understanding fundamental neo concepts no
395,ve never been great fan of all these store details leaking into the domain types is there chance that developers could just use spring data and basically get that unique true primary true stuff automatically
396,what am wondering too if your newly added property is the id how is the spring data mappingcontext implementation actually finding out about this there doesn seem to be anything unique about the property as the annotation could be used on other properties too right am wondering as spring data rest relies on that information to correctly map incoming requests to the actual identifier values
397,re the idea about let me run it up the flagpole and see what comes back ve always liked the idea of and had that concept in the ogm wrote re mappingcontext it delegated to the ogm via the neo jpersistentproperty have not yet refactored this part of the code to integrate more tightly with spring data yet through the links sent you above refer to spring rest problems with the id field spread pretty thin at the moment so ll get to updating it when can re this example while we have taken some big steps to get closer to spring data there are still more to go at the moment want to encourage users to use sdn in way that will allow us to eventually remove the long or even define it themselves if they run in one time embedded environment in prep for what do you think the example should show
398,can you clarify on couple of things here does the repository actually need to extend store specific interface we usually recommend not to do so as is exposes store details to its clients you change the id type to uuid but the domain class still contains long identifier that is at least confusing but actually even looks broken
399,no it doesn in fact until you mentioned it actually thought it was normal to extend the store specific interface ll change this argh this has been problem for while now the ogm and sdn both expose neo database implementation called id which currently needs to be annotated with unlike other db it not guaranteed to be unique across database restarts read more here it de assigning uuids to neo nodes and relationships it still relevant on top of this developers have asked to have way of uniquely identifying their domain objects either naturally or with the neo recommended approach of using uuid furthermore the implications of this result in things like and projects spring data neo issues ideally this implementation detail will be hidden in future personally hoping when we can remove default constructors we can also remove the need for exposing the internal id what will do for now is add some javadoc here to make this clear for those who haven used neo before
400,spring data examples are based on spring boot release
401,any ideas when this will be merged
402,thanks for the pointer again changes look good we re just busy preparing release currently will take care of that after that
403,sorry didn realize that eclipselink weaving had been set explicitly to false in eclipselink application java projects spring data examples blob master jpa eclipselink src main java example springdata jpa eclipselink application java will update the pr to have static weaving or load time weaving configurable
404,couple of minor items remove dependency setup information from readme as it discoverable from pom xml refer to spring data releasetrain version kay build snapshot from pom via property
405,that merged
406,can you elaborate we refer to ingalls by purpose
407,sorry was wrong not add spring milestones repository
408,added spring milestones repository to resolved this problem
409,that shouldn be necessary as the pom contains the libs snapshot repository projects spring data examples blob master pom xml that aggregates both release milestone and snapshot artifacts
410,looks good to me beyond the minor cosmetic issues commented on feel free to squash and merge to master when you fixed those
411,remove blank line
412,maybe add some brief javadoc to the individual methods to explain what exactly they re showing what the special thing about this method over the others
413,that merged thanks
414,merged with
415,merged with
416,thanks that merged with fe aae
417,how about
418,wasn sure whether this works with jpa thanks for the hint
419,jpa would even work with private ctors afaik
420,this should be fixed with the latest spring data commons snapshots also using target id tostring should allow you to work around this until the release is shipped
421,werwerwer
422,squashed and merged thanks
423,does this pom make more sense until those test modules are available
424,polished and merged see
425,what the reason we need these test jars in the classpath would ve expected to only see the spring data neo dependency anything am missing
426,they are needed for the in memory server and test jar dependencies are not resolved transitively by maven
427,but which of the two is it then does it make sense to make them dedicated artifact it just looks weird having to refer to something test related from non test scope
428,we need them all unfortunately the spring data neo test jar contains the inprocessserver and the others contain the test utilities and testserver from neo ogm
429,actually we can clean it up bit which did here projects spring data examples pull we can add an jira issue for separate test module both in the neo ogm and in spring data neo should be pretty straightforward to add not sure we can make it in time for ga though
430,merged with some minor cleanups thanks
431,that merged thanks
432,that in place thanks
433,that merged thanks
434,good one too also fixed the uri to the search resource on your behalf
435,thanks chris that merged
436,applied too
437,that applied with the fixes for
438,that merged thanks
439,thanks ton jeremy ve left few inline comments if needed to boil it down it basically asking you to simplify the example drastically we need to make sure the core aspect of the example setting up spring data jpa with eclipselink is at the core of it multiple repositories domain types advanced jpa mappings lot of test methods on the repository basically all just distract from that core aspect see for example how the interceptors example is reduced to the very bare bone to allow users to easily discover which parts are actually necessary to achieve the core goal of the example
440,thanks for the feedback ll simplify and address your other comments today simplifying it down to just the core aspect of the original issue makes total sense
441,did you get chance to review my revisions appreciate all the feedback
442,took what you had and simplified it quite bit we now have build profiles for both static and load time weaving see the commits against the original request
443,please remove the formatter file from the pr
444,do we really need the custom plugin is it not available on maven central
445,please change to spring data jpa eclipselink to be consistent with the other modules
446,all properties except this one shouldn be necessary as boot or the parent pom xml derive this or have it configured explicitly
447,is there release version of the plugin available
448,how much explicit configuration to we actually need let try to to as much customization as possible using applicationproperties don think the lcemfb and datasource need to be declared jpaproperties should be configurable via application properties too
449,remove blank line
450,remove blank line
451,let use lombok annotations to avoid all the boilerplate getters and setters might be work having look how other jpa samples do this
452,let try to avoid as much customizations as possible as the focus of the example is clearly on the eclipselink setup not more advanced jpa mappings
453,remove blank line
454,remove blank line
455,it might be worth simplifying the domain model to single domain class the example should focus on getting the fundamentals to work with eclipselink multiple repositories with multiple query methods shouldn be needed
456,let try to move back to single repository with maybe single finder the override for findall should be removed
457,see my comment on the other repository
458,simplify simplify simply remember this should become an exhaustive integration test for crud methods on eclipselink rest assured we do this in spring data jpa itself the example should focus on single aspect which in this particular case is the general setup of spring data jpa project with eclipselink the execution of query method alongside crud method should be entirely sufficient everything else just distracts from the core aspect and needs to be maintained going forward
459,add missing license header
460,remove blank line
461,be sure you use tabs for indentation here
462,hi have follow up question debated using this plugin originally the static weaving plugin listed in the eclipselink documentation requires persistence unit defined in persistence xml without specifying the entity classes or jar in the persistence unit it didn actually do any weaving on the class files the plugin in the current version of the pr does class scanning which seems more ideal but in hindsight it probably not ideal for an example like this because it non standard and may stop working at some point if that non maven central plugin disappears have the example working with all the other review comments incorporated so it is much more correct in terms of spring boot usage have it working using both this plugin and the standard plugin to get the standard plugin working had to create persistence xml file and define persistence unit and list the entity class the jira issue did state ideally this would include static weaving so can either resubmit with the standard plugin and the persistence xml or just remove the static weaving portion which would you be better thanks
463,okay let stick to plugin then is it possible to at least use non snapshot version of it or is the classpath scanning only available in if in doubt keep boot customizations and spring setup to minimum and move custom setup into the build so that we expose the infrastructure setup cost that way does that make sense and provide enough guideline
464,thanks again for the feedback there isn non snapshot version of the plugin available as was thinking more about this think the plugin from maven central and the use of persistence xml better illustrates the costs of using static weaving another approach would be to use the plugin from maven central define persistence xml with only the entity information to support the static weaving during build time and then not use it for the spring boot application example in this case the persistence xml exists just to provide the required information for the build time weaving of the entity spring boot customizations are kept to minimum and the infrastructure setup cost is all in the build just verified that works as well the more detailed example would be using the maven central plugin and persistence xml and doing more spring boot customization to use traditional persistence xm boot docs current reference html howto data access html howto use traditional persistence xml
465,does it make sense to make this real derived query actually adding criterias via the method name think mixing up derived queries with the aspect of overriding of crud method decreases the focus of the example
466,thought it would be good idea to mention this since it is not too obvious why we currently don have stream findall but think we should just mention this in blog post and use derived query in the example just changed the pr accordingly
467,as per our discussion let have look at how we can simplify the setup of reading in the reference json
468,wonder if the example gets bit simpler if we remove the repositories from the mix here putifabsent is not very repository ish method actually and turning that bit of client code into custom repository implementation could very well be just inside the test method the aspect of working with custom implementation inside repository drags attention bit away from the core concern of the example doesn it
469,thanks moved the script into the tests and deleted the custom repository
470,that merged
471,seems we messed this up quite bit during some rebase operations any chance you rebase this onto current master
472,rebased on master
473,thanks for that slightly reduced the complexity of the query method and made the test case more verbose to document what is achieved by the added query
474,decided to not go with the customization but declare the boot plugin more local only to the projects that need it see ca fd for details
475,thanks for fast feedback will apply all necessary changes today
476,take your time
477,hi olivier have applied all fixes for you comments except gitignore have left intellij section it quite common rule and many people use it other things few examples won build if you call mvn clean install spring boot requires main method
478,the issues with the boot plugin have been resolved would you mind rebasing your changes on top of master currently can apply the patch cleanly seems to be related to recent changes that we made to the root pom xml
479,done small fix for application properties
480,awesome thx
481,ve merged the example back but quite few issues came to attention that think we should get solved the location field should really be point from spring data commons enum values in fieldtype should be all upper case to conform to general java idioms we should really get rid off the need to declare default constructors see conference criteria within should take point and distance from spring data commons the date time types should be java there is jsr converter in spring data commons was unsure which of these points are actually issues that we should file tickets for as you probably have better insight into the project capabilities if you decide to create tickets for the missing items please be sure to put me on the watch list
482,can you please move these into gitignore local to the elasticsearch sample project
483,missing newline
484,this should be obsolete boot should be able to determine the main class automatically
485,have mvn spring boot run directly to be able to get rid off the shell script
486,drop that one as it only adds layer of indirection without much benefit see my comment on the readme above
487,if the app only produces log output maybe rather set everything up as test cases using assertions and optionally writing logs suggest to remove application and the service implementation completely and entirely stick to test cases
488,see the comment on application above
489,use lombok annotations to get rid of the getter setter noise
490,use lombok on conference instead
491,missing new line
492,formatting
493,missing new line
494,formatting
495,why wouldn we have such global intellij stuff not at the root level of this project if we don put it at the top we ll need this on every project
496,this looks really decent ll add few polishing notes to the individual files but generally speaking very cool
497,polished and merged switched to spring mvc test support instead of running an integration test bootstrapping server instance adapted security configuration to make this work
498,do we need this
499,do you have the ticket for the fix handy might be worthwhile asking rob to port that one back to the line
500,remove empty line for other files as well
501,this construct is uses quite few times esp in the test cases maybe extract int securityutils runas string username string password string roles
502,remove commented out code
503,we can use lombok here to avoid the accessors
504,remove empty line annotations on the same line as the variable declaration formatter setup should ve actually taken care of that
505,lombok
506,does this need an
507,license header missing
508,maybe rather use boot
509,let use assertthat everywhere
510,let make plain repository accessing tests separate test cases at least could even be separate test class to even separate them more
511,let move this one up in the class before the method so that people know immediately what configuration the test is bootstrapped with
512,either remove completely or simplify to logging level org springframework web in application properties
513,well was testing the asciidoc outputs didn want the html to become controlled artifact
514,yes it does it not an override method
515,looking at the pom xml for the sample was wondering whether it make sense to add spring boot starter for spring data cassandra
516,removed the logging configuration and used lombok in the domain class having spring boot starter would help with the configuration but thats something that we can add later ll define custom junit rule that checks whether cassandra is up ll add to the cassandra tests for now
517,do we actually need that
518,use lombok for accessors and equals hascode
519,newline alternatively use logging level org springframework error in application properties couldn we just live with the default logging settings
520,we probably need to guard the test execution to make sure cassandra instance is really running
521,switch to jackson repositorypopulatorfactorybean for setup from json file move sample data json into root of the classpath drop network lookup of the blog feed
522,looks good to me except the minor comments
523,was that by accident
524,missing line break
525,can we use first second third
526,do we need the comment in the blocks
527,no please
528,lgtm merging
529,is there way we get this to work without an external solr instance like to keep mvn clean test on the very root project working if that not an option we could set the skiptests property in the pom xml to true to exclude the tests from running during command line build they could still be executed from within the ide though
530,the basic sample would work using an embedded server the other one requires running instance ll add guards skipping those tests if solr is not running
531,simple for each
532,simple for each
533,think it makes sense to make this separate example in separate package of the very same project the main reason is that the example currently shows very basic functionality and the support is quit bit more advanced as it needs much deeper understanding of mongodb internals profiling etc
534,yes makes sense also allows to move some of the config stuff enable disable profiling to the config updated the pr
535,this is now live at projects spring data examples tree master rest multi store
536,we might wanna tweak the readme in the repository root to point to the security example as well
537,done
538,line break
539,manytoone right
540,return type of securityexpressionoperations to reduce reflection overhead
541,no anonymous type required right
542,only
543,new line
544,left overs from the intermediate removal of the java settings
545,left overs from the intermediate removal of the java settings
546,well securityexpressionroot is an abstract class with only two impls org springframework security web access expression websecurityexpressionroot needs http session org springframework security access expression method methodsecurityexpressionroot package protected
547,not really but for some reason maven tries to compile this with source java
548,good point probably something that rob should take care of keep as is for now
549,maybe the switch to the properties doesn work as expected
550,like that change we should make sure the documentation above matches the actual query
551,done or not
552,the github ui dosen show the actual file state the query in the comment looks now like sql select from businessobject where owner emailaddress like
553,cool thx
554,do we need equals and hashcode here if so the should only inspect the id as it an entity not value object
555,just wanted to demonstrate that the owner is the owner we expect etc in addition to that we could also use the data field to test additonal stuff like encryption value masking etc therefore keep it in as well
556,so that proven by getting the entity with the right id isn it even if someone changed the object in the database in the meantime so that they differ in property values it still be the correct value as it the entity with the same id
557,thanks for the feedback actually we have sample app projects spring session tree master samples misc hazelcast that demonstrates the usage without the spring core org springframework util assert is indeed used within the spring session but to my knowledge in parts of the framework that need spring core anyway did you encounter any particular problem
558,well did not since am using spring too but just noted that the repo filter is using spring core thought this doc states that spring is not required or it is when using sevlwt containers
559,are you referring to sessionrepositoryfilter not aware of it using spring core previously linked sample app projects spring session tree master samples misc hazelcast wouldn work if it did can you point to the specific usage we re talking about here
560,merged to master in
561,hi thanks for the pr generally we only add links to rd party documentation to community extensions section of our reference manual further details on usage of extension are expected to be available on the linked site can you update reduce the pr to be inline with that
562,sure updated
563,thanks for the contribution this is now merged to the master
564,hub please sign the contributor license agreement repositoryid spring projects spring session pullrequestid click here repositoryid spring projects spring session pullrequestid to manually synchronize the status of this pull request see the faq for frequently asked questions
565,closing as this seems to be opened by accident
566,thanks for the pr this is merged to master in
567,having trouble getting this to merge into master at the moment made one update in my branch session tree gh to fix dependency issue but getting java lang illegalstateexception failed to load applicationcontext at org springframework test context cache defaultcacheawarecontextloaderdelegate loadcontext defaultcacheawarecontextloaderdelegate java at org springframework test context support defaulttestcontext getapplicationcontext defaulttestcontext java at org springframework boot test autoconfigure springbootdependencyinjectiontestexecutionlistener preparetestinstance springbootdependencyinjectiontestexecutionlistener java at org springframework test context testcontextmanager preparetestinstance testcontextmanager java at org springframework test context junit springjunit classrunner createtest springjunit classrunner java at org springframework test context junit springjunit classrunner runreflectivecall springjunit classrunner java at org junit internal runners model reflectivecallable run reflectivecallable java at org springframework test context junit springjunit classrunner methodblock springjunit classrunner java at org springframework test context junit springjunit classrunner runchild springjunit classrunner java at org springframework test context junit springjunit classrunner runchild springjunit classrunner java at org junit runners parentrunner run parentrunner java at org junit runners parentrunner schedule parentrunner java at org junit runners parentrunner runchildren parentrunner java at org junit runners parentrunner access parentrunner java at org junit runners parentrunner evaluate parentrunner java at org springframework test context junit statements runbeforetestclasscallbacks evaluate runbeforetestclasscallbacks java at org springframework test context junit statements runaftertestclasscallbacks evaluate runaftertestclasscallbacks java at org junit runners parentrunner run parentrunner java at org springframework test context junit springjunit classrunner run springjunit classrunner java at org gradle api internal tasks testing junit junittestclassexecuter runtestclass junittestclassexecuter java at org gradle api internal tasks testing junit junittestclassexecuter execute junittestclassexecuter java at org gradle api internal tasks testing junit junittestclassprocessor processtestclass junittestclassprocessor java at org gradle api internal tasks testing suitetestclassprocessor processtestclass suitetestclassprocessor java at sun reflect nativemethodaccessorimpl invoke native method at sun reflect nativemethodaccessorimpl invoke nativemethodaccessorimpl java at sun reflect delegatingmethodaccessorimpl invoke delegatingmethodaccessorimpl java at java lang reflect method invoke method java at org gradle internal dispatch reflectiondispatch dispatch reflectiondispatch java at org gradle internal dispatch reflectiondispatch dispatch reflectiondispatch java at org gradle internal dispatch contextclassloaderdispatch dispatch contextclassloaderdispatch java at org gradle internal dispatch proxydispatchadapter dispatchinginvocationhandler invoke proxydispatchadapter java at com sun proxy proxy processtestclass unknown source at org gradle api internal tasks testing worker testworker processtestclass testworker java at sun reflect nativemethodaccessorimpl invoke native method at sun reflect nativemethodaccessorimpl invoke nativemethodaccessorimpl java at sun reflect delegatingmethodaccessorimpl invoke delegatingmethodaccessorimpl java at java lang reflect method invoke method java at org gradle internal dispatch reflectiondispatch dispatch reflectiondispatch java at org gradle internal dispatch reflectiondispatch dispatch reflectiondispatch java at org gradle internal remote internal hub messagehub handler run messagehub java at org gradle internal concurrent executorpolicy catchandrecordfailures onexecute executorpolicy java at org gradle internal concurrent stoppableexecutorimpl run stoppableexecutorimpl java at java util concurrent threadpoolexecutor runworker threadpoolexecutor java at java util concurrent threadpoolexecutor worker run threadpoolexecutor java at java lang thread run thread java caused by org springframework beans factory unsatisfieddependencyexception error creating bean with name websecurityconfig unsatisfied dependency expressed through method configureglobal parameter nested exception is org springframework beans factory unsatisfieddependencyexception error creating bean with name userrepositoryuserdetailsservice defined in file users rwinch code spring session samples boot websocket build classes main sample security userrepositoryuserdetailsservice class unsatisfied dependency expressed through constructor parameter nested exception is org springframework beans factory beancreationexception error creating bean with name userrepository cannot create inner bean inner bean ab of type org springframework orm jpa sharedentitymanagercreator while setting bean property entitymanager nested exception is org springframework beans factory beancreationexception error creating bean with name inner bean ab cannot resolve reference to bean entitymanagerfactory while setting constructor argument nested exception is org springframework beans factory beancreationexception error creating bean with name entitymanagerfactory post processing of factorybean singleton object failed nested exception is org springframework beans factory unsatisfieddependencyexception error creating bean with name websocketconfig unsatisfied dependency expressed through field sessionrepository nested exception is org springframework beans factory nosuchbeandefinitionexception no qualifying bean of type org springframework session sessionrepository available expected at least bean which qualifies as autowire candidate dependency annotations springframework beans factory annotation autowired required true at org springframework beans factory annotation autowiredannotationbeanpostprocessor autowiredmethodelement inject autowiredannotationbeanpostprocessor java at org springframework beans factory annotation injectionmetadata inject injectionmetadata java at org springframework beans factory annotation autowiredannotationbeanpostprocessor postprocesspropertyvalues autowiredannotationbeanpostprocessor java at org springframework beans factory support abstractautowirecapablebeanfactory populatebean abstractautowirecapablebeanfactory java at org springframework beans factory support abstractautowirecapablebeanfactory docreatebean abstractautowirecapablebeanfactory java at org springframework beans factory support abstractautowirecapablebeanfactory createbean abstractautowirecapablebeanfactory java at org springframework beans factory support abstractbeanfactory getobject abstractbeanfactory java at org springframework beans factory support defaultsingletonbeanregistry getsingleton defaultsingletonbeanregistry java at org springframework beans factory support abstractbeanfactory dogetbean abstractbeanfactory java at org springframework beans factory support abstractbeanfactory getbean abstractbeanfactory java at org springframework beans factory support defaultlistablebeanfactory preinstantiatesingletons defaultlistablebeanfactory java at org springframework context support abstractapplicationcontext finishbeanfactoryinitialization abstractapplicationcontext java at org springframework context support abstractapplicationcontext refresh abstractapplicationcontext java at org springframework boot context embedded embeddedwebapplicationcontext refresh embeddedwebapplicationcontext java at org springframework boot springapplication refresh springapplication java at org springframework boot springapplication refreshcontext springapplication java at org springframework boot springapplication run springapplication java at org springframework boot test context springbootcontextloader loadcontext springbootcontextloader java at org springframework test context cache defaultcacheawarecontextloaderdelegate loadcontextinternal defaultcacheawarecontextloaderdelegate java at org springframework test context cache defaultcacheawarecontextloaderdelegate loadcontext defaultcacheawarecontextloaderdelegate java more caused by org springframework beans factory unsatisfieddependencyexception error creating bean with name userrepositoryuserdetailsservice defined in file users rwinch code spring session samples boot websocket build classes main sample security userrepositoryuserdetailsservice class unsatisfied dependency expressed through constructor parameter nested exception is org springframework beans factory beancreationexception error creating bean with name userrepository cannot create inner bean inner bean ab of type org springframework orm jpa sharedentitymanagercreator while setting bean property entitymanager nested exception is org springframework beans factory beancreationexception error creating bean with name inner bean ab cannot resolve reference to bean entitymanagerfactory while setting constructor argument nested exception is org springframework beans factory beancreationexception error creating bean with name entitymanagerfactory post processing of factorybean singleton object failed nested exception is org springframework beans factory unsatisfieddependencyexception error creating bean with name websocketconfig unsatisfied dependency expressed through field sessionrepository nested exception is org springframework beans factory nosuchbeandefinitionexception no qualifying bean of type org springframework session sessionrepository available expected at least bean which qualifies as autowire candidate dependency annotations springframework beans factory annotation autowired required true at org springframework beans factory support constructorresolver createargumentarray constructorresolver java at org springframework beans factory support constructorresolver autowireconstructor constructorresolver java at org springframework beans factory support abstractautowirecapablebeanfactory autowireconstructor abstractautowirecapablebeanfactory java at org springframework beans factory support abstractautowirecapablebeanfactory createbeaninstance abstractautowirecapablebeanfactory java at org springframework beans factory support abstractautowirecapablebeanfactory docreatebean abstractautowirecapablebeanfactory java at org springframework beans factory support abstractautowirecapablebeanfactory createbean abstractautowirecapablebeanfactory java at org springframework beans factory support abstractbeanfactory getobject abstractbeanfactory java at org springframework beans factory support defaultsingletonbeanregistry getsingleton defaultsingletonbeanregistry java at org springframework beans factory support abstractbeanfactory dogetbean abstractbeanfactory java at org springframework beans factory support abstractbeanfactory getbean abstractbeanfactory java at org springframework beans factory config dependencydescriptor resolvecandidate dependencydescriptor java at org springframework beans factory support defaultlistablebeanfactory doresolvedependency defaultlistablebeanfactory java at org springframework beans factory support defaultlistablebeanfactory resolvedependency defaultlistablebeanfactory java at org springframework beans factory annotation autowiredannotationbeanpostprocessor autowiredmethodelement inject autowiredannotationbeanpostprocessor java more caused by org springframework beans factory beancreationexception error creating bean with name userrepository cannot create inner bean inner bean ab of type org springframework orm jpa sharedentitymanagercreator while setting bean property entitymanager nested exception is org springframework beans factory beancreationexception error creating bean with name inner bean ab cannot resolve reference to bean entitymanagerfactory while setting constructor argument nested exception is org springframework beans factory beancreationexception error creating bean with name entitymanagerfactory post processing of factorybean singleton object failed nested exception is org springframework beans factory unsatisfieddependencyexception error creating bean with name websocketconfig unsatisfied dependency expressed through field sessionrepository nested exception is org springframework beans factory nosuchbeandefinitionexception no qualifying bean of type org springframework session sessionrepository available expected at least bean which qualifies as autowire candidate dependency annotations springframework beans factory annotation autowired required true at org springframework beans factory support beandefinitionvalueresolver resolveinnerbean beandefinitionvalueresolver java at org springframework beans factory support beandefinitionvalueresolver resolvevalueifnecessary beandefinitionvalueresolver java at org springframework beans factory support abstractautowirecapablebeanfactory applypropertyvalues abstractautowirecapablebeanfactory java at org springframework beans factory support abstractautowirecapablebeanfactory populatebean abstractautowirecapablebeanfactory java at org springframework beans factory support abstractautowirecapablebeanfactory docreatebean abstractautowirecapablebeanfactory java at org springframework beans factory support abstractautowirecapablebeanfactory createbean abstractautowirecapablebeanfactory java at org springframework beans factory support abstractbeanfactory getobject abstractbeanfactory java at org springframework beans factory support defaultsingletonbeanregistry getsingleton defaultsingletonbeanregistry java at org springframework beans factory support abstractbeanfactory dogetbean abstractbeanfactory java at org springframework beans factory support abstractbeanfactory getbean abstractbeanfactory java at org springframework beans factory config dependencydescriptor resolvecandidate dependencydescriptor java at org springframework beans factory support defaultlistablebeanfactory doresolvedependency defaultlistablebeanfactory java at org springframework beans factory support defaultlistablebeanfactory resolvedependency defaultlistablebeanfactory java at org springframework beans factory support constructorresolver resolveautowiredargument constructorresolver java at org springframework beans factory support constructorresolver createargumentarray constructorresolver java more caused by org springframework beans factory beancreationexception error creating bean with name inner bean ab cannot resolve reference to bean entitymanagerfactory while setting constructor argument nested exception is org springframework beans factory beancreationexception error creating bean with name entitymanagerfactory post processing of factorybean singleton object failed nested exception is org springframework beans factory unsatisfieddependencyexception error creating bean with name websocketconfig unsatisfied dependency expressed through field sessionrepository nested exception is org springframework beans factory nosuchbeandefinitionexception no qualifying bean of type org springframework session sessionrepository available expected at least bean which qualifies as autowire candidate dependency annotations springframework beans factory annotation autowired required true at org springframework beans factory support beandefinitionvalueresolver resolvereference beandefinitionvalueresolver java at org springframework beans factory support beandefinitionvalueresolver resolvevalueifnecessary beandefinitionvalueresolver java at org springframework beans factory support constructorresolver resolveconstructorarguments constructorresolver java at org springframework beans factory support constructorresolver instantiateusingfactorymethod constructorresolver java at org springframework beans factory support abstractautowirecapablebeanfactory instantiateusingfactorymethod abstractautowirecapablebeanfactory java at org springframework beans factory support abstractautowirecapablebeanfactory createbeaninstance abstractautowirecapablebeanfactory java at org springframework beans factory support abstractautowirecapablebeanfactory docreatebean abstractautowirecapablebeanfactory java at org springframework beans factory support abstractautowirecapablebeanfactory createbean abstractautowirecapablebeanfactory java at org springframework beans factory support beandefinitionvalueresolver resolveinnerbean beandefinitionvalueresolver java more caused by org springframework beans factory beancreationexception error creating bean with name entitymanagerfactory post processing of factorybean singleton object failed nested exception is org springframework beans factory unsatisfieddependencyexception error creating bean with name websocketconfig unsatisfied dependency expressed through field sessionrepository nested exception is org springframework beans factory nosuchbeandefinitionexception no qualifying bean of type org springframework session sessionrepository available expected at least bean which qualifies as autowire candidate dependency annotations springframework beans factory annotation autowired required true at org springframework beans factory support factorybeanregistrysupport getobjectfromfactorybean factorybeanregistrysupport java at org springframework beans factory support abstractbeanfactory getobjectforbeaninstance abstractbeanfactory java at org springframework beans factory support abstractbeanfactory dogetbean abstractbeanfactory java at org springframework beans factory support abstractbeanfactory getbean abstractbeanfactory java at org springframework beans factory support beandefinitionvalueresolver resolvereference beandefinitionvalueresolver java more caused by org springframework beans factory unsatisfieddependencyexception error creating bean with name websocketconfig unsatisfied dependency expressed through field sessionrepository nested exception is org springframework beans factory nosuchbeandefinitionexception no qualifying bean of type org springframework session sessionrepository available expected at least bean which qualifies as autowire candidate dependency annotations springframework beans factory annotation autowired required true at org springframework beans factory annotation autowiredannotationbeanpostprocessor autowiredfieldelement inject autowiredannotationbeanpostprocessor java at org springframework beans factory annotation injectionmetadata inject injectionmetadata java at org springframework beans factory annotation autowiredannotationbeanpostprocessor postprocesspropertyvalues autowiredannotationbeanpostprocessor java at org springframework beans factory support abstractautowirecapablebeanfactory populatebean abstractautowirecapablebeanfactory java at org springframework beans factory support abstractautowirecapablebeanfactory docreatebean abstractautowirecapablebeanfactory java at org springframework beans factory support abstractautowirecapablebeanfactory createbean abstractautowirecapablebeanfactory java at org springframework beans factory support abstractbeanfactory getobject abstractbeanfactory java at org springframework beans factory support defaultsingletonbeanregistry getsingleton defaultsingletonbeanregistry java at org springframework beans factory support abstractbeanfactory dogetbean abstractbeanfactory java at org springframework beans factory support abstractbeanfactory getbean abstractbeanfactory java at org springframework beans factory support constructorresolver instantiateusingfactorymethod constructorresolver java at org springframework beans factory support abstractautowirecapablebeanfactory instantiateusingfactorymethod abstractautowirecapablebeanfactory java at org springframework beans factory support abstractautowirecapablebeanfactory createbeaninstance abstractautowirecapablebeanfactory java at org springframework beans factory support abstractautowirecapablebeanfactory docreatebean abstractautowirecapablebeanfactory java at org springframework beans factory support abstractautowirecapablebeanfactory createbean abstractautowirecapablebeanfactory java at org springframework beans factory support abstractbeanfactory getobject abstractbeanfactory java at org springframework beans factory support defaultsingletonbeanregistry getsingleton defaultsingletonbeanregistry java at org springframework beans factory support abstractbeanfactory dogetbean abstractbeanfactory java at org springframework beans factory support abstractbeanfactory getbean abstractbeanfactory java at org springframework context event abstractapplicationeventmulticaster retrieveapplicationlisteners abstractapplicationeventmulticaster java at org springframework context event abstractapplicationeventmulticaster getapplicationlisteners abstractapplicationeventmulticaster java at org springframework context event simpleapplicationeventmulticaster multicastevent simpleapplicationeventmulticaster java at org springframework context support abstractapplicationcontext publishevent abstractapplicationcontext java at org springframework context support abstractapplicationcontext publishevent abstractapplicationcontext java at org springframework boot autoconfigure orm jpa datasourceinitializedpublisher publisheventifrequired datasourceinitializedpublisher java at org springframework boot autoconfigure orm jpa datasourceinitializedpublisher postprocessafterinitialization datasourceinitializedpublisher java at org springframework beans factory support abstractautowirecapablebeanfactory applybeanpostprocessorsafterinitialization abstractautowirecapablebeanfactory java at org springframework beans factory support abstractautowirecapablebeanfactory postprocessobjectfromfactorybean abstractautowirecapablebeanfactory java at org springframework beans factory support factorybeanregistrysupport getobjectfromfactorybean factorybeanregistrysupport java more caused by org springframework beans factory nosuchbeandefinitionexception no qualifying bean of type org springframework session sessionrepository available expected at least bean which qualifies as autowire candidate dependency annotations springframework beans factory annotation autowired required true at org springframework beans factory support defaultlistablebeanfactory raisenomatchingbeanfound defaultlistablebeanfactory java at org springframework beans factory support defaultlistablebeanfactory doresolvedependency defaultlistablebeanfactory java at org springframework beans factory support defaultlistablebeanfactory resolvedependency defaultlistablebeanfactory java at org springframework beans factory annotation autowiredannotationbeanpostprocessor autowiredfieldelement inject autowiredannotationbeanpostprocessor java more
568,ve rebased the changes on the current master and addressed the problem with websocket sample the cause was an issue with spring boot conditions on redis based auto config of spring session see spring projects spring boot
569,pr updated due to spr being fixed in the master via spring projects spring framework
570,thanks for the contribution this was merged to master in cf and backported to in
571,thanks for the contribution this was merged to master in and and polished in commits through
572,please sign the contributor license agreement repositoryid spring projects spring session pullrequestid click here repositoryid spring projects spring session pullrequestid to manually synchronize the status of this pull request see the faq for frequently asked questions
573,thank you for signing the contributor license agreement repositoryid spring projects spring session pullrequestid
574,thanks for the contribution this is now merged to the master
575,thanks for the pr we need to remove these in non passive release so scheduling for
576,updated the pr to rebase to current master and remove sessionentrylistener which was deprecated in
577,thank you for contribution as usual smile wonder what do you think about spring io platform compatibility gradle plugins dependency management plugin issues also interested in the gradle upgrade but that issue is really stopping me although don see any problems in one my small project which is part of spring io platform and really build successfuly with the springiocheck task when add classpath io spring gradle dependency management plugin release as well wdyt
578,hey you re welcome smile ve been following the situation with gradle and dependency management plugin as we at my company use gradle exclusively so it topic of our interest we have two medium to large projects ongoing that are on gradle atm to be exact and we haven faced any issues both are spring io platform and boot based spring security has also moved to gradle spring projects spring security some time ago so imo the best approach would be to attempt the gradle upgrade and see where that gets you since chances are good from my experience at least that you won run into any issue upgrade of dependency management plugin to is required due to spring gradle plugins dependency management plugin since spring io plugin is still based on assume you encountered that one in your project as well
579,what are the chances just wanted to do the same and googled to see if someone has done it already
580,think would prefer to keep the two objects decoupled but provide an easy way to configure them one way this could be done by determining if springsessionremembermeservices is bean to set cookieserializer expiration property another issue we should consider is how does this behave with spring security session fixation protection in older servlet environments the session is invalidated and then recreated at log in cannot recall off the top of my head if this happens before or after the remember me logic is invoked
581,thanks for the feedback ll look into it one way this could be done by determining if springsessionremembermeservices is bean to set cookieserializer expiration property but this doesn unless missing something address the situation described in my previous comment imo it should be possible to have behavior that is similar to one of google account sid cookie if stay signed in option is selected session cookie is persistent meaning it has expiration specified otherwise it not persistent we need to somehow serialize the cookie with different max age depending on whether remember me was requested or not having two cookieserializer doesn look appealing to me maybe cookieserializer interface could be extended with writecookievalue method that allows specifying the cookiemaxage parameter
582,not sure why this wouldn help if springsessionremembermeservices was bean the configuration would automatically ensure that the cookieserializer was setup properly
583,ve updated the pr springsessionremembermeservices now sets request attribute upon successful remember me login defaultcookieserializer can now be configured to look for the presence of remember me request attribute and apply the appropriate cookie max age went with request attribute vs request param as we originally discussed due to the fact its more reliable way to indicate remember me login the request param might be present without remember me being involved at all which is sort of risk the automatic configuration of defaultcookieserializer was somewhat tricky due to springsessionremembermeservices relying on spring security web dependency which is optional
584,thanks for the pr this is merged into master provided some polish in cde ab bffc fd ac
585,thanks for the pr this is now merged into master
586,thanks for the pr this is merged via aec ce aacb
587,thanks for the pr this is merged via fad ba cea also added tests in da af bc ecd af
588,please sign the contributor license agreement repositoryid spring projects spring session pullrequestid click here repositoryid spring projects spring session pullrequestid to manually synchronize the status of this pull request see the faq for frequently asked questions
589,thank you for signing the contributor license agreement repositoryid spring projects spring session pullrequestid
590,thanks for the pr this is now merged via dfa eacda ce ea and polished it via aec fade fcd
591,the last part is slightly not nice in byte code if you care in the first case it just ldc in the other that done via synthetic method containing getstatic during execution it should be optimized anyway but still more work for the jvm
592,thanks for the pr this is now merged into master
593,will change all samples to use lettuce instead of jedis after discussing with
594,rebased the pr against
595,closing this since decorator approach doesn seem suitable for addressing the original problem as there are no guarantees any non decorated repository operation won internally call getsession thus causing deserialization error as demonstrated by redisoperationssessionrepository where delete operation internally calls getsession see comment projects spring session pull discussion another problematic bit is the configuration as we would need to register both delegating implementation and saferetrievingsessionrepository decorator as beans and mark decorator as
596,is it possible some of the sessions are deserializable while some are not it would seem nice to be able to return just the ones that are deserializable and delete the ones that are not otherwise repeated attempts to find will always result in an empty result until any configured timeout of the sessions that cannot be deserialized not sure how this can be accomplished in way that supports any findbyindexnamesessionrepository implementation though at least documenting the behavior in the javadoc for this method would be nice think
597,thank you for raising this concern ve planned to comment on findbyindexnameandindexvalue behavior but forgot not sure what would be the best way to address this due to exact reasons you ve described delegates will fail even if only one of the results is not deserializable and don see way around it
598,hi have just tested the above using redis and calling delegate delete results in serialization issue as redisoperationssessionrepository goes away and tries to get the session again redissession session getsession sessionid true not sure if this is an issue with this code or with redisoperationssessionrepository thanks
599,thanks for giving this test run it problem with this code since it doesn take into account that delegate delete operation or any other for that matter could internally call an operation that can result in deserialization error guess this is case in point for implementing some sort of deserialization strategy vs the session repository decorator pattern
600,thanks for the pr this is merged into master
601,please sign the contributor license agreement repositoryid spring projects spring session pullrequestid click here repositoryid spring projects spring session pullrequestid to manually synchronize the status of this pull request see the faq for frequently asked questions
602,thank you for signing the contributor license agreement repositoryid spring projects spring session pullrequestid
603,thanks for the pr this is now merged into master
604,please sign the contributor license agreement repositoryid spring projects spring session pullrequestid click here repositoryid spring projects spring session pullrequestid to manually synchronize the status of this pull request see the faq for frequently asked questions
605,thank you for signing the contributor license agreement repositoryid spring projects spring session pullrequestid
606,lgtm great work
607,this pr might slightly improve performance but the main motivation is to avoid race conditions described in another thing introduced new attribute in enablehazelcasthttpsession hazelcastflushmode named it like that to be in line with redisflushmode in enableredishttpsession but would like to call it flushmode to avoid noise what do you think
608,thanks for the contribution this is now merged to the master in with minor polish in
609,will there be mention in the release notes about this particularly as it changes the default behavior
610,with this pr being part of an effort started in to bring the first class support for hazelcast sure things will get proper mention in the release notes one thing forgot to comment on while closing the pr another thing introduced new attribute in enablehazelcasthttpsession hazelcastflushmode named it like that to be in line with redisflushmode in enableredishttpsession but would like to call it flushmode to avoid noise what do you think and have discussed this and while we like the simple flushmode name the hazelcastflushmode was kept in order to maintain consistency with the existing naming of redisflushmode
611,should be java assert notnull cached mapsession cannot be null
612,thanks for catching this going to fix it asap
613,it fixed thanks again
614,thanks for the pr this is now merged into master via bdbcf afa ba please note that we do not want to redissession to public because this is an implementation detail users can use the expiringsession interface instead for this reason omitted the changes in the last commit
615,thanks for your explanation about redissession this project is very very useful congratulations about your job
616,submitted these changes to spring session as pr for your review rather than committing directly since it upgrades spring boot to release sets the core spring framework dependency to release and upgrades spring data gemfire to release have resolved all issues with the gemfire httpsession samples related to these updates per your earlier request and issues if you have any questions let me know thanks john
617,thanks for the pr this was initially broken due to the jackson version differences to fix this an update to spring security was made via gh this was merged in
618,please sign the contributor license agreement repositoryid spring projects spring session pullrequestid click here repositoryid spring projects spring session pullrequestid to manually synchronize the status of this pull request see the faq for frequently asked questions
619,thank you for signing the contributor license agreement repositoryid spring projects spring session pullrequestid
620,thanks for the pr this is now merged into master via df fc ce and db fe dc cfe
621,thanks
622,sorry about that was purely by accident develop on windows machine unfortunately
623,thanks for the pr this is merged via dbc af ac
624,wouldn this be breaking change to public api know have my own custom implementation of httpsessionstrategy and upgrading to version of spring session which contains this change would break my code as well as break anyone else code that is either extending or using the public api
625,yes this will break your code that the reason why this is schedule for version because it will be major release
626,got it thanks
627,thanks for the pr interested in why you find this change necessary generally speaking don think this would really need to change
628,hi thanks for the feedback as described in issue running into issues in environments with multiple application servers connected to multiple databases at the top of the minute both servers are kicking off the jdbcoperationssessionrepository cleanupexpiredsessions method to clean up sessions on their databases when the databases try to delete the data on the other servers through replication it runs into errors because the data it is expecting to be there is actually not there this change would allow system property to be set on each server for the cron expression so for example one server could run the cleanupexpiredsessions method at the top of every minute and the other server could easily be set to run cleanupexpiredsessions at the second point of every minute sorry not the best at explaining things sometimes so hope this makes sense let me know if you have any other questions in my app ve essentially set up the solution that suggested in his comment on issue yesterday but was just adding pull request in case others thought it may be useful
629,closing this in favor of ecf eca bc de abde which uses property with default value like cron spring session cleanup cron expression
630,closing because build failed will fix and submit new pull request
631,fixed in eda and polished in fef bd cdf dc af abe
632,thanks for the pr you can use single pr but can you please split the commits into two distinct commits for the specific issues wondering if we can improve this slightly so that the jdbchttpsessionconfiguration detects the database vendor and updates the query for and derby using something like public jdbcoperationssessionrepository sessionrepository springsessionjdbcoperations jdbctemplate jdbc platformtransactionmanager transactionmanager throws exception string vendor jdbc getdatasource getconnection getmetadata getdatabaseproductname boolean ish equalsignorecase vendor thoughts
633,you can use single pr but can you please split the commits into two distinct commits for the specific issues done wondering if we can improve this slightly so that the jdbchttpsessionconfiguration detects the database vendor and updates the query for and derby like the idea done as well with the latest pr update
634,thanks for the pr this is now merged into master
635,ve updated the pr as per your suggestions
636,user might be bit surprised to find out if the manually invoke setconversionservice and then setclassloader that the conversionservice is overridden perhaps better approach could be to remove the setclassloader method and have the configuration class create default conversionservice with the appropriate classloader if the user has not explicitly provided one
637,agreed that scenario came across my mind today as well
638,thanks for the pr this is now merged into master
639,any feedback on this
640,this is currently somewhat rough decent amount of cleanup and documentation is required and it is light on unit tests integration tests are copy pasted from the jdbc integration tests with some modifications primarily around expiration jdbc expires sessions manually while the cassandra implementation makes use of ttl had issues getting unit cassandra unit and embedded cassandra working so the integration test currently depends on cassandra running outside the process on localhost added cassandra to the travis service list
641,ve added some comments on the code guess the next step would be to add unit tests for the repository and cassandrahttpsessionconfiguration imo it would be reeeally nice if you managed to get embedded cassandra to work with integration tests
642,nice approach added my thoughts to the pr besides some basic configuration you also might want to be able to configure the consistency level to tune throughput vs consistency
643,finally got embedded cassandra working not sure what was missing initially
644,guess this isn available for public consumption yet thanks
645,it most of the way there and we ve been using similar code in prod for few months not sure what else needs to happen for full inclusion or if it would be better off pulling it out into rd party extension
646,we need few things before it can be included documentation samples also like to ask does it perform write on every attribute or is it just attributes that have been updated this is an important question because writing all attributes impacts performance and is much more likely to cause race conditions
647,at the moment it overwriting the full session on each change insert insert querybuilder insertinto this tablename value id uuid fromstring session getid value creation time session getcreationtime value last accessed session getlastaccessedtime value max inactive interval in seconds session getmaxinactiveintervalinseconds value attributes serializedattributes insert using querybuilder ttl ttl that was primarily to take advantage of cassandra ttl capabilities and start out simple
648,let me know if can help with samples or documentation ll start looking at the source code but few pointers on where to start would help thanks
649,new to the project and not really sure where to start with the docs might want to wait and make sure that the approach of serializing all attributes on save isn non starter with
650,still going through the source code few questions if possible pardon my ignorance if missing something see that cassandrasessionrepository primarily relies on the session and session by name tables inside cassandrasessionrepositoryitest see that there schema initialization snippet how should these get initialized inside prod cluster at runtime what is currently determining the consistency levels in the queries used in cassandrasessionrepository is it cassandratemplate how is this implementation behaving in your production applications any documentation has to go in spring session docs src docs asciidoc right thanks again
651,might want to wait and make sure that the approach of serializing all attributes on save isn non starter with if possible think we should consider only writing the attributes that have changed in our experience this is somewhat critical to ensuring users get the best experience it not only improves performance but reduces the likelihood of race conditions which are inherent in web applications
652,thanks for the offer to help any documentation has to go in spring session docs src docs asciidoc right correct you can look at projects spring session commit cebc df cf ae ad as guideline keep in mind that we typically use webjars now so you may want to ensure you base the samples from an existing sample application you will notice that all code in the documentation is tested this is required to ensure we keep high quality documentation
653,in prod the user will be responsible for executing the necessary cql on their own believe that how it works with the jdbc backend good call on the consistency setting by default believe it configured through the query options of the cluster but we should probably allow configuration option to set it for spring session operations we haven had any issues with it in prod but our usage is very limited in scope our application is primarily oauth based but we re using spring session for the initial authentication and account management operations
654,can take closer look at it and see how that changes the ttl situation schema
655,ok yes see how the sample applications are implemented ll fork from thanks
656,ok managed to create new cassandra sample app based on the mongo sample app now just need to fix the integration tests for the app and then ll send pr to thanks
657,ok sent out this pull request to your repo session pull it has couple fixes on the config annotations as well as an example cassandra app with integration tests ll send second one with documentation notes and for that may need to ask some more questions on the implementation source code thanks
658,just merged it in thanks
659,ok created new pull request in your repo session pull think the new asciidoc is properly integrated with the documentation index now there are still couple of to do items needed to ask about when available we ll need to add consistency level tuning properties for session read write queries as well as few notes on their impact on cluster performance understand how we can use the properties in enablecassandrahttpsession to create cluster session and cassandraoperations object however when working within spring boot can we also use these properties in application properties or application yml ask because read these docs boot docs current reference html boot features nosql html boot features cassandra and saw that there are configuration properties similar to our new enablecassandrahttpsession annotation hope my questions are clear thanks
660,merged that pr in thanks again feel like looked into some of the spring boot annotations autoconfiguration when was getting started but none of the spring boot stuff was on the project classpath can dig back in this weekend gonna be busy with family stuff until after thanksgiving
661,happy thanksgiving all xd
662,guys any news
663,weekend long food coma sorry starting to look into configuring the consistency level now have any thoughts on the spring boot auto configuration stuff mentioned
664,planning on taking second pass at it tonight but consistency levels should be configurable now
665,had quick look at your changes it seems that you ve added too much cassandra specific configuration that shouldn be part of cassandrahttpsessionconfiguration namely the configuration of cluster and session both of these should be provided by an application you re using spring session with you can use redishttpsessionconfiguration projects spring session blob master spring session src main java org springframework session data redis config annotation web http redishttpsessionconfiguration java jdbchttpsessionconfiguration projects spring session blob master spring session src main java org springframework session jdbc config annotation web http jdbchttpsessionconfiguration java or any other configuration as guideline to model cassandra support config notice that redis and jdbc configs rely on having redisconnectionfactory or datasource provided to them regarding spring boot question spring session shouldn have dependency on spring boot other than in sample apps as this would put quite constraint on users to put it in other words spring session configuration shouldn care if it used in boot based app or not the integration between the two is on spring boot side
666,went through and updated code per feedback probably need to do some test fixes sample application updates next
667,andrewfitzgerald just submitted third pull request with documentation test code updates session pull is there anything else we re missing to accept merge into master thanks
668,we re currently in the rc phase of the release which means this pr will be considered and more thoroughly reviewed for next releases likely keep an eye on the assigned milestone and the milestones page projects spring session milestones in general as an indication of release plans
669,got it thanks
670,hello everyone just wanted to ping to check if this pr is good for the release thanks for your time
671,at minimum there are some conflicts that need to be updated little short on time at the moment but think just gave you push access to my repo if you want to clean those up
672,yep can give those shot thanks
673,you don have to worry about conflicts ve already taken care of that on my local branch for this pr when started working on it thanks
674,got it many thanks
675,afraid we are removing this from the and have been discussing the supported data stores over the past few weeks and the decision was made to limit the first class supported data stores to redis jdbc and hazelcast from on see for more details and background as part of this existing gemfire and mongo data stores have been removed in the master and will be deprecated in we like to encourage you to make this effort spring session community extension project we promote such extensions in community extensions session docs build snapshot reference html community extensions section of the reference manual so please open issue pr to list your project in there once you set it up thank you for your efforts also thanks to for providing his feedback on this pr
676,ay ay ay alright mean still like the idea of keeping each data store implementation separate as per anyway it looks like milestone is nearing completion so guess we should target that spring session version right would you like me to start spring session cassandra repository and prepare gradle build for pushing out artifacts into jcenter thanks
677,is ingalls milestone release really required here other spring data dependencies are on hopper release train level atm so we should use release
678,you shouldn be using internals from other repository implementations there is pr to extract and generify session index resolving see however for now you should just copy principalnameresolver into your repository
679,cassandraoperations would be more test friendly here
680,imo we should avoid depending on guava
681,same as here projects spring session pull files
682,since this is an integration test you should name it cassandrasessionrepositoryitest to be consistent with other integration tests
683,cool had mental todo of extracting that to common class will just copy paste for now
684,done
685,done
686,done
687,done
688,done
689,performing that check eagerly might help skip conversion serialization
690,docs should mention batches are used for atomicity reasons
691,how about batch loading for multiple uuid
692,you might want to keep contact points configurable and maybe qualify the cluster instance
693,you might want to keep the keyspace name configurable and add qualifier otherwise this session instance might be used by other components spring data zipkin
694,qualifier also for the cassandratemplate
695,lowered to the stable version which also drops the cassandra version from to tests fail on cass but pass on cass locally pretty sure this means the travis tests will be broken until can get embedded cass working
696,good call updated
697,batch is only for insert update delete isn it reference batch html or are you talking about doing select from session where id in
698,updated
699,updated
700,updated
701,how about changing to create keyspace if not exists removes the need to catch alreadyexistsexception in public session session
702,index access is quite low level how about access by column name
703,injecting cqloperations is sufficient for this kind of access future versions of spring data cassandra will break up the inheritance cassandraoperations cqloperations so using cqloperations is the more future proof approach
704,is this result required currently it not assigned
705,
706,this class assumes it the sole source for cassandra infrastructure how about setting consistencylevel on cluster java cluster builder withqueryoptions new queryoptions setconsistencylevel consistencylevel setting consistencylevel on cassandrasessionrepository is good approach as environments using cassandra for other purposes might configure cluster differently
707,imo we should avoid depending on guava
708,same as here projects spring session pull files
709,since this is an integration test you should name it cassandrasessionrepositoryitest to be consistent with other integration tests
710,yes agree with you and have expressed similar concerns see comment projects spring session pull issuecomment thank you for reviewing this pr again
711,updated
712,skipping this per feedback we shouldn be configuring the cluster at all
713,updated
714,removed
715,fixed
716,fixed
717,sounds good guys ll get that stripped out
718,leaving that one for
719,thanks for the pr this is now merged into master
720,please sign the contributor license agreement repositoryid spring projects spring session pullrequestid click here repositoryid spring projects spring session pullrequestid to manually synchronize the status of this pull request see the faq for frequently asked questions
721,thanks for the pr any chance we could get test added
722,done ve updated the pr
723,thanks for the fast turnaround this is now merged into master
724,thanks for the pr this is now merged into master
725,thanks for the pr this is merged into master
726,please sign the contributor license agreement repositoryid spring projects spring session pullrequestid click here repositoryid spring projects spring session pullrequestid to manually synchronize the status of this pull request see the faq for frequently asked questions
727,thank you for signing the contributor license agreement repositoryid spring projects spring session pullrequestid
728,thanks for the pr this is merged into master also added test for your optional review to ensure we don have problems again via abf dbf dbf thanks again
729,please sign the contributor license agreement repositoryid spring projects spring session pullrequestid click here repositoryid spring projects spring session pullrequestid to manually synchronize the status of this pull request see the faq for frequently asked questions
730,thank you for signing the contributor license agreement repositoryid spring projects spring session pullrequestid
731,thanks for the pr can you please add tests spring session web module cannot rely on spring framework any chance you can update the pr to no longer use uricomponents
732,can surely do that as for the module not relying on spring framework can certainly do that my initial reaction that that though is that if the dependency isn allowed shouldn the build fail with compilation error the fact that it didn means that spring framework is on the compile classpath checked before made the change as did not want to introduce dependency that wasn already there if indeed the spring framework shouldn be there then the build itself should be cleaned up as well so that the dependency isn there to begin with
733,think noticed another bug as well in cookiehttpsessionstrategy encodeurl run this test it fails java public void encodeurlwithsamealias string url string format url cookiehttpsessionstrategy default session alias param name assertthat this strategy encodeurl url isequalto url it will give you this output org junit comparisonfailure expected but was will fix this as well in my next pr since some of my other tests will fail until this is fixed
734,thanks for the updates this is merged into master via bff bb fe
735,thanks for the pr this is now merged into master
736,thank you for signing the contributor license agreement repositoryid spring projects spring session pullrequestid
737,ve updated the pr to address the concerns from our previous discussion indexresolver now provides operations to indicate the supported indexes and resolve all indexes it also includes delegate contract for delegates such as principalnameindexresolver findbyindexnamesessionrepository implementations currently do not adopt these changes ll do that part after your review
738,thanks for the update this doesn appear to be what had in mind is there reason we need anything other than java public interface indexresolver map resolveindexes session as outlined in my comments
739,having the possibility to check whether given index name is supported by the resolver vastly simplifies the checks found in findbyindexnamesessionrepository findbyindexnameandindexvalue implementations this can now be handled via single call of indexresolver supportsindex thought you referred to that by introducing this new api we have yet another api that needs to be aware of the index names and be kept in sync delegate spec simplifies the indexresolver implementation with the provided defaultindexresolver imo covers all the use cases and avoids having ugly if then else logic in indexresolver implementations resolving single index is also pretty common case imo there are two examples in redisoperationssessionrepository alone cleanupprincipalindex projects spring session blob master spring session src main java org springframework session data redis redisoperationssessionrepository java redissession constructor projects spring session blob master spring session src main java org springframework session data redis redisoperationssessionrepository java also with this design we could easily support users adding their own indexes with some findbyindexnamesessionrepository implementations they would simply implement delegate contract and register beans which we would then get automatically register with indexresolver
740,thanks for your response having the possibility to check whether given index name is supported by the resolver vastly simplifies the checks found in findbyindexnamesessionrepository findbyindexnameandindexvalue implementations ok see your point sorry for the confusion it might be good to continue doing this sort of optimization was planning on having the implementation just attempt to perform the lookup regardless of if the index was supported if the value wasn indexed it would be null session do you see reason for having both supportedindexes and supportsindex method really like to keep this api as simple as possible think it may be valuable to remove both the supportedindexes and supportsindex methods it seems that we will have all the information we need with single method delegate spec simplifies the indexresolver implementation with the provided defaultindexresolver imo covers all the use cases and avoids having ugly if then else logic in indexresolver implementations resolving single index is also pretty common case imo agreed this is common use case could this be an abstract class rather than an interface also with this design we could easily support users adding their own indexes with some findbyindexnamesessionrepository implementations they would simply implement delegate contract and register beans which we would then get automatically register with indexresolver we can do the same by having them provide multiple findbyindexnamesessionrepository implementations right
741,was planning on having the implementation just attempt to perform the lookup regardless of if the index was supported if the value wasn indexed it would be null session see however was driven by optimization considerations from the start why run the resolver logic if we have enough knowledge to know it won yield any result do you see reason for having both supportedindexes and supportsindex method agree we probably don need both supportsindex is by far more relevant for typical usage of indexresolver really like to keep this api as simple as possible think it may be valuable to remove both the supportedindexes and supportsindex methods it seems that we will have all the information we need with single method could you please clarify this bit more what single method do you refer to if we remove the both support methods or did you mean remove one of the methods rather than remove both could this be an abstract class rather than an interface yes ve also considered such approach we can do the same by having them provide multiple findbyindexnamesessionrepository implementations right right but feel there should be single sessionrepository bean in the app context anything else requires some sort of compromise when it comes to consuming the repository so to sum things up before make an update we trim the indexresolver contract to something like this java public interface indexresolver boolean supportsindex string indexname string resolve session string indexname map resolveall session the delegate spec would be moved to the abstractindexresolver
742,see however was driven by optimization considerations from the start why run the resolver logic if we have enough knowledge to know it won yield any result we don know that we are the only repository writing to the data store there might be something else providing the indexes perhaps background job or another application there is cost to maintaining this additional code with in my opinion little gain in short still think this needs to be removed really think our api should look closer to java public interface indexresolver map resolveindexesfor session then we can provide an abstract class that supports resolving single index for example java public abstract class abstractsingleindexresolver implements indexresolver private final string sessionindexname protected abstractsingleindexresolver string sessionindexname this sessionindexname sessionindexname protected abstract string resolveindexvaluefor session public final map resolveindexesfor session string sessionindexvalue resolveindexvaluefor session return sessionindexvalue null collections emtpymap collections singletonmap sessionindexname sessionindexvalue
743,we don know that we are the only repository writing to the data store there might be something else providing the indexes perhaps background job or another application thanks for the insight all clear now wasn aware that this was an option to consider can update the pr with your suggested api within few days and try to wire it altogether into repository implementations
744,thanks
745,ve updated the pr please verify that the implementation is now ok with you before continue forward
746,sorry for the delay getting back to you yes this is what had in mind thanks again
747,should have been more explicit can merge this once you are able to add testing and documentation thanks again for everything you do for spring session and spring in general
748,thanks for the feedback ll try to get back to this next week and integrate the indexresolver into findbyindexnamesessionrepository implementations as well as write the tests
749,ve updated the pr with tests and refactored findbyindexnamesessionrepository implementations to use the new api ve also left some comments on the code concerning the previously discussed availability of method that resolves single index
750,any feedback on the latest updates since there are two prs with new repository implementations scheduled for as well it might be good idea to get this one in earlier because it will have impact on them
751,rebased the pr against
752,what do we do if it supports multiple indexes
753,perhaps the input should just be the session and the result that has mapping of index name to index value is there any advantage in only supporting single session attribute
754,well this is basically just an abstract base class that simplifies implementing single purpose indexresolver nothing in the indexresolver contract itself prevents the implementations from supporting multiple indexes as demonstrated by compositeindexresolver
755,imo that wouldn be optimal solution since it implies execution of logic for all supported indexes this way you extract only what you need in given situation
756,how would implementations that support multiple indexes gemfire use this api the sessionrepository could keep all the index names that need indexing however that means the sessionrepository and the indexresolver configuration need to be kept in sync which is not ideal
757,each findbyindexnamesessionrepository implementation would internally define its supported indexresolver either using compositeindexresolver or some other way these would then get consumed according to repository needs the same way duplicated principal name resolving logic is consumed now this approach allows having some resolvers that are reused across all repository implementations such as principalnameindexresolver as well as each implementation having its specific resolvers if you would go the input should just be the session and the result that has mapping of index name to index value route then you wouldn be able to reuse this logic
758,either using compositeindexresolver or some other way this requires another api because the current interface must have knowledge of the index name if you would go the input should just be the session and the result that has mapping of index name to index value route then you wouldn be able to reuse this logic why not seems you could do this java public interface indexresolver map resolveindexes session public class principalnameindexresolver implements indexresolver private spelexpressionparser parser new spelexpressionparser private string indexname findbyindexnamesessionrepository principal name index name public string resolveprincipal session session string principalname session getattribute findbyindexnamesessionrepository principal name index name if principalname null return principalname object authentication session getattribute spring security context if authentication null expression expression parser parseexpression authentication name return expression getvalue authentication string class return null public map resolveindexes session string index resolveprincipal session if index null return collections emptymap return collections singletonmap indexname index public class gemfireindexresolver implements indexresolver private principalnameindexresolver principalresolver new principalnameindexresolver public map resolveindexes session map gemfireindexes resolvethem session gemfireindexes putall principalresolver resolveindexes session return gemfireindexes private map resolvethem session todo return null
759,this requires another api because the current interface must have knowledge of the index name yes that by design since originally intended indexresolver implementations to be single purpose each findbyindexnamesessionrepository implementation holds the knowledge of its supported indexes anyway doesn it or did you mean another api as in api targeted at users perhaps findbyindexnamesessionrepository interface itself should communicate the index names it is capable of resolving why not seems you could do this that kind of implementation is exactly what wanted to avoid your gemfireindexresolver will get messy once other indexresolver resolvers get in there too since you re relying on the concrete indexresolver implementation regarding your proposed indexresolver api and gemfire implementation consider things from perspective of current usage of principalnameresolver and equivalent logic you really like to run the resolving for all the indexes and then extract the single value you re interested in instead of current principalnameresolver resolveprincipal
760,each findbyindexnamesessionrepository implementation holds the knowledge of its supported indexes anyway doesn it it does introducing this new api we have yet another api that needs to be aware of the index names and be kept in sync the proposed change allows all the index logic to be moved into the new resolver api your gemfireindexresolver will get messy once other indexresolver resolvers get in there too since you re relying on the concrete indexresolver implementation how would this be cleaner with the original design either way you would need to have that specific functionality you really like to run the resolving for all the indexes and then extract the single value you re interested in instead of current when are we interested in only single index
761,ve updated the pr with changes to findbyindexnamesessionrepository implementations to better demonstrate the intended usage of indexresolver when are we interested in only single index well at any given time you re attempting to resolve an index you re interested in single value right unless missing something obvious
762,most the time want to write all the index that have changed to the data store this could easily be done with the suggested changes if looking up an index then the user provides the index name and the index value so do not need to resolve anything
763,but this is dependent on the technology used to implement the repository isn it for example consider the principalnameextractor projects spring session pull files diff fafd cf ea from it basically wrapper around an indexresolver ok it certainly makes sense to provide api to communicate all the supported indexes what are you thoughts on making it part of findbyindexnamesessionrepository
764,it basically wrapper around an indexresolver right but the logic to resolve the index would be able to be reused this is the goal if we need adapters to translate the results of the indexresolver into implementation specific code this is much easier than rewriting the code for resolving the indexes what are you thoughts on making it part of findbyindexnamesessionrepository this interface is already ga so we cannot add new method on it don think this is the right place for it user do not care what the indexes are it is the internal implementation that cares about the indexes so the findbyindexnamesessionrepository implementation would have an indexresolver injected into it
765,this would benefit from indexresolver having method to resolve single index however the gemfire repository implementation is the one least familiar with so this altogether could perhaps be refactored in more optimal way
766,this would benefit from indexresolver having method to resolve single index
767,this would benefit from indexresolver having method to resolve single index
768,this would benefit from indexresolver having method to resolve single index atm using singleindexresolver directly here which had to change bit make singleindexresolver resolveindexvaluefor public instead of protected as originally outlined valueextractor are instantiated by hazelcast so perhaps the best would be to have hazelcast specific indexresolver implementation
769,thank you for signing the contributor license agreement repositoryid spring projects spring session pullrequestid
770,thanks for the pr this is now merged into master
771,please sign the contributor license agreement repositoryid spring projects spring session pullrequestid
772,preferably you use webjars for client side web libs see and for some examples
773,thank you for signing the contributor license agreement repositoryid spring projects spring session pullrequestid
774,and spring boot webjars support added to the httpsession gemfire boot sample as requested let me know if you have any other feedback if not or you can merge this if approved thanks
775,thanks for the pr this is merged into master with little polish via cb bc
776,thank you for signing the contributor license agreement repositoryid spring projects spring session pullrequestid
777,thanks for the pr it appears the build is failing any chance you could take look
778,hey yes it failing as didn finish the configuration part that sets up the principal name extracting just opened the pr to get your initial thoughts before finishing the config part and other remaining action points
779,thanks for the fast response should have been more diligent about reading the message is it possible to only write the session attributes that have changed vs saving the entire map every time this has turned out to be pretty important approach to reduce the possibility of race conditions
780,ve updated the pr the configuration part is done and the build now passes ve also added javadoc on new classes other todos from the original comments are still pending but hopefully ll get to finish those by the end of this week regarding saving the session only when changes are detected the new hazelcastsessionrepository uses plain mapsession so ll just make use of the changes done there in additionally ve been in contact with over the past few weeks and he started to do some work on which is somewhat related to this
781,these are great changes don know if it is possible but like to see an option similar to redis and jdbc repositories which only writes the session attribute that changed for example if invoke session setattribute foo bar repo save session session setattribute new test repo save session the second save should not need to write the session attribute foo this helps reduce the likely hood of race condition at minimum it would be good to try to ensure if the last update time is changed that only that needs to be written vs the entire session this might not be possible with hazelcast but like to make sure we investigate this possibility
782,thanks for the feedback this might not be possible with hazelcast but like to make sure we investigate this possibility afraid it not but ll look into it over the next few days
783,ve updated pr with tests and have polished the general implementation bit regarding the individual attribute writes both and don see how we could achieve that without dropping the traditional single map semantics on session persistence and employing more complicated implementation that would dissect session persistence into multiple map
784,do we really want to drop support for hazelcast in client mode this was raised as an issue back when the original implementation was added so could be viewed as regression
785,the client mode support is not dropped with this change assume my original comment confused you sorry for that it was problem in the initial implementation that has been taken care of since in the subsequent updates of this pr ll update to original comment to address this also you can see that the integration tests for client mode are passing now
786,ok thanks fwiw agree that individual attribute writes would be difficult with hazelcast wouldn like to see multiple maps introduced
787,ve updated the pr with documentation and samples changes
788,is it safe to assume this will make the ve completed all the initially planned todos regarding other changes once this hits the master will follow up with pr of his own to address the there will also be some changes depending on the outcome of
789,ve updated the pr with some final polish namely to use the current hazelcast release and to apply the changes equivalent to
790,left few comments on javadocs the actual code looks good to me great work
791,thanks for the review ve addressed most of you comments with the latest pr update
792,thanks for the pr this was merged via efb dcd ebe dd fd
793,listen listens
794,translate translates
795,this is the publisher for all of the session events but the javadoc here only mentions the sessiondestroyedevent which think might be little confusing for users
796,nit pick newly created seems to be adding emphasis but not sure why any session that has been inactive for the set amount of time will be invalidated right
797,this description is actually taken from the redisoperationssessionrepository imo such wording is used to make emphasis that defaultmaxinactiveinterval is used during creation of events in sessionrepository createsession
798,to me that sounds like leaking implementation details that are not what would expect person using this method to need to know about or care about
799,thanks for the pr this is merged into master
800,thanks for the pr going to reject this for the reasons provided in the response to the github issue see projects spring session issues issuecomment
801,thanks for the pr you are machine gave some feedback in the code
802,hi will we have an option to choose between saving immediately upon change and saving once per request thanks
803,thanks for the question this pr is not about writing immediately vs writing in batch instead this is about ensuring that if nothing on the session has been set then it will not be saved again we should probably provide flag to ensure that the default behavior is preserved this is necessary for someone who might make changes like this java session session user user session getattribute user user setfirstname new currently this change will be visible however with the changes setattribute will not have been invoked and thus the change will not persist for this reason we should probably add flag named something like persistonsessionchange which defaults to false
804,thank you for signing the contributor license agreement repositoryid spring projects spring session pullrequestid
805,don think we need isnew when the mapsession is new the id has changed
806,can we change this to method to markunchanged
807,think we should change this to package scope
808,we should also change this to package scope
809,wonder if we should mark this as changed if this sessionattrs remove attributename returns null
810,maybe we should use mapsession in the generic type to avoid downcasts like in other repositories is this breaking change
811,think you are right while this would be breaking change it is quite minor and can be acceptable for minor release most users leveraging it will likely be using sessionrepository extends expiringsession can you update this to use mapsession generic type
812,sure wil
813,find this javadoc misleading in my mind this flag is not about when session will be saved after changes or immediately it about avoiding save when changes are not detected but we must state that changes might not be detected as pointed out also we should state that flag can help to reduce the possibility of race conditions
814,thanks for the pr have commented on the code cc please take look at this
815,thanks for the pr but we re closing this due to mongo support being deprecated in and removed in see for more background
816,the new repo is at projects spring session data mongodb
817,don think we need isnew because when it is new the id has changed
818,make this package scope
819,rename to markunchanged
820,thanks for the pr this is merged into master
821,thanks for the pr this is now merged into master
822,thanks merged
823,thanks for the pr this is now merged into master
824,thanks for the pr this is now merged into master
825,thanks for the pr this is now merged via bc cafdc
826,this is step in the right direction however it isn quite what had in mind the problem is that cookie with the same name can be presented multiple times in the request this happens if the cookie is associated to different paths or different domains updated the original issue to better illustrate the problem
827,thanks for the details will take look and see if can update the pr
828,thanks for the pr this is now merged into master
829,given you provided some good feedback on thought you might to review this
830,lgtm
831,thanks for the pr this is now merged into master
832,pr updated with javadoc documentation changes
833,this is awesome do you hit any performance penalty
834,thanks for the reminder did some benchmarks the test uses threads to create sessions then updates them using different scenarios reloads them from database and finally deletes them sessions are created with randomly generated string attributes one static string attribute and securitycontext attribute ran that on postgresql here are the results current master created sessions in millis updated add new attribute sessions in millis updated modify existing attribute sessions in millis updated modify last accessed time sessions in millis updated modify security context sessions in millis loaded sessions in millis deleted sessions in millis this pr created sessions in millis updated add new attribute sessions in millis updated modify existing attribute sessions in millis updated modify last accessed time sessions in millis updated modify security context sessions in millis loaded sessions in millis deleted sessions in millis
835,decide whether to provide an option on persistence mode single blob vs individual attributes there might be one another choice for this individual attributes are required in scenarios where they have to be updated outside from the application such as cron jobs in these cases actually we are just interested in some attributes not all of them simple session attributes which are updated only by user are not necessary to be stored in individual attributes table do not know what can we do for this but just wanted to share this as well thank you so much for everything
836,thanks for the feedback interesting approach on attributes persistence it seems optimal from the perspective of number of blobs involved but see two downsides it makes the configuration more complex and it seems to require some extra logic in session handling the more look at this the more it seems to me that individual attributes is the way to go the only downside is the performance on initial save but ve been able to optimize that bit by using jdbctemplate batchupdate
837,thanks for the updated pr have been swamped with other things and haven had chance to look at this in any detail will review first thing monday morning
838,thanks for the pr this is merged via bd da ad ddb
839,thanks for the pr this is merged into master
840,thanks for feedback have updated the pr
841,lgtm
842,fixed
843,thanks for the pr this is merged via edbf bf fedffa ec fe
844,this shouldn be an integration test
845,should have an that closes the context
846,thanks for the pr unfortuantely the changes do not work for the non boot applications for example the spring security sample session blob gh samples security build gradle returns for the webjars url
847,hmm interesting ve ran all the examples well except gemfire based ones before submitting the pr will look into it possibly something got cached on my side
848,thanks for the response note this is lower priority than since this is just samples can merge this even in patch release
849,ve updated the pr issue was that the links to static resources were not aware of the context path this is now fixed and tested
850,is there anything more you need me to do on this considering the pr is still labeled as waiting for feedback
851,thanks for the nudge it was me dropping the ball on removing the label have updated the ticket but still need to take look at it
852,thanks for the pr merged via ab
853,note created so that the samples are further improved to use webjars locator
854,this does not address the since you ve only added the setter for tablename also the test you added doesn actually test anything relevant here you re just using tablename setter directly on jdbcoperationssessionrepository instead of the one you added in jdbchttpsessionconfiguration
855,good way to test this would be to reuse what ve done in spring boot extending the regular configuration boot commit de eec eebab edada diff dr
856,noticed that when was looking for mongo implementation thanks for the hint will polish this pr
857,it also missing setmaxinactiveintervalinseconds
858,looks good now thanks for updating the pr
859,thanks to you for the feedback
860,thanks for the pr this is now merged into master
861,uh shouldn you just be using settablename
862,my mistake now it is fixed thanks
863,why random method simply overriding the default constructor and using the desired setter inside it is much cleaner and more understandable also separate config for each test are preferred
864,guess it taken from what ve done in spring boot agree an method with no parameter is not really good idea
865,for some reason the sessionrepositoryfiltertests failed org springframework session web http sessionrepositoryfiltertests dofilterlastaccessedtime failed org junit comparisonfailure at sessionrepositoryfiltertests java all tests passed when ran gradlew clean build install locally have not gone to file home travis build spring projects spring session spring session build spring test results index html to investigate the failure is this located on static spring io
866,thanks for the pr this is now merged into master in regards to the build failure it appears to be working for me perhaps it has since been fixed if you continue to have problems please let me know
867,this is very useful addition however imo it should be targeted at spring boot since first class spring session integration already exists there wdyt
868,do think it may be better fit for spring boot as this is where most actuator endpoints live
869,also don think it wise idea to have dependency on boot other than in sample apps that is since boot pom actually provides the dependency management for session that would effectively create circular dependency between the projects
870,
871,thanks guys for the feedback will move my changes to spring boot project hope to see all new improvements there soon
872,close in favor of projects spring boot pull
873,why not use here and make sensible and path configurable
874,have added some changes in my own branch session tree gh in order to expose setter methods for timeoutinseconds and principalsessionsenabled keeping by commit
875,and have been discussing the supported data stores over the past few weeks and the decision was made to limit the first class supported data stores to redis jdbc and hazelcast from on see for more details and background as part of this existing gemfire and mongo data stores have been removed in the master and will be deprecated in we like to encourage you to make this effort spring session community extension project we promote such extensions in community extensions session docs build snapshot reference html community extensions section of the reference manual so please open issue pr to list your project in there once you set it up thank you for your efforts
876,add setter methods for timeoutinseconds and principalsessionsenabled
877,what is the purpose of having setters in class
878,expose attributes to make them configurable take look for jdbc and mongo
879,this could be probably upgraded to if spring session is currently using spring data hopper
880,is there real rationale for these version bumps this one and above
881,this can have side effects if other data is colocated with the session data in couchbase which happens lot know this is for integration test but still maybe the delete query can have restricting where clause
882,maybe this part could recognize more types as natively storable couchbase sdk can store string boolean integer long double and its own json value types jsonobject and jsonarray
883,since this is not in the couchbase package probably needs to be double checked by
884,thanks for the pr this is now merged into master
885,thanks for the pr this is now merged into master
886,thanks for the pr wondering if we would be able to support the concept of marking the session as expired by setting session attribute rather than deleting the session then when spring session obtains the sessioninformation it would read this attribute to determine if the session is expired honestly do like the fact that the current implementation deletes the session but this might be nice feature for users who need the ability to display more useful error message thoughts
887,note assigning this to because we plan to go ga with spring session next and we need have at least one rc of new feature before going ga
888,custom session attribute to support spring security expiration makes lot of sense ll update the implementation and docs to ensure that this in place this will also cause the filtering on expired session to actually do something useful since it won conflate spring security notion of an expired session with that of spring session they re different things could also support repositories that return plain sessions rather than expiringsessions this way the sessionregistry already gets callback to update the last accessed timestamp of session so for plain sessions that don provide this information themselves like expiringsessions do we could store the info in another custom session attribute the code could determine and cache whether plain or expiring sessions are being returned by the repository so the additional overhead of updating the session with last accessed attribute would only be incurred for plain sessions do you think that this is worth the trouble or will all relevant implementations implement expiringsession anyway in your opinion
889,thanks for the feedback think all relevant implementations will implement expiringsession honestly the split between the two apis was probably mistake however something that cannot really be changed now
890,ok ve pushed an updated implementation that tracks expiry in the spring security sense through custom session attribute when spring security concurrentsessionfilter finds an expired sessioninformation it will call all registered logouthandler beans which typically would lead to the session being deleted even if this wouldn happen then the session will simply expire in the spring session sense eventually
891,have an idea of the release date of have to develop this feature but if it is supported out of the box in the next release prefer to wait thanks
892,note that you can take the code from this pull request and use it as is with the current version of spring session that should provide you with smooth upgrade path if the request is indeed merged for
893,unfortunately we don have an eta on at this time as suggests you should be able to take the code from this pr as is and then remove it when comes around
894,thanks for the pr this is now merged into master
895,using infinispan for cache in cluster which provides map based cache implementation need to use springsessionbackedsessionregistry with mapsessionrepository but mapsessionrepository doesn implement findbyindexnamesessionrepository how can achieve this
896,it wouldn be hard to add support for the findbyindexnamesessionrepository to the mapsessionrepository naive implementation could simply loop through the stored expiringsession and find the ones with the given principal name more optimized impl could simply have map from principal names to collection of corresponding sessions to make lookups efficient not sure what would be best for infinispan since not familiar with that
897,noticed one show stopper that need to fix then will reopen pull request
898,thanks this is now merged into master
899,global namespace does not fit in with spring session closing in favor of
900,can we just use services as shown ci com user database setup couchdb
901,can you demonstrate with maven like the other examples
902,is there reason for having global namespace in general not sure like the additional complexity of this not to mention none of the other implementations support this
903,we use commons logging like spring framework
904,don think this should be needed think this is probably due to the global support which think we should remove if we do add global session support we would move it to different pr
905,this package should not depend on servlet dependencies
906,don think we should have couchbase specific api here we could use something like spring converter apis to convert the values
907,these changes should be in distinct pr
908,these changes should be in its own pr
909,is there reason we need distinct couchbasedao perhaps this would be better in the couchbasesessionrepository
910,sure thought that if the whole project is build on gradle will stick to one build technology
911,no those two are different databases vs couchdb
912,generally this is for microservices architecture systems there couple of reasons decided to go with namespace session data in large distributed system aspecially in microservices architecture can be pretty big having app and global namespaces reduces the amount of data to read every httpsession getsession invocation you can gain significant performance boost using session namespaces there is almost none additional complexity for developer if you don want to use them you can set the same namespace in all your apps in the system or use only global namespace maybe by default namespaces support could be turned off with namespaces multiple different microservices in the system can set or get session attribute of the same name without conflicting each other
913,ok ll change that
914,yes this is because of namespaces support
915,sure good idea
916,this is because delegatingsessionstrategy depends on servlet api
917,not quite sure it good idea from the ddd side the couchbasesessionrepository playes domian repository role for session entity and the couchbasedao is just data access object that communicates directly with couchbase server beside that joining those two guys will create quite big hard to read class in my opinion
918,right but you will notice that none of the other repository implementations have web dependencies in them doing this will cause package tangles erosion and package tangles really think we need to consider global namespace as its own thing as pr to add new repository should not contain web dependencies nor should it change anything out of its package structure
919,thanks think eventually we should do gradle too but most people that know gradle syntax know maven however people that know maven don know gradle
920,thanks for pointing that out did not read carefully
921,if we are going to consider global namespace it will need to be distinct ticket and pr we don want to change too much in one ticket commit as this makes troubleshooting difficult
922,ok understand can create such ticket and pr one important question here should the pr consider namespaces support only for data couchbase or maybe the changes should be global and made in the core spring session api expiringsession findbyindexnamesessionrepository etc or maybe it should be brand new session repository
923,thanks lets first create ticket and discuss if this is something we want to add to spring session it is quite likely useful feature but not entirely convinced spring session is the right place for it
924,thanks for the pr think prefer to allow the user to create the transactional boundary by exposing bean of particular name this aligns with spring session other points of customization for example this is how we users can provide custom serializers additionally using bean provides more flexibility for the user than the boolean flag on the annotation which can only be on or off what are your thoughts
925,see your point here you prefer to take less opinionated route on how to approach the transaction management within the jdbcoperationssessionrepository and instead of focusing on providing concrete solutions for detected problems with transactions we equip the users with flexiblity by setting their own transactionoperations implementation so they can come up with their own prefered solution guess this makes sense and it actually makes the job quite easier for us in terms of implementation as well as testing documentation should provide some concrete examples for this approach do you prefer to keep offer this only for write operations or read ones as well
926,thanks for the fast reply say we should do transactions or reads also
927,ve updated the pr please share your thoughts documentation is still pending
928,would still prefer using requires new propagation behaviour as sane default because would personally expect this to just work without extra configuration my previous suggestion was to avoid introducing unnecessary configuration for the time being but the behaviour on rollback is not quite the same with session persist after succesful commit
929,fwiw agree with you on requires new being the sane default however has so far insisted on opt in approach for transactional behavior with argument that transactions as an expensive operation might not be needed wanted by all users
930,thanks for your feedback ve been doing some more thinking about this and think you two have convinced me that my approach was not ideal we should work out of the box so think you two are right that we should create the transactions by default what more is we can always make it optional later on and still remain passive if we start without requiring it and it causes problems we are stuck with this default to remain passive sorry on flip flopping on this but hopefully getting to the right answer is some consultation do you mind updating the pr to take these changes into account
931,sorry on flip flopping on this but hopefully getting to the right answer is some consultation always in favor of thinking things through bit more even at the expense of delaying things so on that from my side no problems on updating the pr ll take care of that soon now that we ve decided what the default behavior is the question is what means do we provide for changing the defaults what more is we can always make it optional later on and still remain passive if we start without requiring it and it causes problems we are stuck with this default to remain passive if reading this correctly you wouldn provide an option for users to disable transactions right now but rather at some later stage if there need for this
932,so on that from my side glad to hear that no problems on updating the pr ll take care of that soon awesome thanks if reading this correctly you wouldn provide an option for users to disable transactions right now but rather at some later stage if there need for this correct
933,ve updated the pr
934,thanks for the pr this is now merged into master
935,thanks again for the pr this is now merged into master you are really rocking the prs lately keep them coming
936,rocket
937,thanks
938,thanks for the pr this is now merged into master
939,thanks for the pr you are really rocking spring session as of late provided few comments inline
940,thank you
941,ve updated the pr
942,ve updated the pr again this time to replace bootstrap css files with webjars
943,nice work thanks for the pr this is now merged into master
944,is this necessary with newer versions of boot thought this was automatically setup to console via consoleautoconfiguration
945,can we add no format tags around these methods so they are formatted correctly
946,you re absolutely correct to make my oversight more comical ve just used boot console auto configuration in one of my projects few days ago
947,on sidenote websocket sample could also be changed to use auto configuration for console
948,happens to me sometimes too it just shows you are long time boot user
949,yes we can ve copied the class from the original boot sample together with formatting and added what needed for this sample
950,on sidenote websocket sample could also be changed to use auto configuration for console good point created
951,moonlight thanks for the pr this build is failing due to check style errors also curious if you can answer projects spring session issues issuecomment
952,yep answered question
953,moonlight thanks
954,thanks for catching this this is now merged into master
955,thanks for the pr had one question inline
956,ve updated the pr
957,thanks for the pr this is now merged into master
958,is there reason that we cannot just set and get the lastaccessedtime on the delegate
959,ahh yes we can ll change the rowmapper to update the deserialized delegate with lastaccessedtime from column it will also minimize the impact in other places
960,thanks
961,thanks for the pr moonlight this is now merged into master via bd cec
962,thanks for submitting this ll wait for the second half before merging reviewing in detail one thing we will want to ensure we have is some tests to ensure this is working
963,no problem took first stab at the docs too could use second set of eyes on that as well
964,tests adapted from the spring boot example can be run by gradlew integrationtest
965,thanks for the updates some feedback we should add this project to settings gradle include samples grails the build is not currently passing get the following error integrationtest sample homespec anonymous page not redirected to login failed java lang illegalstateexception caused by org springframework boot context embedded embeddedservletcontainerexception caused by java lang illegalstateexception perhaps we can change test index to be the index at the context root so users don have an additional step
966,the tests are passing just didn have random port assigned the boot gradle example didnt work in grails but found one that does the root is not protected then test is protected resource in the tests think it valuable to leave both tests in anon ok and anon redirect pushed up the changes let me know
967,thanks for the pr this is now merged into master have applied bit of polish via ef ba fadd
968,thanks for the pr this is now merged into master
969,thanks for the pr this is now merged into master
970,closing re opening to force new ci build failure seems unrelated to these changes the build passes for me locally
971,thanks for the pr wonder if we want to enable this for the sample applications too what are your thoughts
972,ve considered using this in sample app too but eventually decided to limit use to integration tests my reasoning was the following flapdoodle on its website oss github io de flapdoodle embed mongo clearly states the project is aimed at running mongo in tests so we should follow this imo sample apps should provide realistic use case of how to use the framework sample apps include instructions on how to browse the session data using clients for underlying technology used to persist sessions meaning you need mongo client at least anyway to fully benefit from sample app and don know how mongo client would work with an embedded flapdoodle instance this is in contrast to jdbc samples for example which use database since is full blown rdbms which also offers easily embeddable web client
973,thank you for your feedback somewhat see your point about the samples needing to provide realistic experience for users however we do not want any extra noise for setting up samples fladoodle should certainly not be used in production but think it is ideal for helping users run sample application we are testing the sample with fladoodle so that is how users should experience it since we know that is what works finally fladoodle is just downloading the executable and forking process that starts up full fledged mongo instance this means that this does not differ much from using an embedded relational database
974,if we go with flapdoodle to back the sample app what happens with the part of the guide that describes usage of mongo client to query and alter data how does it work section
975,you can still connect to mongo when using fladoodle using any mongo client
976,yes aware of that but if you have mongo client it highly likely you also have mongo server installed as well that was one of my arguments for not moving sample app to flapdoodle but ok if that your preference ll move the sample app to flapdoodle there one more thing that crossed my mind today and ve completely neglected it during initial implementation embedded flapdoodle instance needs to use random port to avoid any potential conflicts that means in sample app scenario we also need to communicate this port to the user is logging the port on startup good enough for this
977,thanks for the response but if you have mongo client it highly likely you also have mongo server installed as well that was one of my arguments for not moving sample app to flapdoodle that is fair however think there are many people that will not care about performing the steps with the client they just want to get it running we should have disclaimer that you must have client installed within the guide that means in sample app scenario we also need to communicate this port to the user is logging the port on startup good enough for this this is an option alternatively and probably preferably we could default the port to using the standard port and ensure our test configuration overrides this to random port
978,we should have disclaimer that you must have client installed within the guide ok alternatively and probably preferably we could default the port to using the standard port and ensure our test configuration overrides this to random port even though this means sample app fails to start for users that run mongo instance locally this is somewhat in contradiction to we do not want any extra noise for setting up samples argument
979,even though this means sample app fails to start for users that run mongo instance locally this is somewhat in contradiction to we do not want any extra noise for setting up samples argument that is good point let stick with logging perhaps it could even log if you have the mongo client installed this is the command to connect
980,yes that should be doable ll look into it and update the pr accordingly soon
981,ve updated the pr please review the changes still need to update the guide ll take care of this when we finalize the implementation
982,thanks for the fast turnaround overall looks good had one comment inline when you update the documentation make sure that the guide either does not show the flapdoodle config or it describes that this is just necessary to start mongo and not going to happen in real world example
983,when you update the documentation make sure that the guide either does not show the flapdoodle config or it describes that this is just necessary to start mongo and not going to happen in real world example yes of course mongo related config in sample app is in separate class the original class that contains asciidoc tags was left untouched
984,it completely slipped my mind that we could use spring boot auto configuration for an embedded mongodb instance ll change this in next update
985,ve updated the pr with the documentation guide also tried the boot embedded mongodb auto configuration support however ve run into spring projects spring boot not to confuse the users with this exception even though its harmless as it occurs on shutdown ve decided to stick with manual config until this gets fixed in boot your thoughts update somehow managed to miss the fact that this exception on shutdown also happens when we use manual conf so ll update this to auto configuration anyway also it appears that nothing within boot itself would be able to fix this behavior
986,thanks for digging into this so deep and for the quality pr this is now merged into master
987,just curious why was necessary
988,good thing you pointed this out can be removed now ve had issues similar to ones described in with my initial implementation since had static port config for embedded mongodb instance moving to randomly assigned port fixed this
989,thanks for the pr unfortuantely this causes the following error when importing into eclipse description resource path location type unbound classpath container jre system library javase in project spring session data redis spring session data redis build path build path problem haven had time to investigate it yet perhaps that is something you can resolve
990,this seems to be coming from gradle eclipse integration for all spring session eclipse projects settings has org eclipse jdt core prefs generated with following org eclipse jdt core compiler source have to investigate more on the exact code in gradle causing this we can keep this pr on hold for now
991,closing this request for now will re submit if find solution to eclipse integration
992,nice have not had chance to dig into this too much yet but wonder how much of the default auto configure this negates projects spring boot blob df ce dfa spring boot autoconfigure src main java org springframework boot autoconfigure jackson jacksonautoconfiguration java wonder if it could be packaged up to auto configures after the default configuration and enhance it if conditional property is set or some such thing am sure it was probably not your intention to worry about this for sample but am thinking about making it reusable as well thanks
993,hmm nvm see there is no on your objectmapper and its probably better to use separate one anyway considering the need for default typing etc will have to try it out someone on my team just asked me for this so maybe it will save me some time thanks
994,wow this is awesome need to spend little more time reviewing this on monday thank you for submitting this we may want to get some of the jackson support moved to spring security as this would be beneficial in many other contexts ll review on monday and we can go from there thanks for this
995,ps if contributing the jackson support is something that interests you please comment on projects spring security issues if we can get some tests added for the support that will be good start getting this into spring security proper thanks again
996,this sample doesn use jackson default auto configure haven focused on jacksonautoconfiguration to configure objectmapper think we can use jackson objectmapperbuilder to build objectmapper and register all the mix ins by doing this we can take advantage of default auto configure
997,sounds good to me ll comment on that just wanted to confirm about test cases you want tests for mix in classes right
998,thanks for the fast reply yes would like to ensure we have some tests for the mix in classes at that point we can add the mixins to spring security
999,also in terms of jacksonautoconfiguration this is something we can do later if we have the support there at least it can be done even if it is little more work we will be releasing spring security rc on wednesday so it would be ideal for us to get it in before that however that is probably not realistic so we may need to wait until another release
1000,ve added tests for mix in classes
1001,objectmapper configuration changed now all mixins will be used from pull request projects spring security pull mixin classes in this code sample will be removed once pull request projects spring security pull is merged into spring security
1002,thanks for the pr this was merged via ac dc ac also applied bit of polish for your review ea eac fe cf went ahead with the release so that we could stay on schedule if you have feedback for changes we can include that in the next release
1003,thanks for the pr this is merged via ea also added some polish cbde afaaa de cee fe for your review
1004,thanks for the pr this is now merged into master
1005,thanks for the pr this is now merged into master
1006,thanks for the pr this is fixed via bdcbc efbe applied little polish to fix the checkstyle in ff ae fe cac eb
1007,thanks for the pr this is now merged in via ced faf applied some fixes polish in bbbdf baa
1008,thanks for testing the jdbc repository and pointing this out not sure how managed to disregard the inactivity interval during initial implementation
1009,thanks for the pr this is now merged into master ps like to recognize contributors for their work do you prefer link to your github profile twitter linked in etc
1010,thanks for reviewing this
1011,happy to help its good to see an official jdbc implementation finally we were using our own implementation until noticed this you can link to my github profile if you want to credit me although this is the tiniest of bugfixes
1012,every fix is important thanks again take it the provided approach is going to work for you then
1013,yep its perfect thanks the only problem have unrelated to this is that the session filter creates session after each request and can see how to disable this for certain urls we have monitoring tools that poll status page every seconds and at session per hit this adds up to lot of database rows if the session timeout is minutes but that separate issue obviously
1014,thanks for the response with code you can enable debugging for org springframework session and it will provide stacktrace as to you where session is created it is likely something in your code that creates the session jsp
1015,this might be of interest to you need to take look and figure out how to polish this up soon projects spring session pull
1016,ve updated the pr documentation now references the actual schema scripts to provide examples
1017,looking at seems you merged this commit however the pr itself is still open any reason not to close it
1018,thanks for pointing this out closing
1019,it would probably be good to use an include pointing to the actual classpath resource files we use
1020,thanks for the pr this is now merged into master
1021,awesome
1022,thanks for the pr this is now merged into master also resolved which will automatically setup the proper eclipse settings for code format save actions checkstyle setup etc
1023,thanks for the pr few things looks like there is duplicate submission this makes lot of changes without explanations as to why they need changed can you elaborate on why the changes are necessary we can then determine which changes should be merged and break the issues up into distinct issues and commits
1024,hi this pull request is about master branch the submission today if the developer need to customize sessionrepositoryfilter or redisoperationssessionrepository it impossible the developer need to rewrite all code of this classes in my case have sessions main session security etc app session my application can have many apps
1025,first should be closed as duplicate don think understood your response second need more details on what you are trying to solve
1026,now understand that is against close that pr since we are only accepting bug fixes for
1027,ve application named ceap that user can create many sub application named customapp every customapp have different classes and one classloader need to have different session per customapp ceap session principal basic information customapp session one session per customapp different redisnamespace different redisserializer other classloader this session only have objects of customapp the configuration file of customapp set different namespace and use the custom sessionrepository and sessionrepositoryfilter java public class customrootsessionconfiguration extends redishttpsessionconfiguration other methods name customrootredismessagelistenercontainer public redismessagelistenercontainer redismessagelistenercontainer redisconnectionfactory connectionfactory customrootsessionrepository redisoperationssessionrepository messagelistener return super redismessagelistenercontainer connectionfactory messagelistener name customrootsessionrepository public redisoperationssessionrepository sessionrepository sessionredistemplate redisoperations sessionredistemplate applicationeventpublisher applicationeventpublisher setredisnamespace customroot customredisoperationssessionrepository sessionrepository new customredisoperationssessionrepository sessionredistemplate sessionrepository setapplicationeventpublisher applicationeventpublisher sessionrepository setdefaultmaxinactiveinterval maxinactiveintervalinseconds if defaultredisserializer null sessionrepository setdefaultserializer defaultredisserializer string redisnamespace getredisnamespace if stringutils hastext redisnamespace sessionrepository setrediskeynamespace redisnamespace sessionrepository setredisflushmode redisflushmode return sessionrepository name customrootspringsessionrepositoryfilter public sessionrepositoryfilter extends expiringsession springsessionrepositoryfilter customrootsessionrepository sessionrepository sessionrepository sessionrepositoryfilter sessionrepositoryfilter new customrootsessionrepositoryfilter sessionrepository sessionrepositoryfilter setservletcontext servletcontext sessionrepositoryfilter sethttpsessionstrategy httpsessionstrategy return sessionrepositoryfilter java public class customrootsessionrepositoryfilter extends sessionrepositoryfilter constructors public customrootsessionrepositoryfilter sessionrepository sessionrepository super sessionrepository other methods protected void dofilterinternal httpservletrequest request httpservletresponse response filterchain filterchain throws servletexception ioexception string customrootname customrootutils getcustomrootname request getrequesturi if stringutils isempty customrootname filterchain dofilter request response return super dofilterinternal request response filterchain protected sessionrepositoryrequestwrapper wraprequest httpservletrequest request httpservletresponse response sessionrepositoryrequestwrapper sessionrepositoryrequestwrapper new sessionrepositoryrequestwrapper request response servletcontext sessionrepository httpsessionstrategy sessionrepositoryrequestwrapper setsessionattribute customsessionrepositoryrequestwrapper sessionrepositoryrequestwrapper getsession return sessionrepositoryrequestwrapper created sessionattribute field to change the name of session objects attribute because the class sessionrepositoryrequestwrapper save cache on request setattribute to don get objects of ceap session java sessionrepositoryrequestwrapper setsessionattribute customsessionrepositoryrequestwrapper this filter run before the custom app run java public class customredisoperationssessionrepository extends redisoperationssessionrepository constructors public customredisoperationssessionrepository redisconnectionfactory redisconnectionfactory super redisconnectionfactory public customredisoperationssessionrepository redisoperations sessionredisoperations super sessionredisoperations interface methods interface sessionrepository public redissession getsession string id redissession redissession super getsession id if redissession null redissession new redissession new mapsession id return redissession override method getsession to get the customapp session if the session is null created new redissession empty with the same sessionid if don override this method the code will be create new session with different sessionid and changed the cookie
1028,my commit only open possibility to extended redis repository override methods and can change the wrap request or response with other classes without rewrite many many code thanks
1029,thanks for the response from what understand you can do this without any changes to spring session you can create new instance of sessionrepositoryfilter for each customapp the customapp sessionrepositoryfilter will only intercept requests for the specific customapp by either changing the servlet mappings or using something like spring security delegatingfilterproxy my concern about the proposed changes is that this appears to be bit of an edge case while understand why you need these changes don want to make the code more complicated for the case as outlined above think you can fairly easily achieve this without changes for these reasons closing this as won fix if you have additional questions on getting this working please don hesitate to reach out on stackoverflow preferred or github issues ps if you don get response on stackoverflow you should within day or so feel free to ping us via github issues
1030,hi do this have filters ceap sessionrepositoryfilter customapp customsessionrepositoryfilter but when the second filter run the filter get the session of ceap because we have today this code below on sessionrepositoryfilter java class sessionrepositoryrequestwrapper java public httpsessionwrapper getsession boolean create httpsessionwrapper currentsession getcurrentsession if currentsession null return currentsession the method getcurrentsession it cache that put the session on request java private void setcurrentsession httpsessionwrapper currentsession if currentsession null removeattribute current session attr else setattribute current session attr currentsession to change the current session attr created field named sessionattribute to have on the request more than one session on cache sessionrepositoryrequestwrapper setsessionattribute customsessionrepositoryrequestwrapper
1031,you should only invoke sessionrepositoryfilter on requests that are not customsessionrepositoryfilter
1032,now understand this is on the branch we are only accepting patches on so am going to close this
1033,thanks for the pr this is merged into master via af
1034,thanks for the pr this is merged in via af
1035,thanks for the pr this is now merged into master
1036,thanks for the pr not sure we want to modify the samples to use gemfire we can always add more samples but we do not want to change the existing samples
1037,you can discard the commits for the changes to the security users samples or it maybe nice to include different configurations for spring session supported stores and provide instructions on how to change stores when running the samples of course the default could be to use redis and preserve the work you have already done either way no worries
1038,thanks just wanted to make sure wasn missing something will just use ee
1039,thanks for the pr this is now merged into master via be df
1040,thanks for the pr have provided few comments but will need to revisit this once we start work on this should be rather shortly as we hope to have out this week depending on one last issue getting resolved
1041,thanks for the review ll update the pr accordingly over the next few days
1042,ve updated the pr with following changes cleanup of expired sessions is now done using single sql statement delete support for publishing sessiondestroyedevent and its subclasses has been removed jdbcoperationssessionrepository constructor which takes datasource and constructs default jdbctemplate has been added tests have been updated according to aforementioned changes javadoc updates fixed integration tests for new sample projects sql statements are still in enum like to see your feedback on my latest comments on this subject
1043,thanks for this pr use concurrenthashmap for the querycache access and fill can be concurrent for what is the prefix when then would allow to change the whole table name not just the prefix personally would not use the enum approach just simple string which can be overwritten
1044,thanks for your feedback since tableprefix is not intended to be changed in runtime concurrency is not an issue however synchronizing querycache operations inside getquery method might be good idea prefix allows for limited customization of table name this is common approach used in many frameworks for example spring integration spring batch quartz scheduler etc to avoid possible name clashes with other entities in your app and make it possible to have multiple repo backed by the same database schema
1045,ve updated the pr again with the following changes moved sql scripts to org springframework session jdbc and updated references accordingly polished modifiers bit in jdbcoperationssessionrepository
1046,thanks again for sending this pr starting full review of this pr now
1047,sql statements are still in enum like to see your feedback on my latest comments on this subject you said projects spring session pull discussion ahh see you like to have something similar to way security jdbcdaoimpl provides sql customization options also considered this initially but opted to go the route seen in integration jdbcmessagestore my reasoning was that in practice the session object is closer to integration message than it is to security userdetails due to session being entity which is internal to the framework unlike userdetails which is often derived and constructed from some application domain entity provided by users that why the enum approach seemed like good approach to me thanks for the response would still like these to be static final strings rather than enums see where you got the idea from know this is coding style change especially since this is all private however making this change will better align with spring session code style and provide consistency in the project additionally it will make it easier to allow custom queries very little effort if we every go down that path
1048,thanks for the full review ll update the pr with your suggestions within day or two
1049,ve updated the pr with following changes move queries from enum to string constants allowed default table name to be customized instead of just table prefix completely removed event publishing use converter interface for session de serialization customization replace mapsession references with expiringsession interface other misc improvements from your comments rebased to the current master still owe you the persistence optimization in cases when only lastaccessedtime is updated need to think bit about that one in the meantime you can review other changes
1050,thanks for the updates still owe you the persistence optimization in cases when only lastaccessedtime is updated need to think bit about that one in the meantime you can review other changes you can have boolean on the jdbcsession that is changed when any property other than lastaccesedtime is set if the boolean changes then you would persist everything else persist only the lastaccessedtime in fact you might keep track of if lastaccessedtime is written too and only persist if that changes you would likely need different sql statement that could be injected for this special case
1051,you can have boolean on the jdbcsession that is changed when any property other than lastaccesedtime is set if the boolean changes then you would persist everything else persist only the lastaccessedtime in fact you might keep track of if lastaccessedtime is written too and only persist if that changes something along those lines boolean flags was my initial idea also thanks
1052,ve updated the pr with improved optimized persistence strategy test cases to cover all the scenarios on save operation were also added
1053,have you signed the cla projects spring session blob master contributing adoc sign the contributor license agreement
1054,whoops sorry forgot to mention it in the opening comment yes ve signed the cla also did some work on the docs for this new feature but didn finish it yet
1055,thanks applied some very minor polish but other than that think things are ready to merge you mention also did some work on the docs for this new feature but didn finish it yet can you elaborate is this something that we need to wait on or can merge now
1056,was referring to documentation docs module no need to wait for merging can open new pr for the docs if that ok with you
1057,thanks for the clarification just wanted to make sure we were both ready for the merge putting some final polish on things and will merge once that is done
1058,created for the documentation of the samples ideally we will have the documentation before we perform release
1059,thanks again for the pr this is now merged via cd applied some polish via cfe and ffa dac bbe
1060,rather than first querying and then deleting this could just be delete which would prevent loading all the session ids in memory and reduce overhead on the database
1061,think would prefer to use private static final strings here
1062,unfortunately this will not publish the applicationevent for every node in the cluster for this reason think we should just not publish the event and establish this as limitation of the datastore this ties in with why we can simply perform delete rather than looking up the session id first
1063,note see projects spring session pull files
1064,initially considered implementing it that way for the same reasons but that would mean sessionexpiredevent wouldn be fired
1065,agreed not sure how and why this one slipped through as public
1066,thanks see projects spring session pull files
1067,should be more clear not sure like the enum would only use strings as this aligns with spring coding conventions edit eventually we may make these injectable queries too which would make the enum difficult to work with
1068,ok this approach also covers the cleanup strategy then
1069,ahh see you like to have something similar to way security jdbcdaoimpl provides sql customization options also considered this initially but opted to go the route seen in integration jdbcmessagestore my reasoning was that in practice the session object is closer to integration message than it is to security userdetails due to session being entity which is internal to the framework unlike userdetails which is often derived and constructed from some application domain entity provided by users that why the enum approach seemed like good approach to me
1070,looks like the solution is stolen from the spring integration projects spring integration blob master spring integration jdbc src main java org springframework integration jdbc jdbcmessagestore java not sure if we really have some gain from the enum but that might be some hash performance producing for the hashmap key
1071,stolen is such harsh word previous comment clearly stated the origin of the approach taken here as well as this comment projects spring session issues issuecomment did in the original issue if something is valid and proven approach to given problem why not reuse it
1072,sorry if that really sounded so hurting really wasn going to say anything bad nor to you nor to the approach just was going to explain to that there might no reason to nit pick to this code from other side steal isn applied between spring projects you use code from one spring project in the another therefore this word should be treated as enough soft anyway got your point and will use the more formal language in the future smile
1073,no harm done that why used in the previous comment we re on the same page
1074,is this necessary
1075,certainly not it seems like intellij gradle plugin messing with gradle conf remember fixing something similar in settings gradle prior to pushing the initial commit but it slipped in the updated commit
1076,on interface methods won compile in eclipse please remove this
1077,if we keep this need to add publishevent to work with spring which we now compile with
1078,agree with about the table prefix projects spring session pull issuecomment if you need to allow customizing the queries then allow the entire query to be injected
1079,this won be available to all jvm instances which is inconsistent with the way spring session works we should probably remove this
1080,if we change to using strings for the queries then this can be simplified for example we won need querycache we won need to worry about concurrent access to querycache projects spring session pull issuecomment in fact this method could be deleted
1081,we should probably use interface type declaration for deserializer and serializer
1082,move spring security context to principalnameresolver since that is the only place it is used
1083,also default the table to spring session to be more explicit
1084,change to converter
1085,change argument type to converter
1086,at some point in the javadoc we should probably include the default schema that should be used with this
1087,it would probably be good to have some sort of optimization to allow only updating the lastupdatetime if that is all that was changed this would be beneficial so that the entire session does not need to be serialized every time
1088,change to rowmapper this will involve changing all the references to mapsession too
1089,let use springsessionjdbcoperations as the qualifier
1090,yeah figured that out myself in the meantime
1091,ok so assuming we take the strings for queries route you like to also remove the possibility of changing just table prefix in that case users would need to provide custom queries just to the change table prefix consider the case where there are multiple apps sharing the same database schema in order to avoid conflicts only the table prefix needs to be changed forcing users to provide custom queries in that case is configuration overkill imo if we keep table prefix option we need some sort of getquery method and cache would certainly be beneficial to prevent string manipulation on each sessionrepository operation
1092,in that case users would need to provide custom queries just to the change table prefix consider the case where there are multiple apps sharing the same database schema in order to avoid conflicts only the table prefix needs to be changed forcing users to provide custom queries in that case is configuration overkill imo we probably wouldn advice placing something like session in shared database although this would still be possible with little bit of work typically different applications would use different username password for their database connection the different users could have different default schema which would isolate the sessions we could certainly create separate ticket for adding table prefix and see if it gets enough votes but don think we add something like this in an initial release once we add something it cannot be removed
1093,we re very often in situation where customer owns the database and all we get is schema with limited privileges meaning we have multiple services that share the same schema agree it not great situation but its completely out our control therefore think allowing users to customize the table prefix is not some exotic requirement but rather failry common thing we heavily rely on with other frameworks we use regulary spring integration integration docs release reference html jdbc html jdbc message store generic spring batch batch trunk reference html configurejob html repositorytableprefix quartz scheduler scheduler org generated html qs all page quartz scheduler documentation set fre jtx jdbc jobstoretx configuration html not to drag this any further ll update the pr soon according to your preferences but expect another pr to provide the table prefix customization as soon as you merge this one
1094,thank you for your response would table name work vs just prefix we could have setter that contains modifies the table name of every query only if they are using the default queries
1095,yes of course that would be great
1096,thanks for the pr this is now merged via bf fdd
1097,few related observations even though the findbyindexnamesessionrepository javadoc claims that spring session is not aware of the authentication mechanism being used concrete implementations are still somewhat tied to spring security ve made it possible to set custom principalnameresolver in redisoperationssessionrepository however savedelta method still relies on spring security context key abstractgemfireoperationssessionrepository requires some refactoring to make it possible to customize principalnameresolver if this pr is accepted can tackle this some time later if gemfire integration author cannot do it
1098,thanks for the pr while can see that this looks like good idea don think we want to do this just yet the reason we have duplicated the logic is because we want to keep the implementation details private so they can change later you may notice that right now the api is specific to resolving principal name however findbyindexnamesessionrepository supports finding by generic index name this means we would likely want to update the api to support generic index names however we will not have enough time to do this before things go ga another consideration is that we would like to see what shapes up from the redis support projects spring data redis pull files diff ffe ba we may find we can simply use some spring data commons support rather than providing our own currently in talks with the spring data team about this idea for these reasons going to close this pr and in favor of for us to address this once we know what is happening within spring data thank you for pointing out this was undocumented issue thanks again for the pr sorry the issue wasn documented looking forward to seeing support for
1099,thanks for the insight understand your reasoning the changes provided with this pr would ve been more natural fit with findbyindexnamesessionrepository predecessor findbyprincipalnamesessionrepository since move to more generic index name base repository is made the same should apply to the proposed resolver be happy to make another contribution when shapes up with more concrete details pr to address is coming soon ll just duplicate principalnameresolver logic
1100,thanks ll try and remember to bump you when we know what path to take looking forward to that pr with this and the mongo support think that is going to be coming before we know it
1101,on mongodb instead of manually cleaning up expired sessions you could use ttl not sure how much of performance hit you take on that
1102,yes but it requires creating ttl index and if you want to use mongo to control the time there have to be single ttl per collection also dont know if there is event produced by mongo then
1103,ah you re right about no event push the ttl would be fairly easy you set the ttl to zero and write the time to expire
1104,thanks for the pr have composed some questions comments please keep in mind am novice mongo user at this point so please feel free to respond with you are wrong because it seems that there are quite few resources that are unnecessary projects spring session pull files we should remove any unnecessary resources know that this is likely due to the fact that the existing boot sample has the same problem and created to address that please make authenticationparser logic private or package scope see projects spring session pull files please remove on interface methods as described projects spring session pull files restore mapsession being final as outline projects spring session pull files please rename to mongohttpsessionconfiguration to match existing naming conventions projects spring session pull files please rename to mongooperationssessionrepository to match existing naming conventions projects spring session pull files consider using spring data mongo repository and mongosession object projects spring session pull files is there reason to remove from the id projects spring session pull files it may be good to have actual expiration on sessions too projects spring session pull files applicationevent are not published across nodes projects spring session pull files perhaps removing mongosessionserializer projects spring session pull files note haven yet looked much at the samples will do that once we iron out some of the details in the production code
1105,ve signed cla
1106,just letting you know am now starting to review the updates
1107,if you are able rebasing the branch would also be appreciated if that is difficult can do that part for you
1108,thanks again for the pr this is now merged into master via cebc applied very minor polish via bfd
1109,do we actually need these resources
1110,prefer not to expose this logic for reasons explained in please move this logic within the mongo package and make it package scope or private
1111,this sample is clone of boot sample in boot sample there is nice webapp to show the application usage and as know it uses those resources
1112,on interface methods will not compile in eclipse since we are needing to work with older jdks please remove any for interface methods so this compiles
1113,please restore this being final
1114,please rename to mongohttpsessionconfiguration to match existing naming conventions
1115,please rename to mongooperationssessionrepository to match existing naming conventions
1116,did you consider creating dedicated mongosession object that used the spring data mongo repsitory data mongodb docs current reference html repositories is there reason to use the dbobject directly wondering if using the repository support might make it easier to customize things like serialization
1117,is there reason to remove the from the id
1118,it may be good to have an expiration on the actual object as well to ensure that if the application is down when sessions expire then brought back up that the sessions are still cleaned up
1119,unfortunately this event will not be published across all nodes this means that we don really get the expected support perhaps at least for now mongo support just doesn support events this is allowed
1120,it seems like there should be some existing api either in spring core or spring data mongo that we could use rather than writing our own have you looked into this
1121,thank you for pointing this out noticed that and included that detail in my summary projects spring session pull issuecomment along with an issue to get the boot sample fixed
1122,removed the final because it is implemented with covering all required logic which means we can use it for example for storing sessions in mongo or relational databases by simply creating annotated class that extends the mapsession is there any particular reason for keeping it final
1123,ok
1124,ok
1125,ok
1126,ok
1127,first it appeared unnecessary for the changes that were made does anything need this change right now second by keeping it final we are able to change certain implementation details without worrying about passivity
1128,yep the problem is with serialization mongo repositories are not capable of writing spring security objects like for example usernamepasswordauthenticationtoken thats why we need mongosessionserializer to handle that exposing it as an interface allows users to plugin in their own serialization mechanisms
1129,just making the id shorter sign is redundant here in my opinion of course it will also work with minus char so if you prefer this version can remove the replacement
1130,yes but we need some additional information like for example field names that why decided to create dedicated interface schema design in mongo is big topic so imho it good to give such extension point to the users
1131,would it be possible to provide custom mongoconverter data data mongo docs release reference html mongo custom converters to work around this
1132,we use is in version with fst serialization can make it final but it means each custom implementation will probably copy of this code as it covers most usecases
1133,was thinking about that but it means custom converter for each non standard object that possible but not sure useful for users when they will have to register their own serializers serializers like kryo fst or even java serializations are handling it much better
1134,ok that makes more sense then would you be interested in contributing the fst serialization in separate pr and making the class non final in that pr rather than this one if so can you create an issue to track that thanks for considering this note you might hold off on sending that pr till we get some of the other comments sorted out so you don have dual maintance
1135,think there will be problem in adding fst to io platform so decided to open mapsession with this pr but definitely can this change to another pr
1136,please keep in mind that am new to mongo so this might not work it seems you might be able to use converter and converter this would be implemented similar to mongosessionserializer using jdk serialization
1137,would like to keep it in distinct pr so we can keep track of why we are making changes in regards to getting fst in the spring io platform believe optional dependencies do not need to be in spring io platform cc
1138,yes please remove that
1139,optional dependencies need to be in the platform
1140,thanks for some reason thought the gradle plugin only checked runtime and not optional scopes what are your thoughts on adding fst as dependency to spring io platform
1141,rather wary of it at the moment fst own dependencies are pretty minimal jackson objensis and javassist but minor updates are released very frequently in the last months and that may prove problematic in the future if it were me be looking for alternatives that are less of moving target if there aren any consider using jarjar and embedding fst so that you can have complete control over the version that used
1142,can we make this package scope
1143,in the other implementations the configuration is in distinct package to keep configuration distinct from that of the code actually doing stuff this ensures we do not have any web based dependencies in org springframework session data gemfire they are all in sub packages do you have good reason for putting this in the same package if not it probably makes sense to move this and other configuration related classes into org springframework session data mongo config annotation web http
1144,we should probably introduce setter methods for each of these member variables including the non autowired members and perform on the setter method this ensures users can still use xml based configuration by allowing them to create an instance of mongohttpsessionconfiguration and set the properties
1145,spring session uses commons logging same as spring framework
1146,these to fields should likely be on parent interface of standardmongosessiontodbobjectconverter and standarddbobjecttomongosessionconverter since they only make sense if those converter are being used
1147,the typical pattern spring session follows is required dependencies are constructor injected and anything that has default is setter method since we have default for everything but the mongooperations think it makes sense to move all the other dependencies to setter methods
1148,guessing getprincpalquery is necessary so you can customize the field name of principal but not very keen on this since the user would need to override this if they used another converter trying to figure out what the right answer is here since you did originally have the strategy aware of the principal name attribute perhaps the right answer might be to keep mongoexpiringsession public but mark final and allow the converter to inject the query on the mongoexpiringsession the mongosessionrepository already requires mongosessionrepository so it could obtain the query from the mongoexpiringsession this way all the query information is kept within the converters the one thing we might change is for the api on mongoexpiringsession to have method to lookup the query by index name not entirely convinced of this so please let me know your thoughts
1149,thinking rather than injecting two converter implementations we should require geneircconverter this would allow for few benefits it would allow the same class to serialize and deserialize it would allow for converting other types if necessary in the future without adding more setter methods likely we could experiment with registering the default spring geneircconverter so any hooks for automatic conversion are included with this feature
1150,very minor but test names should end in test
1151,thanks still working on jackson serialization which should finish in few days
1152,awesome we could probably send the jackson serialization in new pr so we can keep making progress on this hope to be rather responsive on this until we finish up
1153,yes ve made configuration as well as the converters package scoped which means if like to open annotation to different package ve to open also those classes
1154,haven noticed anyone is still using xml config ll fixed it
1155,the defaults are in the configuration do you want to move them to the implementation
1156,yes please the defaults in the implementation would be nice so that users that manually instantiate get the same defaults this would also allow keeping these defaults package scope while moving the configuration to distinct package
1157,the user is able to override this query when he want to change principal field name not needed for changing the converter
1158,but things like maxinteractiveinterval or collectionname are specified on annotation do you want to copy those default to the implementation
1159,that was something not clear for me you can use many different converters but we also have to stick to some naming convention how would you like to enforce user to serialize expireat to field with exactly this name and it needed to create ttl index
1160,yes
1161,generally not fan of such approach when someone will decide to serialize attributes as map he needs to create whole mongoexpiringsession object from scratch as you use fully qualified field name for keeping principal and mongo doesn allow dots as field names so with such approach we totally close repository or converters from being extended by users not sure it something you want
1162,think we should allow the user to inject the queries as well
1163,how would you like to do that by creating bean with queries in my opinion it much easier to just create converter which with methods returning those queries so user will be able to keep in in the same place that is generally something that ve created in initial commit
1164,see your point there however quite reluctant to provide our own serialization apis perhaps we can extend genericconverter and have it contain lookup method for the queries this ensures that we have all the conversion logic and queries in the same api but yet reuses the existing spring infrastructure thoughts
1165,
1166,think we should make query getqueryforindexname string indexname
1167,the more think about this the less like it because it is one off how is the index for principalname created perhaps we should have method like list getindexes
1168,ve simplified this cannot see the usecase in which we won use is on criteria
1169,the package should be org springframework session data mongo config annotation web http to isolate the web based dependencies there may eventually be an enablemongosession annotation for things like spring batch which don have http
1170,currently there is no index on principal it used only for querying against principal prefer to refactor that after allowing more than principal query
1171,ok
1172,we won be able to change the method signature on public interface once we go ga therefore think we should probably make this little more generic
1173,not if we want to allow users to create their own converters then then need to operate on this object
1174,again we won be able to change public interface once we go ga therefore think we should probably make this little more generic
1175,aaaa get it sure will change it
1176,thanks for the pr this is now merged into master
1177,
1178,thanks for the pr this is now merged into master via bf added very minor polish in to ensure that the hazelcastinstance wasn null in the teardown method
1179,excellent work lgtm
1180,thank you for stepping up and providing an integration test have merged this into master via ecc
1181,otherwise yes of course the good job and thank you everyone for contribution
1182,thanks for the review
1183,uh just have noticed that from my perspective it should not be so bad at all shuts down all running hazelcast instances on this jvm it doesn shutdown all members of the cluster but just the ones running on this jvm newhazelcastinstance config public static void shutdownall but from other side would be consistent and close only that hazelcastinstance which we have started with the hazelcastitestutils embeddedhazelcastserver
1184,don like all this notations in the class names feels like the artifacts but that is just imho looks like hazelcast doesn feel itself bad to use it in its types like imap smile
1185,this is convention that is used in spring session to distinguish between integration tests and unit tests otherwise we will get collisions in the class names
1186,thank you got it makes sense itest integration test never mind the matter of opinion smile
1187,thanks for the feedback that is good point created any chance you or anyone else could send pr
1188,not problem at all all feedback is welcome keep it coming
1189,see github issue for further details
1190,thanks again for the pr this is merged into master via ee ca fe ea also performed bit of polish via ad ab dc cda ef most notably the sample code is now tested
1191,other than possibly adding test case it looks good wonder if we should specifically mention that needn shouldn try to configure the map in hazelcast configuration because it will have no effect
1192,all comments from here and gitter should now be addressed
1193,thanks as discussed on gitter we are now just waiting on someone to test with an external hazelcast it seems is going to have time for that tonight
1194,was going to look at an integration test for clients tonight but are you happy to go with tests at session commit ee efbac fdddbcffecd as mentioned on gitter since has confirmed the clients works you could merge this pr then get to open new pr
1195,that sounds like great plan ll look into merging tomorrow thanks rob on feb pm mark anderson notifications com wrote was going to look at an integration test for clients tonight but are you happy to go with tests at vpavic session commit ee efbac fdddbcffecd as mentioned on gitter since has confirmed the clients works you could merge this pr then get to open new pr reply to this email directly or view it on github projects spring session pull issuecomment
1196,thanks again for the pr squashed the commits and merged it in via cd ce
1197,looks like that pr should be closed already nice job guys sorry for the noise from my side like this projects but don have time to contribute here and even can still figure out the hooks for my spring integration to utilize the of this project
1198,thanks just working on catching up on responding to comments closing the issues pushed fixes for this is fixed via cd ce so closing this comment thanks again for the pr
1199,realized when reading this sentence we have an issue the put method on imap does indeed set the ttl but what we actually want is the tti time to idle set
1200,as discussed in gitter projects spring session at af this is not an issue as thought it was things should work as expected but it would be better if we add test specifically for this like save session wait some time less than the expiration time update the session as sessionrepositoryfilter does wait until past the original time it should have expired ensure it has not expired because it was updated
1201,this did not put the badge in the right spot
1202,thanks for the pr this is now merged into master
1203,what blocking the merge
1204,final
1205,is there need for concurrency in these maps if yes then why not use concurrentmap as type and use putifabsent instead of put
1206,bad formatting there is some more ahead
1207,concurrentmap is used because the map cache could be accessed from multiple threads concurrently putifabsent is not used as overwrites are allowed overwrites are legal if for some reason cache is not purged of old session before creating new session
1208,closing to come up with better impl
1209,it looks like trouble was in my kryo classes but this pr doesn make sense unless we actually provide some sensible custom kryo implementation for serializer that be to actually verify things in tests
1210,we spoke offline and the concern was more related to spring session scoped beans in general and not this fix merged this into master at fe fcc ae also added test cc ef dd fdfdeacf
1211,actually think this casting is wrong and was related to use of jdk serialization been playing with kryo and now getting casting errors need to play with it bit more
1212,what issue were you having exactly this looks exactly like the way would solve the issue
1213,thanks for the pr this is now merged into master btw curious why wrapper task isn used in build gradle as follows just find it easier to generate the wrapper using my current version of gradle it doesn need the task actually defined in newer versions of gradle typically update the wrapper by modifying the properties file directly to avoid changing any updates that may have been made to things like the default java options projects spring session blob df dd ada cfe fdf gradlew is there reason you think it would be better defined in the build gradle
1214,just thought it easier to change version but didn know the gradlew is customized thanks for the explanation smile
1215,not problem on the explanation thanks again for the pr and for the extra set of eyes on things
1216,thanks for the pr this is now merged into master love all the work you have been doing with spring session lately keep up the great work
1217,thanks again for taking the time to send pr closing due to the feedback provided on specifically we would want this to be distinct strategy
1218,thank you for taking the time to send pr closing due to the feedback provided on specifically we would want this to be distinct strategy
1219,thanks for sending this for my early review
1220,thank you for the pr here is the current check list of what we need done documentation this is really thing that must be done before we merge everything else is cosmetic and is something can manage for you if necessary squash commits we should strive for single commit per committer if there is real good reason to split into multiple commits we can make exceptions rename the commit comment to refer to issue remove annotations from interface overrides so that it compiles in eclipse while good cleanup we should probably move the changes of mapsessionrepository to different commit projects spring session pull files diff bb aba
1221,all check list items resolved documented all spring sessiongemfire support and features including javadoc updated spring session user guide and samples in total for client server and using both java config and xml squashed fixed up all commits into single commit summarizing all the development work to add gemfire support to spring session renamed the commit to refer to pr removed all annotations on interface overrides still used on class methods reverted changes to the mapsessionrepository class if there are any issues let me know
1222,thank you for the updates john here is my first round of comments will wait until we get these sorted out until we continue javadoc failures the first issue run into is javadoc failures if run the following with jdk get failure code spring session gradlew clean check docs compiletestjava failure build failed with an exception what went wrong could not resolve all dependencies for configuration docs testcompile could not find com gemstone gemfire gemfire searched in the following locations pom jar required by spring session build docs build snapshot org springframework data spring data gemfire release try run with stacktrace option to get the stack trace run with info or debug option to get more log output build failed tests failures if run gradlew build from the spring session build project get failures the first is docs compiletestjava failure build failed with an exception what went wrong could not resolve all dependencies for configuration docs testcompile could not find com gemstone gemfire gemfire searched in the following locations pom jar required by spring session build docs build snapshot org springframework data spring data gemfire release if resolve that am then getting the server is running at samples httpsession gemfire clientserver xml jar samples httpsession gemfire clientserver xml integrationtest sample attributetests first visit no attributes failed org codehaus groovy runtime powerassert powerassertionerror at attributetests groovy tests completed failed skipped looking at the test output see assertion failed assert driver title session attributes null false org openqa selenium htmlunit htmlunitdriver at sample pages homepage clinit closure homepage groovy at sample pages homepage clinit closure homepage groovy at geb page verifythispageatonly page groovy at geb page verifyat page groovy at geb browser doat browser groovy at geb browser at browser groovy at geb browser to browser groovy at geb browser to browser groovy at geb spock gebspec methodmissing gebspec groovy at sample attributetests first visit no attributes attributetests groovy it seems like this is caused by the fact that when starting the application to perform the tests the following error is caused org springframework beans factory beancreationexception error creating bean with name gemfirecache invocation of init method failed nested exception is org springframework beans factory beaninitializationexception no bean of type com gemstone gemfire cache client pool having name null was found nested exception is org springframework beans factory beancreationexception error creating bean with name default initialization of bean failed nested exception is java lang illegalargumentexception gemfire server failed to start at org springframework beans factory support abstractautowirecapablebeanfactory initializebean abstractautowirecapablebeanfactory java at org springframework beans factory support abstractautowirecapablebeanfactory docreatebean abstractautowirecapablebeanfactory java at org springframework beans factory support abstractautowirecapablebeanfactory createbean abstractautowirecapablebeanfactory java at org springframework beans factory support abstractbeanfactory getobject abstractbeanfactory java at org springframework beans factory support defaultsingletonbeanregistry getsingleton defaultsingletonbeanregistry java at org springframework beans factory support abstractbeanfactory dogetbean abstractbeanfactory java at org springframework beans factory support abstractbeanfactory getbean abstractbeanfactory java at org springframework beans factory support defaultlistablebeanfactory preinstantiatesingletons defaultlistablebeanfactory java at org springframework context support abstractapplicationcontext finishbeanfactoryinitialization abstractapplicationcontext java at org springframework context support abstractapplicationcontext refresh abstractapplicationcontext java at org springframework web context contextloader configureandrefreshwebapplicationcontext contextloader java at org springframework web context contextloader initwebapplicationcontext contextloader java at org springframework web context contextloaderlistener contextinitialized contextloaderlistener java at org apache catalina core standardcontext listenerstart standardcontext java at org apache catalina core standardcontext startinternal standardcontext java at org apache catalina util lifecyclebase start lifecyclebase java at org apache catalina core containerbase startchild call containerbase java at org apache catalina core containerbase startchild call containerbase java at java util concurrent futuretask run futuretask java at java util concurrent threadpoolexecutor runworker threadpoolexecutor java at java util concurrent threadpoolexecutor worker run threadpoolexecutor java at java lang thread run thread java caused by org springframework beans factory beaninitializationexception no bean of type com gemstone gemfire cache client pool having name null was found nested exception is org springframework beans factory beancreationexception error creating bean with name default initialization of bean failed nested exception is java lang illegalargumentexception gemfire server failed to start at org springframework data gemfire client clientcachefactorybean resolvepool clientcachefactorybean java at org springframework data gemfire client clientcachefactorybean initializepool clientcachefactorybean java at org springframework data gemfire client clientcachefactorybean createcache clientcachefactorybean java at org springframework data gemfire cachefactorybean resolvecache cachefactorybean java at org springframework data gemfire cachefactorybean init cachefactorybean java at org springframework data gemfire cachefactorybean afterpropertiesset cachefactorybean java at org springframework beans factory support abstractautowirecapablebeanfactory invokeinitmethods abstractautowirecapablebeanfactory java at org springframework beans factory support abstractautowirecapablebeanfactory initializebean abstractautowirecapablebeanfactory java more caused by org springframework beans factory beancreationexception error creating bean with name default initialization of bean failed nested exception is java lang illegalargumentexception gemfire server failed to start at org springframework beans factory support abstractautowirecapablebeanfactory docreatebean abstractautowirecapablebeanfactory java at org springframework beans factory support abstractautowirecapablebeanfactory createbean abstractautowirecapablebeanfactory java at org springframework beans factory support abstractbeanfactory getobject abstractbeanfactory java at org springframework beans factory support defaultsingletonbeanregistry getsingleton defaultsingletonbeanregistry java at org springframework beans factory support abstractbeanfactory dogetbean abstractbeanfactory java at org springframework beans factory support abstractbeanfactory getbean abstractbeanfactory java at org springframework beans factory support defaultlistablebeanfactory getbean defaultlistablebeanfactory java at org springframework beans factory support defaultlistablebeanfactory getbean defaultlistablebeanfactory java at org springframework data gemfire client clientcachefactorybean resolvepool clientcachefactorybean java more caused by java lang illegalargumentexception gemfire server failed to start at org springframework util assert istrue assert java at sample gemfirecacheserverreadybeanpostprocessor postprocessbeforeinitialization gemfirecacheserverreadybeanpostprocessor java at org springframework beans factory support abstractautowirecapablebeanfactory applybeanpostprocessorsbeforeinitialization abstractautowirecapablebeanfactory java at org springframework beans factory support abstractautowirecapablebeanfactory initializebean abstractautowirecapablebeanfactory java at org springframework beans factory support abstractautowirecapablebeanfactory docreatebean abstractautowirecapablebeanfactory java more error listenerstart it appears that simply running either gemfire xml sample results in the same error gradlew samples httpsession gemfire clientserver xml tomcatrun use assertj not hamcrest spring session uses assertj not hamcrest for assertions it would be best if the end result uses assertj can take care of this for you or you can do it just let me know what you decide note this is minor thing that can take care of myself if necessary quite few of the tests are using hamcrest spring session uses assertj for assertions use available port for gemfire server we can use static port for client redis samples if the ci server instances all have server running on that port however we cannot guarantee port will be available for the server to run on this is particularly true since spring session might build two branches at the same time which would mean that one branch would fail since the port isn available instead we should ensure that any servers should use an available port you can check this out with the hazelcast example which uses spring socketutils findavailabletcpport if you want you can make the port static for the sample but the integration tests should be dynamic
1223,it seems fest assertions have been replaced by assertj costigliola assertj core migrating from fest assertions and that spring session is actually using the old fest assertion api and not assertj as indicated in the dependencies projects spring session blob master spring session build gradle see migrating from fest costigliola github io assertj assertj core migrating from fest html fest for more details the assertj api begins here import static org assertj core api assertions as outlined here costigliola github io assertj assertj core quick start html perhaps separate pr should be filed to update spring session with the actual official assertj api
1224,thanks didn realize had not updated spring session to assertj yet ve fixed this via
1225,ah crap just went through and reworked all the gemfire tests with the existing fest assertions with any luck though this should be simple change the import statement and done fingers crossed most of the gemfire test assertions are pretty simple
1226,oops sorry about that it should be as easy as changing the import statement with possibly few minor changes again don mind doing this
1227,the following has been addressed javadoc errors resolved test failures resolved due to missing gemfire dependency all test junit hamcrest based assertions replaced with assertj all gemfire client server integration tests now randomly generate an available tcp port over which the client and server can communicate
1228,thanks for the pr merged this via fffdfe fa eb provided little bit of polish in dd ccd ffc this fixes gh
1229,is there good reason to have base class right now since we only have single repository if not could this be folded into single implementation or made package private for now this will allow us to more flexibility when updating of course if there is good reason for this being made available like to understand why
1230,note that we will need to update how we do the principal when we fix the reason is that think we will be making it so that any attribute can be indexed so interface for finding by session attribute will be more generic perhaps something like findbysessionattr string name string value
1231,if we fold into common base class we can use gemfiresession directly rather than having to wrap the value passed in alternatively the base class could be made generic this also allows for customizing when the session gets persisted for example we might have the expiringsession object itself perform the writes if users want immediate writes
1232,wondering if this is writing every attribute every time if so is there way to only write the updates this will increase performance lot and will handle race conditions better for example assume we have session with the attribute of username thread starts to process request to get protected resource the username attribute is present in the session thread processes request to log the user out remove the username attribute thread the username attribute is removed from the session and redis is updated to reflect the username is removed thread the request finishes and the session is updated to include all of the original session attributes this means the username is now set in the session which indicates the user is logged in however the user should be logged out if we were to write only the delta this would not be an issue however writing every attribute every time alleviates problems like
1233,noted
1234,this is something the gemfire team did with the http session management module and something we could implement on behalf of the user in gemfire it is simple flag to flush on write could implement something similar with an additional attribute on the annotation
1235,delta has been implemented in the latest commit session commit bc eeb def
1236,yes there are several reasons wanted to have clean separation between the basic crud operations implemented in the concrete class gemfireoperationssessionrepository and the event handling translation logic that would be common literally the same for all concrete classes the gemfire cache event to spring session event translation is or rather should be consistent across all gemfire sessionrepository implementations the concrete implementation should only have to focus on implementing the crud operations imo also the abstractgemfiresessionrepository handles registering the gemfireoperationsessionrepository as cachelistener on the appropriate gemfire component without the user having to know which component the gemfire region storing session state next have just moved the gemfiresession class along with new gemfiresessionattributes supporting class to the abstractgemfiresessionrepository class to simplify future sessionrepository implementations based on gemfire for instance another possible implementation might be to use sd repository abstraction gemfirerepository to back the sessionrepository based on gemfire this was what vinicius did in his implementation of spring session gemfire support but his approach was quite brittle in how he registered the repo there are subtle other reasons but the points above capture my main intent had thought about naming this class gemfiresessionrepositorysupport but have not renamed it yet
1237,can the hamcrest dependencies be removed now that everything has been changed over to assertj
1238,yes and in fact have just updated the pr again with couple more changes including the removal of the hamcrest core testcompile dependency
1239,thanks for the pr this is merged into master via cbdca df ea
1240,thanks for the pr we are trying to target customizing how cookies are written in more holistic manner via in short we want strategy pattern that allows for custom reading writing of the cookie value for this reason going to reject this pr note nearing completion on this issue so you should see it fixed later this week
1241,this is now resolved via see session docs current snapshot reference html guides custom cookie html for details
1242,very nice after implementing my solution we started having an issue on localhost with chrome and only chrome strangely where sessions were ignored by one server it looks like your solution addresses that thank you so much
1243,thanks for the pr this is now merged into master via ec bfa dd de
1244,we have already released projects spring session releases tag release and started on projects spring session commit ddb db afd ffd ba da
1245,thanks for pr this is now merged into master
1246,thanks for the pr still need to add the configuration for listeners to generate the session events right this needs to be done before we can claim we support hazelcast assume you don want yet another sample for this so if this does get merged perhaps sample could use the new annotation to showcase it think this would be good idea wasn sure which if any part of the documentation you want updated with this please let me know and be happy to add anything we need to ensure that the reference contains enablehttphazelcasthttpsession section similar to enablespringhttpsession session docs current snapshot reference html api enablespringhttpsession it should contain details about storage similar to redisoperationssessionrepository session docs current snapshot reference html api redisoperationssessionrepository we would want guide that walks users through setting up spring session with the new support lastly and maybe it is long shot but would ideally like to get hazelcast auto configuration into spring boot including spring session auto configuration for hazelcast which would use the annotation and consequently the configuration added in this pull request this will not happen since spring session has not even done an rc and spring boot is nearly completion once we get the support for configuration in spring session we can discuss auto configuration also we need some integration tests of the configuration before we can merge the request they would likely be similar to redisoperationssessionrepositoryitests projects spring session blob db fba bb ea spring session src integration test java org springframework session data redis redisoperationssessionrepositoryitests java thanks again for the pr
1247,understood ll get to working on the remaining points and add them to this pull request thank you for the guidance always glad to help
1248,thanks for the updates have officially added the hazelcast spring projects spring session tree master samples hazelcast spring sample into master at the moment the following things are necessary to get this pr merged add integration tests for the configuration include the listeners from hazelcast spring sample in spring session distribution perhaps merging them into single class that implements all interfaces update the provided configuration to leverage the listeners update the hazelcast spring sample to use the new configuration add the documentation mentioned specifically we need to ensure that the reference contains enablehttphazelcasthttpsession section similar to enablespringhttpsession session docs current snapshot reference html api enablespringhttpsession it should contain details about storage similar to redisoperationssessionrepository session docs current snapshot reference html api redisoperationssessionrepository we would want guide that walks users through setting up spring session with the new support removal of listeners from the map when the context is destroyed as mentioned by projects spring session pull issuecomment
1249,with the hazelcast annotation should we consider removing the listeners from the map when the context is destroyed this could be an issue is webapp context was redeployed while the underlying hazelcast instance wasn destroyed we don want to end up with orphaned listeners
1250,good call ve added that to the list of things that needs done
1251,apologize for my inactivity lately have pushed the first set of integration tests for extracted out the sessioneventregistry class that was in redisoperationssessionrepositoryitests because it seemed generally useful in integration tests handling sessionevents regardless of the implementation furthermore wrote the tests so far in completely agnostic manner to whether it is redis or hazelcast underneath it might be nice if we can have the same set of integration tests run against config with redis and hazelcast without having to duplicate the code which did do little bit thought this task might be bit out of scope for this pull request though next will write some it specific to the hazelcast implementation any hints on how to test that the entry listener is actually removed upon shutdown of course let me know if ve missed anything todo list add integration tests that check underlying hazelcast directly update the hazelcast spring sample to use the new configuration add the documentation enablehttphazelcasthttpsession section similar to enablespringhttpsession guide that walks users through setting up spring session with the new support
1252,if it were ok testing shutdown and listener removal in unit tests rather than integration tests you could mock hazelcastinstance and imap since they are both interfaces then on shutdown verify that removeentrylistener was called on the imap mock
1253,was integrating this into my code today and ran into an issue where when had multiple nodes in the cluster wasn seeing expiry events in my hazelcast xml didn include max idle seconds so the default value of was used was then overriding in the java code to set this to seconds however didn see expiry events when done this only creation events to get it to expire consistently had to set max idle seconds to in the hazelcast xml is there an issue with overriding this in hazelcast when the map already exists have you seen anything like this
1254,have not tested that specifically and it sounds like it will be good idea for me to add test that verifies that scenario automatically ll take look into why the overridden value via the annotation isn being applied on vacation until friday and will probably be busy getting caught up at work friday so ll try to get to it saturday if can
1255,no problems using my own copy of hazelcasthttpsessionconfiguration for now so it isn anything to do with the value from the annotation being applied suspect it is one of two issues not configuring hazelcast correctly after creating map in the xml you cannot override the max idle seconds property programatically and have it work correctly the strange thing is that jmx seems to report the mapconfig was changed but the expiry events don happen ll try and look into it some more if get the chance just wondered if you had come across any similar issues
1256,you can ignore my previous comment it was local spring issue
1257,believe the pull request now has all of the requested items please take look when you get chance and let me know any feedback you have
1258,thanks for the pr merged this into master after squashed your commits leaving you as the author bcb cc and performed some mostly cosmetic polish on it ca fe please feel free to review my changes and provide any feedback you might have thanks again
1259,thank you for taking look and merging sorry for all the formatting issues stray spaces and tabs ll make sure to clean those up in any future prs looking forward to this being included in release so hopefully can try it out at work
1260,thanks for this much appreciated
1261,not problem thank you for the pr in regards to the issues please don worry about it this has been one of the best pr have seen in while
1262,would it be better to have default of to indicate it should be ignored for the case where you would like to use the value defined in an external hazelcast configuration otherwise spring session will always overwrite
1263,wanted to maintain the functionality in very similar way to the redis equivalent in order to lower the barrier to entry you are right that spring session will always overwrite this value which can be confusing if you configure the same thing externally however spring session would only be configuring the specific map used for the sessionrepository which seems like it might acceptable and the same as the redis configuration does from what can tell if we do want to avoid overwriting think we would have to change to an integer and make the default for this null think would be potentially confusing and could be mistaken for valid value when it is not then only overwrite the value hazelcast default maxidleseconds is if this is not null what do you think
1264,would it be better to have default of to indicate it should be ignored don like the idea of because in terms of http servlet specification that means do not expire from the getmaxinactiveinterval javadoc negative time indicates the session should never timeout change to an integer and make the default for this null unfortunately annotations cannot have type of integer and they cannot have default value of null are we able to read the configuration that was provided and if it was specified in the configuration then do not use the value in the annotation
1265,can see the value in consistency across repository implementations and also agree that isn reasonable value just raised it as possible concern as suspect my use case may have the hazelcast configuration externalised from the spring configuration what about if the maxidleseconds is the default we override with the value from the annitation otherwise we leave it and don use it like suggested
1266,not sure how we would be able to read the provided configuration the user could put the configuration in any xml file and include that configuration alternatively they could configure it in java reading the values from properties file perhaps the problem is as far as can tell we have no way to know if the user configured maxidleseconds as or if they did not configure it and it is just by default in case they configured it as think we would want to respect that and not overwrite it leaning more towards having to change the default attribute value to to match to default of maxidleseconds then the user can configure it themselves and we will only override if value is passed to maxinactiveintervalinseconds though this is different than the redis configuration believe so we have to choose to play it safe and avoid overwriting the user configuration or maintain consistency with the equivalent redis configuration
1267,leaning more towards having to change the default attribute value to to match to default of maxidleseconds hazelcast can be used for many things so setting it to may make sense when there is no context however when considered for an httpsession we should be conscious that the default needs to be secure default that prevents expiration is not what would consider secure then the user can configure it themselves and we will only override if value is passed to maxinactiveintervalinseconds though this is different than the redis configuration believe so we have to choose to play it safe and avoid overwriting the user configuration or maintain consistency with the equivalent redis configuration wondering why this needs to be configured externally vs using the annotation can you elaborate one option is we could make the maxinactiveintervalinseconds attribute string if the value was then we would use the value configured externally the default would still be to preserve secure by default setting thoughts
1268,as you say hazelcast can be used for many things and my thoughts were that we should support hazelcast being configured completely outwith spring this will probably be the case for me and by default don override any of these values in this case can probably handle ensuring this is configured via spring instead of assuming the hazelcast configuration value is used but maybe that wouldn be the case for everyone
1269,does my proposal sound like it will work for you specifically something like this would ensure the value configured externally would be used java maxinactiveintervalinseconds another advantage to using string is that users can leverage spring properties session timeout for configuring the timeout as well of course the disadvantage is that string is not necessarily number
1270,that would work for me
1271,only exists in spring boot so we likely shouldn include that in our javadoc that will confuse users who do not leverage boot
1272,agree meant to remove this in the next commit made and just haven made another one yet
1273,if something other than number is given the application will fail on startup with straightforward message which figured was sufficient exception handling let me know if you want anything else
1274,and implemented my understanding of the previous discussion on the default overriding the session timeout let me know what you think currently it only mentions the string constant added do not configure inactive interval string but perhaps the javadoc for this can should mention the value of that constant as also let me know if you think of better name for the constant
1275,sorry this actually always fails right now thought tested it will push fix after testing
1276,at least for now lets not provide public constant stating empty string in the javadoc should be sufficient since it is very easy to reproduce
1277,updated now as requested
1278,should probably change these to this eventpublisher to match style
1279,thanks for the pr please let me know if anything else needs to be done one issue is that the existing hazelcast sample was demonstration that spring session could work without any spring dependencies like to keep the existing sample application that way one option we could do is remove the spring dependencies from your sample application although think that defeats the purpose of the events which we want the other option is to add this as new sample haven thought of the name very long but perhaps something like hazelcast spring think this option is the better of the two if you have better idea for the name love suggestions there are couple of places where indentation etc could be fixed do you have an eclipse format xml file for your coding standard or can you point me to coding standard honestly haven done great job at this myself you can use the formatter that added to etc eclipse formatter xml
1280,would love to see this added as new hazelcast spring sample we are currently investigating using spring session with hazelcast at the company work for great work
1281,happy to make the changes you suggested for the name of the new sample two other options would be security hazelcast or hazelcast security let me know which of the three names you would prefer
1282,thanks after some further thought think go with hazelcast spring for the following reasons the primary focus is on hazelcast so it should go first the secondary focus is on spring spring applicationevent and spring security does that sounds good
1283,fine by me
1284,hopefully all the comments have now been addressed let me know if there is anything else to do
1285,can you sign the cla as described in the newly added contributing guidelines projects spring session blob master contributing adoc sign the contributor license agreement
1286,ps this looks ready to go other than the cla did squash your commits leaving you as the author and then performed little additional polish once you sign the cla can merge this into master thanks again for your contributions
1287,cla has been submitted
1288,awesome have pushed your changes squashed the commits preserving your author into master with ef eaef ca if you care to you can review my very minor polish in ef ca ca ec thanks again so much for your contribution know that the spring session community will love these updates ps do you have twitter handle could mention for shout out to you
1289,twitter handle is mark
1290,the class and test should likely be renamed to something like hazelcastspringtest it would reflect the name of the sample that you choose
1291,since this sample relies on spring you could leverage spring socketutils to generate the port
1292,master has newly added which will take care of the sessionrepositoryfilter and adding sessioneventhttpsessionlisteneradapter it also allows defaulting and overriding httpsessionstrategy
1293,thanks for the pr at quick glance this looks like an outstanding pr will take look at this sometime next week and get it merged into master thanks again
1294,great please let me know if something doesn make sense or could be improved
1295,thanks again for this pr took look at the pr and have made some minor changes session tree gh in my branch also have few concerns comments about the implementation that we could perhaps discuss possible inconsistent session my concern is that if someone sets the session on the sessioncontextholder then it is not reflected on the httpsession this seems like it could lead to inconsistencies for example if in the service tier someone did the following java simpsessioncontext context new simpsessioncontext context setsession session sessioncontextholder setcontext context then later on in the web tier someone attempted to access the httpsession java httpsession session request getsession the two sessions would not be the same id thus have different instances thinking it may be best to do some refactoring to account for this sessioncontext necessary with the above refactoring don think that sessioncontext is necessary instead the session can be set and accessed directly the httpsessionwrapper would look up the value in the sessioncontextholder rather than save as request attribute believe there may be instances where it needs to fall back to obtain the session from the request attribute but generally it could access the sessioncontextholder tbd what are your thoughts if you agree happy to do the cleanup or am happy to have you send an updated pr
1296,hi the changes makes sense regarding the inconsistency this is real problem about the sessioncontext it was introduced to abstract the sessioncontextholder from the responsible to provide create the session instance within http request for example session should be created only if requested if sessioncontextholder getsession is implemented from my point of view it should do what httpservletrequest getsession does covering the case in which getsession is first invoked from service tier using sessioncontextholder had tried out some things among them to use sessioncontextholder from expiringsessionhttpsession but once sessioncontextholder getsession returns session some ugly unchecked cast to are required will think further about it but would be happy if there are any ideas suggestions to solve the problem maybe just not seeing the big picture
1297,thanks for the response if sessioncontextholder getsession is implemented from my point of view it should do what httpservletrequest getsession does covering the case in which getsession is first invoked from service tier using sessioncontextholder you bring up good point it would be nice to be able to create new session from anywhere within the application however think we would also need way to inspect to see if there is session already but once sessioncontextholder getsession returns session some ugly unchecked cast are required given it is static method there is no way to and the type short of adding generic type capture to the method this would be consistent with the way session getattribute string works too for example sessioncontextholder could be something like this java public static getsession obviously this would still require cast but it would be more isolated thoughts
1298,hi using sessioncontextholder as central point to hold the session is good idea but still trying to understand when should the session be set to sessioncontextholder considering sessioncontext is removed if it is done within the dofilter sessionrepositoryfilter dofilterinternal httpservletrequest httpservletresponse filterchain we need to try to fetch the session from the repository even if it is not used during the request and if it is set when it is retrieved from the request object sessionrepositoryrequestwrapper getsession boolean we wouldn have the session available before executing httpservletrequest getsession boolean suggestions
1299,sorry this is just quick response as won have time to give this ton of thought tonight hopefully holes with this was thinking that sessionrepositoryrequestwrapper getsession getsession would always look up in the sessioncontextholder if that is null on processing an error then it would retrieve from the member variable and then populate the sessioncontextholder sessionrepositoryrequestwrapper getsession setsession session would write to the sessioncontextholder if sessioncontext getsession is invoked and the value is null it would create new one by invoking sessionrepositoryrequestwrapper getsession getsession which would update the sessioncontextholder
1300,explored the idea to have the session stored at sessioncontextholderstrategy here you will find possible solution but is still not mature enough rwinch spring session pull
1301,am looking into this again it seems that the pr you have is now gone due to the fact had to delete the repository do you mind sending it again also thinking we should keep sessioncontextholder simple and remove the strategies and just use an inheritablethreadlocal requestcontextholder in spring web doesn need the strategies and since we could passively introduce strategies prefer to wait until we need them ps sorry for my long delay on this
1302,closing due to lack of feedback
1303,foresee osgi users crying because of this but this is something normal for them
1304,as far as can see this class could be static so it won keep reference to its outer this is preferable most of the time
1305,thanks for the comment spring security does something very similar and it works within osgi so this shouldn be an issue
1306,thanks for your comment you are right that in many instances it is preferable to have static class however this won work since the sessionrepositoryrequestwrapper is non static the reasons sessionrepositoryrequestwrapper is non static is because it needs reference to the type argument of sessionrepositoryfilter to be type safe
1307,thanks for the pr it seems we should come up with similar event for deleting sessions sessiondeletedevent thoughts
1308,so sessiondestroyedevent would be base class abstract with specific expired and deleted subclasses
1309,that is correct this would allow receiving either specific event to me it seems if we allow receiving only expired events users should also be able to only receive deleted events
1310,sounds reasonable shouldn be much more work
1311,further doc updates still to follow
1312,that should be sessiondeletedevent complete let me know if there are any issues
1313,thanks for the pr this is merged into master and will be part of did some very minor polish in projects spring session commit fc ab aefd but other than that it looked good you will note have also added sessioncreatedevent to support httpsessionlistener had to do some merging to get that to work with your changes so you may want to give the snapshot try and see if it is working for you to double check me
1314,thanks for the pr this is merged in via aba ffa ddeeaf
1315,thanks for the report and the pr this is now merged into master
1316,thanks for the pr this is now merged into master
1317,thanks for the pr this is now fixed in master
1318,thanks for the pr this is now merged into master note the previous url did work but it required an extra redirect so agree it is better to have this change
1319,thanks for the pr there is variation of this merged into master that takes into account the find by username functionality too
1320,thanks for the pr can you explain your use case in little more detail also can you explain why this behavior should change how does the current behavior differ from the standard servlet containers behavior
1321,we have custom implementation for long polling long polling also there is requirement the http session must expire and the user must be logged out the problem there was the long polling kept the session alive with this modification we can define custom condition for the session manager in our case this is pattern matcher for the request url implementation included in the pr standard servlet containers behavior cannot be modified to get this work and the solution imho is generic enough for being helpful in other cases although not aware of any
1322,thanks again for the pr not sure that something like this is something that belongs in the framework it seems if this was something that users were struggling with this would be solved within the servlet specification additionally it seems weird to me that if client is making request that the session last accessed time is not updated despite that being the reason the attribute exists for this reason am closing this as won fix if others feel that there is need please comment and we can reconsider
1323,thanks for the pr this is now merged into master
1324,thanks for the report and the pr this is now merged into master
1325,thanks for the pr this has been merged into master now
1326,thanks for the pr this is now merged into master
1327,just wondering if you are planning to merge this for or do you plan to go with noticed that there are conflicts with this pull so be happy to update and fix them if you are going to use it
1328,thanks for the reply we will likely support both mechanisms will likely just be way to update the properties on cookiehttpsessionstrategy since this is not bug fix it will be in the next feature release
1329,what is the current schedule for shall leave this in conflicted state for now then until time comes when it may be merged
1330,don yet have schedule for so would leave the pr as is for now when the time comes can merge the changes for you since it is technically my fault alternatively if you like can ping you when have planned and you can fix them
1331,are you planning to use this pr for if so be happy to update it to remove the conflicts
1332,thanks for reaching out certainly thinking we need to do something with allowing for additional cookie attributes to be specified by the user for however not quite certain how we best want to do that you will see that is providing similar functionality so the answer is wait to remove the conflicts till we decide what we want to do
1333,ok as long as it gets into somehow ll be happy
1334,this was resolved as part of
1335,see session docs current snapshot reference html guides custom cookie html for details
1336,need to customize secure flag of cookie as well
1337,is there anything missing preventing this to be merged would really like to see this in as right now we have to provide our own cookiehttpsessionstrategy just to override how certain things in the cookie are set thx
1338,thanks for the quick responses am rather busy with getting security ga out right now so haven had time to look at spring session after security ga will be focusing on release we will make sure something gets in to resolve your issue
1339,needed this as well needed to set the context path to fixed value so am glad to see that this is now possible in this pr the cookiepathcalculationstrategy is nice touch but wonder if it could be made little more broad and thus more useful clearly the purpose of the cookiehttpsessionstrategy class is to manage http sessions via cookies and therefore the createsessioncookie method is of critical importance wouldn it be better to use the strategy pattern on the creation of the cookie itself rather than on only the path for example public interface cookiecreationstrategy cookie createsessioncookie httpservletrequest map sessionids the default implementation ie defaultcookiecreationstrategy could be exactly the same code that is currently in cookiehttpsessionstrategy createsessioncookie but using strategy pattern would allow one to customize the way the cookie is created including things like setting the cookie domain or setting custom path one complication would be that createsessioncookie currently uses some member variables but that isn insurmountable just suggestion but this approach seems bit more flexible or another far simpler approach would be to remove the final qualifier from cookiehttpsessionstrategy and allow for inheritance noting the somewhat questionable value of doing so it certainly would be pragmatic
1340,need to customize cookie domain to allow all sub domains share same sessions
1341,hi any progress on this pr it months since it been proposed while this functionality is required by many for instance have the same issue as
1342,thanks for the great request trying to aggregate all the feature requests for cookies so we can solve this problem more holistically therefore closing this in favor of which takes this feature into account
1343,in my opinion we don want to have sample for every permutation of spring security or other projects if we did this we would have way too many samples instead believe we need to highlight deltas in spring session so the question ask is how does spring session use change between the basic spring security spring session example and this sample thoughts
1344,agree maybe we should just call it security xml people can use it as bootstrap example or compare their existing xml setups and can add corner cases from our prod environment to it
1345,thanks for the fast response like the idea of having basic xml based example of using spring security and spring session if you can update the sample to leverage only the basics of spring security and to rename the project to security xml can merge in the project
1346,wow you have been real busy thanks again for the pr keep up the great work
1347,thanks for the pr this is merged into master now
1348,thanks for the pr it does seem that the cookie should be set if the session id changes can you elaborate little more on why one would want to always include the session cookie in the response wonder why the client would not just save the user information just like any other piece of data that they are requesting sending response on every request seems to bundle unrequested data in the response to me this feels like someone requesting messages and getting back information related to user current in the response
1349,actually think always sending the cookie is probably not the best idea for the reasons you say was just throwing out ideas really some stuff was playing with and it seemed to work so thought it would be good to discuss it here the flag to always send cookies is separate commit so it ought to be easy to get rid of
1350,thanks closing this in favor of since we do not want the always send cookie flag ll cherry pick the commit and apply it to
1351,why ignore the pom xml
1352,because this is gradle build
1353,tl dr thanks for reporting this and providing pr this is now merged into master you could also work around this issue using the following groovy compile org springframework session spring session redis release compile org springframework boot spring boot starter redis the advantage is that this allows boot to manage as many of the dependency versions as possible details of the problem digging into this bit deeper so could figure out how this issue got past our build version mismatch the issue happens because spring boot redisautoconfiguration projects spring boot blob release spring boot autoconfigure src main java org springframework boot autoconfigure redis redisautoconfiguration java requires redissentinelconfiguration which is not available until spring data redis why does boot allow version mismatch spring boot is suppose to manage my versions for me so how did this happen boot gradle only manages unspecified versions this happens because spring boot gradle plugin currently only manages unspecified versions not transitive versions that means when using spring boot that configuration like this groovy compile org springframework session spring session data redis release will bring in spring data redis resolved from spring session data redis release additional workaround you could also work around this issue using the following groovy compile org springframework session spring session redis release compile org springframework boot spring boot starter redis instead of using spring session data redis we only include spring session and allow spring boot starter pom to bring in all our redis dependencies created to improve our sample and documentation spring boot gradle adding dependency management spring boot is currently scheduled to include the dependency management plugin which will ensure transitive dependencies are also managed see spring boot issues projects spring boot issues how did it get past our build so the question is how did this get past our build samples use spring boot we do have integration tests and ci build that verify all of the spring session samples work this includes spring boot sample however the spring boot sample is on version of spring boot since you are using spring boot with spring session data redis you are getting conflicting versions spring io checks we also certify that spring session works with spring io versions which means it should work with spring boot more concretely this means we re run all the tests with the versions found in spring io the reason this works is because the spring io plugin changes all of the versions to match the versions found in spring io this means that even though we declare dependency on version spring data redis within our build when we certify against spring io we ensure all the versions are spring io versions including spring data redis this means that our tests will pass changes in spring session so what changes should we make to spring session initially we used spring data redis as we viewed this as the minimum version of spring data that could be used this ensured that our tests ran against spring data and then re ran when using spring io checks against the latest version however this does seem cause some headaches in transitive versions it also does not make it easy to follow the best practice of being on the latest and greatest ultimately think we should update all of our versions to match the spring io versions and then create additional testing to verify our minimum versions as described in
1354,thanks for the pr this is merged into master now keep them coming
1355,thanks for reporting this and submitting pr this is now merged into master and should be visible in the snapshot docs session docs current snapshot reference html guides boot html boot running the next time the documentation is published within the next hour
1356,thanks for the pr unfortunately this doesn quite resolve the issue since we need to ensure that our documentation is updated specifically the docs src docs asciidoc guides boot adoc projects spring session blob ba eb ee docs src docs asciidoc guides boot adoc needs to update the spring configuration session docs current snapshot reference html guides boot html boot spring configuration section to remove the it would be good to replace it with something like note spring boot automatically creates in production environment you need to ensure to configure your jedisconnectionfactory bean to point to your redis instance would you mind updating the pr to contain the documentation updates too afterwards can merge the pr thanks again
1357,hey updated the docs will make sure to check them in future pr
1358,thanks for updating the pr your commits afc dfacbf eea aafc cd are now merged into master note ended up adding little polish projects spring session commit fa bf to the documentation feel free to review and provide any feedback you might have
1359,looks good look forward to helping out more on this project
1360,thanks for the quick pr we want to ensure to include tests for every code change can you add few tests to cookiehttpsessionstrategytests ideally we would have some additional documentation just before httpsession restful apis session docs current snapshot reference html httpsession rest remember feature doesn exist unless it is documented do you mind adding that to the docs src docs asciidoc index adoc projects spring session blob master docs src docs asciidoc index adoc you can generate the documentation using gradlew doczip and look in docs build asciidoctor html
1361,sure can certainly add some docs by the way added test to the commit
1362,thanks once we get the updated docs can double check everything and merge the pr thanks again
1363,hey any progress on the docs just in the middle of porting an application to spring session that requires max age on the cookie
1364,sorry haven had time to work on it yet also noticed gradle doc generation fails with java saying failure build failed with an exception
1365,could maybe provide pr with the required documentation changes to get this merged if could provide guidance on the level of detail required is something like the following enough or do you also want code samples cookies cookiehttpsessionstrategy session docs current snapshot api org springframework session web http cookiehttpsessionstrategy html provides the mechanism for overriding default values of the cookie associated with the http session the following values are configurable name the name of the cookie the default value is session maximum age the maximum age of the cookie in seconds this value has the same behaviour as javax servlet http cookie setmaxage setmaxage int the default value is
1366,any comments on my suggestion re documentation for getting this merged
1367,thanks for offering to document this there does not need to be sample application but think we should have an example of how to customize it in both xml and java configuration within the reference please note that all code should be tested too you will find the code from the reference is in docs src test java docs projects spring session tree master docs src test java docs and then the reference includes the code that has been tested
1368,given the code requirement how would pull work do need to fork repo and work create pull against that if fork the main repo assume my build would fail until this pull was merged
1369,thanks for the fast response go ahead and create new pr with multiple commits one from and one from yourself with the additions once we accept the other pr we can close this one
1370,thanks for the great request trying to aggregate all the feature requests for cookies so we can solve this problem more holistically therefore closing this in favor of which takes this feature into account
1371,thanks appreciate your hard work on this
1372,thanks for the pr this is now merged into master
1373,thanks this is merged into master
1374,thanks for the pr wonder if it might be better to use the bom plugin you created to ensure the spring io versions are used in the first place thoughts
1375,unfortunately that ll create circular dependency as you want to use the bom from the version of the platform that spring session will be included in the plugin the best answer we have at the moment
1376,seems like we have circular dependency between the platform versions properties and spring session already specifically before do release must run the spring io tests which use the platform versions properties to determine the versions of the dependencies for the tests is there reason this is much different than using the platform version properties to control the versions that spring session uses up front
1377,you could use the dependency management plugin to obtain spring session dependencies versions from an already released version of the platform but the spring io plugin provides additional benefit it lets me check that spring session is compatible with an upcoming version of the platform as can easily run your tests on java and java using the versions from the upcoming platform release
1378,this is now merged into master
1379,thanks this is merged into master now at df ef efbc ae also added test to ensure that this doesn happen again
1380,added this httpsessionstrategy implementation based on your suggestion on how multiple sessions can be handled by custom httpsessionstrategy thanks the idea is pretty much the same as described in issue except the current session cookie stores the session id instead of the index we probably want it to use an index so that we can also extract the index from the url more on that later am not sure how practical this implementation is because it relies very much on the user request including or excluding appropriate cookies to either initiate new session use an existing one delete an existing session etc the thought is that you would need another filter that interacts with the same api that switches which session you are using secondly having separate implementations for multiple sessions vs single sessions seems bit odd too but may be thats ok this is good point perhaps we should switch this around so it works with single implementation the problem is then we complicate our apis we want the required api for someone to implement to be as simple as possible basically the minimum api should be dead simple so others can provide custom strategies can you share some thoughts on how automatic url rewriting can help with that in this implementation absence of or empty current session cookie suggests the need of new session so instead may be request parameter can be specified and sessionrepositoryfilter can invoke another method on httpsessionstrategy to indicate that new session is needed regardless of existing valid session the idea is that the url would contain an index of which session we should be using this way user could have multiple tabs open at the same time all leveraging different sessions if the current session is indicated by cookie then there can only be one session per browser since cookies would be shared across multiple tabs if this implementation isnt practical please suggest how you are thinking the api can be expanded to accommodate multiple sessions would love to help think this is good start at an implementation but it may be bit early the main reason as mentioned previously in the apis will be changing so we shouldn implement the current api but wait until is completed fortunately the thought and comments you have put into this issue will be quite helpful when implement in the meantime lets leave this open as guessing lot of your work can be easily converted into working with the new apis once they are rewritten
1381,have pushed support for multiple sessions into master aef bdcbda for demo please give the users projects spring session tree master samples users sample try
1382,thanks for the pr this is now merged into master
1383,thanks for the pr this is now merged into master
1384,forgot to mention that tested using java hibernate
1385,this looks great thanks before merge this did you sign the contributor license agreement if not please do
1386,hi signed the license agreement
1387,hi have rebased and merged this pr into master thanks again for your contribution hope you don mind that have also taken the liberty to port the relevant changes to the branches would be very grateful if you could take the time to create couple of junit tests that show the use of the feature and guard against future accidental removal as last remark next time you open pr maybe the one containing your junit test make sure to open it from topic branch that you name according to the relevant jira issue branch hbx instead of your master branch thanks again
1388,hi totally fine with you porting to branches ll try to do my best to add some coverage this weekend will use topic branch next time thank you
1389,haven tried to use this in production but this seems like it solves the immediate issue of casting in the presence of proxies think this is better solution than mine to the immediate problem and probably the question of whether equals should check that the class is equal is different pr
1390,merged into and cherry picked into and master
1391,in an effort to integrate this and verify the problem had cherry picked commits fe and into the branch but the resulting test run is successful so am not sure if the test properly demonstrates the problem of if maybe missed something
1392,ve added and corrected the documentation in the two beans associated with the test cases to explain how they are used to demonstrate the problem and the fix hope this makes sense now
1393,ok grok the changes now and it looks good only think that instead of using fixed pre created beans the tests that demonstrate the problem should use the hbm java generation to generate some code that eventually results in test that fails as long as the changes from commit ae are not applied let me look at how we can deal with this
1394,also am wondering why you think that it is more correct to have identical classes in the equals implementation than using isassignablefrom to check for instances of the class interface not sure if it will ever happen but if you define the semantics of equals to be that the ids of both entities should be the same then the actual class should probably not be identical
1395,wasn sure about getting hbm java to revert to the old behaviour without adding code to make it an option when it probably shouldn be perhaps we could use hbm java to generate the new beans and verify that they work as expected
1396,thought for while about the equals implementation and not sure either way was swayed by the default implementation that eclipse generates which checks that the classes are the same if the classes aren the same then it not equal think that fair actually in hibernate situation don think there case where an object would be considered equal and not be the exact same class but it would be possible to setup two separate entities in the database with separate id spaces and have the implementation class of one extend the other in which case isassignablefrom would be true and the ids could match as they re separate entity tables and we get false positive so guess now am pretty sure that it needs to be equal classes
1397,see two problems with this approach the first and obvious one is that you add dependency on the hibernate runtime for the generated entities which is something we want to avoid the second problem is that think that in the context of orm the equality does not at all require that the classes are the same equality in the context of the entities implies that they represent the same row in the database two objects that are instances of different classes in the same class hierarchy can very well indicate the same row in database and hence should be able to be equal these two reasons is why prefer to keep the instanceof check have tried to solve the problem as understood it and opened would you be able to take look at this pr and see if it solves the problem you are experiencing the first commit of this pr adds two tests that show the problem the second commit is the fix
1398,can currently see situation where the orm provides two objects that represent the same row in the database that don have the same class after resolving proxies could you elaborate on that case
1399,have integrated in the and master branches as for the class equality issue please take look at let continue the discussion there if needed
1400,the patch looks good did you sign the cla
1401,yes signed the jboss cla already for the hibernate orm project
1402,merged into master and cherry picked on the branches and thanks
1403,created jira for this pr
1404,thank you did not have access to jira at work your issue description is not fully correct the bug only occurs for the string
1405,does the fact that you closed the pr mean that the issue is fixed
1406,sorry don know what happened here don remember closing this ticket either way the issue isn fixed
1407,ok cool ll take look at it tomorrow finally op apr om heeft daniel heinrich notifications com het volgende geschreven sorry don know what happened here don remember closing this ticket either way the issue isn fixed you are receiving this because you were mentioned reply to this email directly or view it on github tools pull issuecomment
1408,now know commited the fixes to my master branch and based the pull request on that worked on another bug fix last week so reset the master branch and created branch for this patch github somehow choose to close the pull request after removed the commits from my master branch through the reset will create another pull request with the new branch and notify you here in second
1409,apologies for the bump but love to see this integrated and or work towards integrating it
1410,sorry ive been on pto just going through backlog could you look at this
1411,have updated my patches for the branch as am now using this with hibernate have been using these patches in production for years now and still believe they are critical for hibernate tools love to get these into the main release if we can happy to discuss more not sure what the difference between master and branches is haven updated this pr yet but here is the tree that have updated tools tree proxy equals
1412,hey karl am very sorry that it took such an awful lot of time to take look at this am happy to integrate these patches but would it be possible to rebase this branch and solve the conflicts just create new branch called hbx either from or master and cherry pick the relevant commits that both show and solve the issue and create your pr from this new branch this pr may then be closed at the moment the only difference between and master is the use of the currently versioned snapshot versus the master currently versioned snapshot branches of the hibernate orm project
1413,can find it here right now but didnt you mention the failing testcase was not included or something why was that
1414,did mention that it was actually just that wasn sure how to write the test in this project and was hoping to get away without doing it ll make the effort
1415,sorry kind of stuffed up basing this branch off my previous pull request number of these commits are better covered in that pull request would like to close this one and redo it
1416,should use snapshot here
1417,this makes stateful instead of stateless probably should have had this from beginning but not sure how this will affect users that have extended this class or relied on it being stateless
1418,doh am sorry been using that to deploy releases to my local nexus so we could use it in my projects didn mean to include this file in the commit ll try to undo it
1419,yeah the alternative of passing in the configuration exploded into something quite complex looking it all comes down to the need to lookup another persistentclass in javatypefromvaluevisitor so perhaps there another way to do this
1420,
1421,could you add testcase for this not fully following what case you fixing
1422,can see you have testcase in the jira now just add that as testcase in the test package you are already making updates to
1423,thanks max ve just pushed the test case to the repo this demonstrates that the fix works it doesn demonstrate the failure case when you use class that has been generated with the property referencing the concrete class rather than the proxy
1424,hi max further to our comments in have created test case that demonstrates the issue that am trying to solve in this pr
1425,have noticed that have in fact broken some of the other tests because my proxy change is also used when generating an hbm xml which is wrong investigating
1426,okay have pushed new commits onto this branch destroying what was there because investigating the other test cases broken lead me to discover much simpler way to implement this fix no more stateful cfg javatool changes only to basicpojoclass no broken tests new tests to demonstrate the solution and the problem may we start over
1427,apologies for the bump but love to see this integrated and or work towards integrating it
1428,have updated my patches for the branch as am now using this with hibernate have been using these patches in production for years now and still believe they are critical for hibernate tools love to get these into the main release if we can happy to discuss more not sure what the difference between master and branches is haven updated this pr yet but here is the tree that have updated tools tree many to one proxy
1429,hey karl am very sorry that it took such an awful lot of time to take look at this am happy to integrate these patches but would it be possible to rebase your this branch and resolve the conflicts just create new branch called hbx either from or master and cherry pick the relevant commits that both show and solve the issue and create your pr from this new branch this pr may then be closed at the moment the only difference between and master is the use of the currently versioned snapshot versus the master currently versioned snapshot branches of the hibernate orm project
1430,should add that one test fails testnoconninfoexport org hibernate tool ant anthibernatetooltest with npe in the data source provider implementation
1431,that npe is in the drivermanagerconnectionproviderimpl and it is handled differently in hibernate and it is caused by there being no url configured but there is leftover hsqldb url in there which fails as we re trying mysql so think this test might need to change for upgraded hibernates
1432,the test is to verify hibernate does not fail wrongly this sounds like regression bug in hibernate for me
1433,right it appears better in it throws an exception about not being able to open the connection it doesn appear the test expects this
1434,no it is worse in both and the test is testing it can work with hibernate models without having an active connection configuration
1435,so do we need to open an issue with hibernate for this
1436,do you have jboss repositories configured in your settings xml surprised master is failing for you since it works for me
1437,have in my settings xml with releases and snapshots enabled the issue was the eclipse equinox jar that doesn appear to exist anywhere perhaps it in your local repository ve just done branch for which only required small change in error logging tools tree on at am max rydahl andersen notifications com wrote do you have jboss repositories configured in your settings xml surprised master is failing for you since it works for me reply to this email directly or view it on github
1438,so it actually did fails now can you take look please
1439,sure ll take look
1440,thanks for the patch hibernate is for jpa so that is something we need too for jboss tools we still need to have hibernate tools working for previous hibernate versions because they are included in eap seems the only way to do that because of the api changes in hibernate is to create new hibernate tools that we use against only but are you saying you saw problems when compiling against even hibernate
1441,did see issues compiling against hibernate but they will probably be easy to resolve happy to go back and do that do you think it would be practical to create branch for and perhaps if necessary those could then be available for download maven etc on at pm max rydahl andersen notifications com wrote thanks for the patch hibernate is for jpa so that is something we need too for jboss tools we still need to have hibernate tools working for previous hibernate versions because they are included in eap seems the only way to do that because of the api changes in hibernate is to create new hibernate tools that we use against only but are you saying you saw problems when compiling against even hibernate reply to this email directly or view it on github
1442,if we need one for each version that is what we ll have to do
1443,hey karl again sorry that it took such an awful lot of time before took look at this is this something that still needs to be integrated in the branch or is the fix obsolete in the meantime is there corresponding jira issue for it and what about your prs for the and branches would those still be needed
1444,no problem from memory this work was required to get the tools working with hibernate so if they work with it now then there no need for this pr anymore think what the plan with supporting old hibernate versions branch for each version
1445,interesting wondering if it was not possible to do this as pure template you use for the generic exporter to avoid mixing java with groovy
1446,reused the pojo templates as needed about of what they had already and my thinking was that any future changes to pojo generation would likely apply to pogo generation as well happy to rip out my stuff though and make new set of pogo templates but will continue extending the pojoclass tree as there lot of functionality in there that need but also happy to use delegation if you guys prefer
1447,to get this in it would be awesome if you actually added test that would fail without this change add your usecase in one of the hbm tests should be sufficient
1448,sounds okey but can we get test for it showing the usecase
1449,sorry after ten month is hard to remember ll try to figure out why needed this
1450,any chance you got test schema test case you can add in to the oracle tests
1451,hi sure will give it try have managed to create simple test but for now it failing on the table null assertion maybe you could give me hint if forgot something with kind regards thorsten sch fer
1452,first guess oracle uses uppercase for its tables so use identifier oracle reverse engineering
1453,sorry for not responding earlier but not following what it is you are trying to here got an example of what is not working plus the fix seem to change many other things formatting dependencies etc that seems unrelated any chance you can rebase it and clean it up
1454,looks good but dont grok why mysql connector needs to be added for every run shouldnt it just be in the mysql profile
1455,this was incorporated in pull request
1456,this was incorporated in pull request
1457,this was incorporated in pull request
1458,related tools pull
1459,nice
1460,this was integrated and applied with pull request
1461,looks to make sense no idea how that could have been missed for so long got unittest to go with this thing so we don forget
1462,this was integrated and applied on with pull request on with pull request on with pull request
1463,it supposed to be is regular expression is jdbc syntax for the same thing is only used in file name globbing which is not what was intended here
1464,not sure understand are you saying that the existing code in jdbcreader java is correct because it doesn seem to work as expect it but then maybe my expectations are completely wrong of course it has happened before
1465,yes see jdbcreader as being correct it converts to which matches what the syntax is in all examples schema mys
1466,disregard this pull request chose the wrong branch to pull it into
1467,it supposed to be is regular expression is jdbc syntax for the same thing is only used in file name globbing which is not what was intended here
1468,this was integrated and applied on with pull request on with pull request on with pull request
1469,added junit test please do not forget to switch properties to to check
1470,the new test just tests when there is how about the case where there is space in the catalog name removing quoting would harm that case
1471,do not believe this is proper fix for this issue
1472,closing this pull request as it doesn seem to solve the issue completely
1473,thanks could you provide test case patch too max sent from my phone on at shane stclair reply github com wrote these changes add support for columntopropertygeneration method in reverseengineeringstrategy also updated org eclipse jdt org eclipse jdt core to org eclipse tycho org eclipse jdt core since that what could find in the available repos you can merge this pull request by running git pull tools property generated support or you can view comment on it or merge it online at tools pull commit summary added support for columntopropertygeneration in reverseengineeringstrategy file changes pom xml src java org hibernate cfg jdbcbinder java src java org hibernate cfg reveng defaultreverseengineeringstrategy java src java org hibernate cfg reveng delegatingreverseengineeringstrategy java src java org hibernate cfg reveng reverseengineeringstrategy java src templates hbm property hbm ftl src testsupport noopreverseengineeringstrategy java patch links tools pull patch tools pull diff reply to this email directly or view it on github tools pull
1474,added simple test to defaultreverseengineeringstrategytest not sure if there should be more or where to put additional tests since column to property generation isn implemented for reveng xml
1475,was wondering exactly how to use it if the reveng xml doesn support it
1476,to use it you would extend the delegatingreverseengineeringstrategy and override the columntopropertygeneration method here very old example on how to use your own reverseengineeringstrategy reverse engineering strategy in html and here the default columntopropertygeneration public propertygeneration columntopropertygeneration tableidentifier table string column return propertygeneration never
1477,max informed me that this pull request seems to break api it will not be included in the upcoming release if needed we will have to find proper solution for one of the upcoming releases
1478,releated issue
1479,this was integrated and applied on with pull request on with pull request on with pull request
1480,tried to apply this all tests fail when doing mvn clean install something is not right
1481,applied this as is except setting pom xml to snapshot for now
1482,this pullrequest has much more than just changes could you please be sure you have rebased with master and only include the relevant changes before submitting thanks
1483,new pull request is created instead of this see tools pull
1484,dima what is the diff between this pullrequest and your pullrequest
1485,closing this since using tools pull for instead
1486,completely safe and correct so merging in
1487,reopened because faulty apply
1488,this was integrated and applied on with pull request on with pull request on with pull request
1489,escaping occurs during artifactcollector formatting thus the unit test is not failing and we are obviously not fixing or testing the real bug here commented on jbide for more feedback
1490,closing this for now since test patch is invalid
1491,when changing this to if true return comment the test still passes
1492,look at for details
1493,safe merging in
1494,obsolete see tools pull
1495,outstanding really glad someone stepped up and worked on this curious if you use the new metamodel the old classes org hibernate mapping are still available but will be removed prior to final
1496,no steve we still use the old metamodel but if you update hibernate core tests so they use new metamodel this would defence us from possible mistakes
1497,more clean pull request is created
1498,this was partly integrated and applied on with pull request on with pull request on with pull request the autodiscovery part was commented out until we have verified this properly
1499,hm not hibernate commits in this pull request where they are will close this pull request
1500,not going to apply this since it will conflict add dependency hell for tools with envers hibernate handles this better done in tools pull
1501,now irrelevant
1502,secon commit fixes hsqdb query problem with table name which should be quoted
1503,fix and applied
1504,authorization is required by hsqldb
1505,create role dba now is required by not hsqldb databases which doesn have it built in the excaprion will be gulped
1506,do not forget to remove the role
1507,removed dialect check method
1508,why is new role needed none of our other tests needs uses that whats so special about this one src test org hibernate tool hbm defaultschemacatalogtest java seem to work fine without it
1509,done
1510,looks good to me did you check that you execute the exact same number of tests with the new inclusions if so it good to merge
1511,would be clearer wouldn it be optimized anyway
1512,same question as had myself couple of years ago no it seems jit doesn do that specific kind of optimisations is one of the operations we should always avoid according to our friends on openjdk
1513,weird but good to know
1514,actually there an issue with url encoding discovered when trying to create patch for signer java ll try to solve that issue first since it may make this pr bit simpler
1515,and got excited about nothing once again see we can safely review this pr
1516,looks good to me already had to tune it before that when we upgraded es
1517,merged thanks
1518,great merged this
1519,jenkins retest this please
1520,rather extreme but ok merging
1521,merged thanks
1522,merged from performance perspective not particularly fond of us creating map of parameters to then later convert them all and create new map of parameters but that having sub zero priority right now so let not spend time on it we ll revisit if we see it actually problem during perf tests thanks
1523,merged thanks but that having sub zero priority right now so let not spend time on it we ll revisit if we see it actually problem during perf tests it especially low priority given that we re talking about bootstrapping code executed at most once per analyzer definition granted bootstrapping code shouldn be inefficient but copying dozen maps is drop in the ocean
1524,it especially low priority given that we re talking about bootstrapping code executed at most once per analyzer definition granted bootstrapping code shouldn be inefficient but copying dozen maps is drop in the ocean ooops ok missed it was in the context of bootstrap good thing merged then
1525,shouldn it be boolean and not string
1526,yes it should but it out of my control elasticsearch just sends back string even though originally sent boolean
1527,merged thanks
1528,don think it clear what static boosts mean what about we simply remove this paragraph think we should stop highlighting what actually works in elasticsearch and shift to mode in which the user is reassured that pretty much everything will work the same with excetions we should highlight the exceptions or maybe just simple the annotation will work but since it deprecated we suggest to use query time boosting
1529,it will be removed starting from lucene support for this approach will be removed in apache lucene since version
1530,static why not simply say we recommend to use query time boosting instead
1531,static same as above
1532,static same as above
1533,done
1534,as matter of fact query time boosting through our dsl is static at least if we give static the same meaning as in the static index time boosting section above given field will have the same boost for every document regardless of the content of each document anyway rephrased this so that don mention static at all
1535,will replace with the same warning as in the dynamic index time boosting section
1536,don think it clear what static boosts mean it the exact same wording as in the mapping section think we should stop highlighting what actually works in elasticsearch in general say yes but here the point was that and are closely related so didn want one to be confused with the other or maybe just simple the annotation will work but since it deprecated we suggest to use query time boosting done
1537,done
1538,right missed it force pushed an update fixing it
1539,merged thanks
1540,let the batched work being let the batched work be unless the beatles spoke bad english
1541,force pushed an update addressing your comments on the operator list it should be more clear now
1542,nice since remarks have been addressed too merged it
1543,let keep it consistently capitalized to clarify that it the proper name of the feature
1544,could you list also how to do prefix phrase precedence fuzzy
1545,it definitely better but bit worried that users will understand that and or etc can be used as operators in queries while in fact they cannot maybe something like and using or using not using would avoid any risk of confusion
1546,was just changing it following the above remark of sanne and the use of list to present each option
1547,nice it fixed the problem on my laptop on the error handling side though couldn help but notice that this particular test pattern appears at least three times in our tests org hibernate search test engine worker workertestcase org hibernate search test performance optimizer optimizerperformancetest org hibernate search test performance reader readerperformancetestcase think the last one won behave well in case of failure just as optimizerperformancetest before your commits perhaps we should fix readerperformancetestcase too or maybe we could use concurrentrunner in all of those tests it should behave well when errors occur plus iirc we spent some time on it in order to make sure it produces usable error messages with suppressed exceptions and such if you disagree ll just merge it
1548,thanks for merging to note our resolution regarding the other problems yes they should be fixed as well or maybe even evaluated for removal but not related with this specific issue and for now we need to focus on the tasks we ll cross that bridge when we ll have problem
1549,merged thanks
1550,retest this please
1551,merged thanks
1552,can one of the admins add this person to the trusted builders reply with add to whitelist or ok to test
1553,ok to test
1554,could one of you add test as well hate this to have regressions in the future if noone has time for that right now happy to merge this but let open jira to make sure test is added in this development cycle
1555,if possible like you to merge first because it really blocking me to complete integration of elasticsearch and hibernatesearch in fully secured environment ll have look for the test asap but first need to see understand how your tests work can you also tell me what kind of test you like me to add
1556,if possible like you to merge first because it really blocking me sure that fine also the test is possibly complex in this case and seems to have some ideas already normally ask contributors for test but this is complex one let leave it to him
1557,working on the test right now
1558,still on it it will require some hacking in the meantime could you please ping me when you signed the cla thanks
1559,ve signed it mvincent it com
1560,managed to set up test but due to hsearch it won work on ci it does work locally though fails before the commit passes after the commit so added it anyway but disabled it we ll have to take look at hsearch thanks merged the fix and snapshot version with this fix will be available tomorrow after the nightly build
1561,great thanks all
1562,snapshot version with this fix will be available tomorrow after the nightly build on side note in order to use snpashots you must use the jboss maven repository see settings example xml search blob master settings example xml for an example of how to do that
1563,unless mistaken this should be elasticsearchhostssniffer default sniff request timeout
1564,do have to do another pr after ammending
1565,as you prefer typically we just force push on the same branch that will replace the current code in the same pr
1566,ve just ammend commit search commit cacf ccdaac fe ff ec
1567,merged thanks
1568,if understand correctly this does not just avoid redundant delegation this has two side effects we ll take cdi as an example before this change if someone tried to use hibernate search during cdi beans initialization the call would block because hibernate search wasn initialized yet which would result in deadlock since hibernate search waits for cdi to be initialized after this change such calls will simply fail so in that respect guess this change is good thing before this change if someone tried to use hibernate search just after cdi beans initialization before hibernate search had the time to fully initialize the call would block and resume once hibernate search is fully initialized after this change such calls will simply fail and that is not good thing so in the end rather add configurable timeout to the join so we can get the benefits of your patch without its downsides
1569,sounds like you re assume that the two frameworks hibernate cdi are booting in two different threads running fully in parallel and in parallel with the end user app is that the case with the added synchronizations ve been addressing visibility concerns in case the two frameworks are initialized by different threads potentially something some containers will do but don expect the application to be considered deployed until all frameworks have been initialized strongly expect there to be guard there let me try explain that in other words ve addressed cross thread visibility concerns not timing the happens before rules should apply and think we ll need to have faith in the containers
1570,we ll need to have faith in the containers having experienced the thrilling task of adding wildfly cdi integration test have mixed feelings about this statement grin don expect the application to be considered deployed until all frameworks have been initialized if that true we shouldn bother with blocking calls anywhere not even in initializingintegratorstate for instance should we also you seem to assume that the container itself will take care of integration as we know this will probably take years if it ever happens so suspect users will have to take care of that for time and they may not have access to as much internals as wildfly developpers preventing them to control the execution order as delicately anyway must admit don clearly see why this commit is useful thought it was simply code cleanup if you think it necessary then let go with it we ll wait for ticket confirming there is problem before we try to fix this problem
1571,yes think that reasonable tradeoff it not my typical style to push for integrating problem and let the users report issues but in this case think quite confident on taking the risk as believe the timing issue is really not problem in practice as this won be run in parallel the reasoning is that the variable will be read very often and beyond volatile read it all getting expensive we ll revisit this of course if someone managed to proof wrong on the parallel timings
1572,the initializingintegratorstate is different as it is more likely triggered by our own integration points relying on orm listeners this specific case however is meant to serve user threads which should really not be free to run before we re initialized in case that happens think having the error message is clearer than deadlock to defend against dodgy integration patterns
1573,this is not strictly necessary since the resulting name for this entity will be under characters anyway but guess it won hurt on side note we have quite few other nested classes in other tests and they seem to be doing just fine without explicit table names we ve probably been lucky not to reach the character limit until now
1574,we have similar setup org hibernate search test query sorting sortonfieldsfromcustombridgetest configure map did you leave it on purpose
1575,not finding that are you sure
1576,looks like that the one had already modified in the same commit
1577,right sorry
1578,rebased and merged nice cleanup
1579,rebased and merged with one additional commit integer int missed on the first review
1580,it was preexisting but think we should use hibernate search not search maybe comma after as of hibernate search would be in order
1581,looks like short and short were already mentioned above in the numeric fields
1582,maybe allows to define
1583,datebridge to be consistent with above and maybe mention too
1584,this looks pretty arbitrary and weird do we really have safeguard for this
1585,done
1586,you re right it was pre existing mistake ll remove those types from the list above
1587,done
1588,done
1589,can see why we would enforce this truncating ids in any way is bad idea but no this doesn seem to be enforced anywhere the only places we call org hibernate search annotations datebridge resolution from are the date calendar bridge providers and we don check anything about the id maybe should simply remove this warning after all you can also shoot yourself in the foot by assigning any custom field bridge to the document id
1590,yeah if we don have specific code to check for this let remove this
1591,funny we have another transient failure when testing this one jenkins retest this please
1592,also expect library like this to have some out of the box support for such kind of tests it doesn seem so fortunately it easy to do ourselves we already have utility just for that removed the increase in the refresh interval in my commit and amended the commit to use polling on my machine executing only the discovery test takes about while executing the simple test takes about so we wait for approximately knowing that the sniffer cannot be configured to sniff more often than every second which is quite healthy if you ask me don think we can improve much on that side note using mvn surefire test instead of mvn test in the commands gave in the pr description will make it run faster since it won compile the tests each time
1593,merged thanks
1594,why do you think raising the refresh time would help
1595,needing this test to wait is annoying and would accept that if it was the only way but we all know that these figures are going to fail in some other slightly different condition is there no way with this mock library to wait until the condition is satisfied confident you could code that yourself but also expect library like this to have some out of the box support for such kind of tests
1596,because if the refresh occurs less often it will be less likely to occur between our two requests the two calls to dopost which will still execute just as fast anyway that was just to be safe but you re right polling will be more efficient
1597,right amended my commit
1598,rebased and merged thanks
1599,an an
1600,think it would be nice to explicitly add the case when you add new entities
1601,merged thanks
1602,merged
1603,thanks removed the asarray suffix will merge and backport as soon as the ci build succeeds
1604,merged and backported to and
1605,hmmm it looks weird to limit this to directory based indexes would expect this method to work even for ram based indexes then realized that it was already existing code but thought would mention it anyway
1606,is the fact that it returns an array really important wouldn include it in the method name and must admit preferred the old method name altogether getfulltextfilter it more to the point and doesn add useless information
1607,ram based indexes are directory based they use ramdirectoryprovider see basedirectoryproviderservice
1608,but you re right this comment should disappear eventually why the hell create todo in the code without corresponding ticket created hsearch
1609,getfulltextfilter is much too vague we could be returning half dozen different things and none of them would be handled the same way query filter fulltextfilterimplementor fulltextfilterdef fulltextfilter etc ll remove the asarray suffix though
1610,can one of the admins add this person to the trusted builders reply with add to whitelist or ok to test
1611,thanks good idea
1612,merged thanks
1613,merged thanks
1614,merged
1615,merged thanks
1616,resolving
1617,merged thanks
1618,looks good but didn we have more warnings
1619,the others are either questionable or false positives suspicious reference equality test of boxed types we re just checking whether both variables are null so it okay possible confusion of local and field the first one is legit but solved in another pr and the other ones reflect standard practice in our codebase so don think it problem self assignment was already solved in previous pr seems the analysis is out of date result of integer multiplication cast to long doesn seem that critical to me but can solve it if you want non synchronized override of synchronized method false positive we only override methods to throw unsupportedoperationexception so we don need synchronization
1620,nice merged
1621,could you rebase it and trigger new build please
1622,done build in progress
1623,very nice merged it ve added one additional change it trivial so don believe it needed review but feel free to have look cce db ca af
1624,jenkins retest this please
1625,jenkins retest this please
1626,merged thanks
1627,probably not worth it for this but at one point suppose we will need to inject the dialect in the conversion mechanism
1628,you re right we managed to avoid it until now though and if we can avoid it until we may not even have to do it at all not sure we ll want to support lucene es conversion once hibernate search apis don depend on lucene anymore
1629,more seriously great that you found this guess this will was right in your way when trying to benchmark the es integration yes it wasn big deal as we have other bottlenecks to solve first but this was low hanging fruit and it would become problem eventually
1630,thanks applied your suggestions and merged didn change the interface it in the impl package anyway
1631,can this even happen we re talking about jsonobject which would contain null entry that seems really strange expect nosuchelementexception instead maybe you should rather check if the entry set is empty
1632,think constants should rather be defined in final class with private constructor so that nobody will start extending the paths interface but if you really think this good idea
1633,this should be removed it is not used think it copy paste mistake
1634,for your information incomplete javadoc such as this triggers warnings in the build logs not big deal but if we could avoid that kind of things to stack up
1635,same as above
1636,it would be bit clearer if we used dedicated indexidentifier type able to return simple string or an encoded one mainly because it really not obvious why the name is url encoded both here and in the indexmanager but it would once again require two hours of find and replace so think we ll stick with this
1637,yes agree with that and actually was tempted to do it but for sake of getting this done stopped polishing to do such thing at another round
1638,what the worst thing that will happen if someone implements it
1639,ll remove the javadoc feel it easier to read the one line of code than understanding the explanations tried to draft
1640,merged thanks
1641,merged thanks
1642,wow the jdk build now works fine great merged thanks
1643,merged
1644,the ci is down right now because of the upgrade to maven think but the travis build succeeded ci org yrodiere hibernate search builds
1645,the ci is down right now because of the upgrade to maven think fyi upgrading maven took seconds and doesn require any downtime to clarify we didn update all builds to use the new maven but it an opt in so most builds are still using whatever versions they where using before
1646,this pr looks good and since it urgent ll merge it already but confused about why we need those empty jars in the other modules now assuming that indeed having any module not produce an empty jar will fail the build then why not declare this in the parent pom as in my other pr finally do we need to review the skipdeploy attributes we don want to release these empty jars which were added with the previous pr
1647,merged
1648,this pr looks good and since it urgent ll merge it already but confused about why we need those empty jars in the other modules now actually that the opposite what did in the previous pr was to skip the production of jars when there is nothing to put in it when skipifempty is true no jar will be generated if there is no classes resources to put in it this is an improvement for most modules since we won publish empty useless jars anymore we mostly used to for pom packaging modules and for test jar artifacts in modules without tests but in the case of the distribution module this module had no classes and still had jar packaging maven doesn like when module has jar packaging and doesn produce any jar so the build started to fail this pr solves the issue by switching the packaging of this module to pom which seems to make sense
1649,yes agree it makes sense to switch to pom in this specific case confused about why it necessary to skip the jar building of the other modules though and if so why not declare it on the parent pom rather than re defining the rule in each individual pom incidentally several other modules are broken now sending another follow up pr
1650,confused about why it necessary to skip the jar building of the other modules though because we don want to publish empty jars especially empty tests jars in modules where there are no tests do we and if so why not declare it on the parent pom rather than re defining the rule in each individual pom well that what did added default rule to not produce any jar when there nothing to put in it and overrode this rule where we need to produce empty jars for some reason
1651,because we don want to publish empty jars especially empty tests jars in modules where there are no tests do we fair enough it indeed pointless but remember we only publish what gets deployed to maven central we can skip deploy on case by case and still use the jars for other purposes during the build well that what did added default rule to not produce any jar when there nothing to put in it and overrode this rule where we need to produce empty jars for some reason oh right sorry got confused by some other patch ve been reviewing doing the opposite
1652,just rebased this on otherwise the build will just fail
1653,rebased
1654,merged thanks
1655,sorry about that think we better fix this by declaring the distribution module as pom module though this won change anything for potential consumers as the assembly will still produce tar gz and zip artifacts we just won have an empty jar artifact anymore which seems to make sense on it it currently building and ll submit pr as soon as it succeeded
1656,closing for now superseded by feel free to reopen if necessary
1657,merged thanks
1658,nice solution merged
1659,merged thanks
1660,don you want to do the same for es as it an embedded instance it uses the same configuration as the rest of our tests though maybe the configuration for es should be in sharedtestresources src main resources log properties
1661,no not too interested in spending time polishing the es tests speaking of resources actually think they shouldn be in src test main resources at all as we don load them from our testsuite in fact had them in the root before but you moved them in the resources having them in sharedtestresources seems interesting but that task for another day not sure if the es plugin can deal with that
1662,speaking of resources actually think they shouldn be in src test main resources at all as we don load them from our testsuite created
1663,looks good merged
1664,thanks applied and backported to all actively maintained branches and master
1665,merged thanks
1666,ci re test this please
1667,jenkins retest this please
1668,thanks good ideas applied them then actually differentiated the methods to make sure there no mistake and merged
1669,shouldn this be filedeletefailureignored don get why we would use an abbreviation here
1670,given the new behavior maybe renaming this to trydelete would make sense
1671,thanks yes that just typo
1672,ok in that case would deprecate it
1673,merged thanks
1674,merged thanks
1675,lovely pattern in infinispan we have similar one believe that what had inspired gustavo to add that condition which you now removed but it wasn the full thing believe gustavo tried to keep it simple not super convinced of the step parameter it not simple to guess an adequate value when writing the test so it would be even better by using auto detection for example hard code an initial step of nanoseconds and double it at each failed attempt none of the above are blocking problems have merged it already if it weren for the fact that all integration tests are failing
1676,thanks fixed the assert methods and the deployments everything runs fine on travis now let wait for jenkins to agree
1677,nice merged
1678,in this case it fine but generally speaking remember that such queryparser is not threadsafe people will have to be careful when reusing helper methods from this class
1679,why is this check called at least one but verifies exactly one
1680,right afraid the problem is widespread though because ve already seen this pattern the query parser as test attribute multiple times
1681,right got confused with the other assert method which didn implement right either fixed both methods
1682,feel free to merge still looking at the new query dsl api pr on thu apr yoann rodi re wrote approved this pull request looks good to me can merge or are you releasing you are receiving this because you were mentioned reply to this email directly view it on github or mute the thread
1683,merged thanks
1684,retest this please
1685,ci test this please
1686,about the failure we had sooner related to malformed http response created jira
1687,jenkins retest this please
1688,merged thanks
1689,merged thanks
1690,merged
1691,merged
1692,it seems there are problems with this version of byteman the build fails and it not the usual performance issue see search pr org hibernate hibernate search orm testreport junit org hibernate search test query initandlookup criteriaobjectinitializerandhierarchyinheritancetest testjoinsareonlyonusefulentitytypes
1693,interesting have been keeping this upgrade locally for long time and simply thought it was time to merge as never had problem with it thanks ll look at it
1694,my bad it consistently fails locally as well reported the regression to byteman ll figure out workaround
1695,byteman beta was released to solve our problem rebased
1696,note just rebased this on since one commit was already present on that other pr the fix about queries on dynamically sharded indexes that don have any shard yet
1697,builds are failing because of some timeouts because the ci is slow ll send pr to fix that first
1698,sent pr to fix the random test failures and rebased this pr on the other the build should be bit more stable now
1699,rebased on master following the merging of
1700,why do you say that the validation on consistent similarity is useless it can be configured in many ways some are legacy and we had several cases in which people would get themselves into trouble before introducing this check commits like dd should best be handled in separate prs so that it doesn slow down distract from the issue we re supposed to solve
1701,why do you say that the validation on consistent similarity is useless it can be configured in many ways some are legacy and we had several cases in which people would get themselves into trouble before introducing this check only see two ways to configure it see createsimilarity the index level configuration and the default configuration since entities are not taken into account when retrieving the similarity only the index and the more global searchconfiguration don see how we could have two entities in the same index with different similarity maybe there was legacy way to configure similarity and it got removed commits like dd should best be handled in separate prs so that it doesn slow down distract from the issue we re supposed to solve hey this pr depended on two other fixes which did address in separate prs so don always put irrelevant commits in my prs ll try to be more careful though
1702,jenkins retest this please
1703,jenkins retest this please
1704,about the similarity you re right sorry got confused there were several other options with focus on the entity but like you suggested they have been removed already remembered deprecating them but forgot we got rid of them
1705,it taking me long time to wrap my head around the changes but like it so far reminiscent of various things that wished to do in the past but it never was good time in terms of branch maintenance on the kind of dispatchers not seeing any specific problem but remember that there more going on than simple streams of changes and transactional changes we need to keep in mind also that in different circumstances there are strong expectations about ordering of fired events order needs to be strictly maintained even in async mode which means we can just delegate to parallel executor at any stage to the contrary when doing batch rebuilding massindexer the strict ordering is burden which prevents fast index rebuilds however even in that case there are some operations which need to be kept in order the purgeall before the massindexer runs need to happen strictly before the subsequent tasks any final optimisation needs to happen after the last less critical but still desirable finally we need to allow for the transactional operations and massindexer operations to happen concurrently say the massindexer is processing and in parallel some database changes are performed our listeners will have to stack up the events fired from the transactional changes making sure that their relative order is maintained and also that they overwrite any in flight work from the mass indexer in the past it seems had clear picture in mind of the backend design as it was simple enough to reason about this and see that it was correct can no longer load the whole picture in mind by simply reading the source code so think we should eventually add some tests at least to ensure the ordering properties adding such tests is unrelated with this pr but felt like sharing the concern already as this new design is making some subtle changes in the area
1706,about the dispatchers to be honest just moved some code around so could reuse it someplace else didn intend to make any change to work orchestration to the contrary when doing batch rebuilding massindexer the strict ordering is burden which prevents fast index rebuilds however even in that case there are some operations which need to be kept in order but agree work orchestration is quite complex and thus might need some more tests to the contrary when doing batch rebuilding massindexer the strict ordering is burden which prevents fast index rebuilds however even in that case there are some operations which need to be kept in order it seems to me that such synchronisations in the work stream are what added recently with org hibernate search backend impl batch defaultbatchbackend awaitasyncprocessingcompletion after sending purgeall command we would call this method and so would we before final optimizations
1707,great work ve merged it applied two additional trivial commits
1708,traditionally we ve been more forgiving about case preferences and trailing whitespaces could you change this strategy from using map to attempt ignore case equals on each enum name and trim the propertyvalue in advance as well
1709,ideally we want some of the configurations to use an intentionally inconsistent case in property value to make sure it works
1710,can just trim and lowercase the property value before passing it to get it will achieve the same effect will do
1711,rebased just now
1712,there are few behavior changes that may prevent us from backporting this pr good points neither change seems too bad but in such cases we can simply agree to not backport it and re evaluate if there demand for it
1713,in such cases we can simply agree to not backport it and re evaluate if there demand for it certainly agree with that especially since this fix is the best could do when trying to fix another bug focusedcommentid page com atlassian jira plugin system issuetabpanels acomment tabpanel comment which unfortunately cannot be fixed without breaking the apis think so basically nobody asked for this specific fix but since it was already done
1714,very nice cleanup merged
1715,shall we call this getsourcepropertyname tend to try disambiguate the entity properties from the lucene fields by calling them respectivelly property and field in such cases
1716,ah sorry definitely distracted this is an index field
1717,in this specific case we are actually speaking about field see here search pull files cb ea bb diff bb fbcd af br and the getfacetquery method few lines below to see why maybe source isn the right term though attached origin not sure how to call it it basically whatever we pass to forfield
1718,ah sorry definitely distracted this is an index field ah you were too quick yes
1719,nice merged
1720,very nice thanks merged
1721,why are you changing this indexation is not the correct term it needs to be indexing know it wrong in some other places but don make it worse
1722,instanceof is mod
1723,ah it just moved code ok
1724,think just copy pasted the comments from fulltextsession which guess was more recent failed to see this difference
1725,jenkins retest this please
1726,jenkins retest this please
1727,the build seems to fail on jenkins but not on travis for some reason having look right now
1728,jenkins retest this please
1729,after rebase we only have the same timeout issues as on other branches including master marking as ready for review
1730,nice one merged thanks
1731,there no need to use this prefix we automatically pre mask all read properties with an appropriate prefix more importantly we should never force this specific prefix usage as other integrators use custom prefix for the search component but since see this was an existing problem ll take the pr and send follow up fix
1732,the query caches its own execution running it second time will always return the same resultsize as above ll change it to use new query instance
1733,ll follow your suggestion and change the jira to flag fixed for only on we can always backport later if need be
1734,merged thanks
1735,merged
1736,jenkins retest this please
1737,merged thanks
1738,merged
1739,merged thanks
1740,like to see if we can simplify this pr bit ll start by pushing ae ffe cd dc cf to master already done probably would have sent preamble pr upgrade spring integration tests to use recent spring boot version but ok don change it now as almost done understanding it all
1741,rebased just now
1742,thanks let see if can merge this today on fri apr yoann rodi re wrote rebased just now you are receiving this because you were mentioned reply to this email directly view it on github or mute the thread
1743,just rebased to remove the empty test noticed search pull pullrequestreview it was not needed and to resolve conflict in the logger nothing changed apart from that
1744,cool thanks
1745,superseded by
1746,think there something missing here ll dive back into it soon and will try to add proper test if necessary
1747,jenkins retest this please
1748,merged backported thanks
1749,merged backported thanks
1750,rebased it should work fine now
1751,are you sure that making lucenelogcategories extensible rather than an enum isn bit too much was it because you didn want to add elasticsearch specific categories to the enum in hibernate search engine see it as nice move as other extension points like infinispan will be able to create their own categories but don think an external integrator will actually do this as they ll have their own logging conventions on the other hand the previous enum approach had the nice effect of giving us and users single place to look to have list of all categories
1752,are you sure that making lucenelogcategories extensible rather than an enum isn bit too much was it because you didn want to add elasticsearch specific categories to the enum in hibernate search engine yes see it as nice move as other extension points like infinispan will be able to create their own categories but don think an external integrator will actually do this as they ll have their own logging conventions did not expect them to do this either to be honest just wanted to avoid leaky abstractions internally on the other hand the previous enum approach had the nice effect of giving us and users single place to look to have list of all categories it doesn seems very hard to get listing of all categories ctrl shift with my cursor on the constructor of logcategory does the trick in eclipse do you want me to revert the change find this cleaner but either way it will work
1753,do you want me to revert the change find this cleaner but either way it will work no it ok just wanted to explore the reasoning with you btw don expect all users to always work with sources open so we ll have to create section in the documentation ll merge this when back from lunch didn go yet
1754,so we ll have to create section in the documentation pre existing loggers are already documented here us html single optimizing the query process and here us html single lucene infostream and added section in the elasticsearch docs in this pr but maybe we should have dedicated section and make those just mentioned redirect there
1755,but maybe we should have dedicated section and make those just mentioned redirect there yes that what meant no rush though just adding ideas for eventually reorganizing the docs
1756,merged thanks
1757,to measure durations don use system currenttimemillis use system nanotime
1758,right fixed
1759,ve updated the modules structure think this reflects now what we want although to capture issues with the sniffer module ve opened the follow up hsearch commons codec was missing as well
1760,merged thanks
1761,the rest client doesn depend on gson unlike jest so this should be moved to org hibernate hibernate search elasticsearch just above
1762,same here gson should not appear here
1763,actually the property should be elasticsearchsnifferversion or we could remove elasticsearchsnifferversion from the pom if you want but not sure the release cycles are synchronized
1764,gson should have remained here we use it but the rest client does not
1765,the dependency to javax xml bind api should be moved here since only the sniffer uses that
1766,don think we depend on javax xml bind api only the rest client does the sniffer actually
1767,no our own hibernate search elasticsearch requires it too
1768,that not how the modules work since we use it it should be in module we depend on the intent of the isolation is to avoid transitive dependencies we do export all of hibernate search elasticsearch to the end user classpath so that people can use our public api contained in there but we don want them to be able to use our gson jar as it might conflict with their own copy
1769,good point but don want to expose it to our users ll move gson to its own module then
1770,hum ok thought this was about laying the groundwork to contribute wildfly module to elastic but it seems was confused
1771,right in single class elasticsearchdatehelper
1772,yes ll separate gson as mentioned in the above comment it doesn belong in either module
1773,but think we still need to add dependency to jackson module here even if we leave it in hibernate search elasticsearch the class org elasticsearch client sniff elasticsearchhostssniffer depends on jackson classes to parse json unless modules visible by the hibernate search elasticsearch module are automatically visible by its dependencies now which module to depend on not sure think org jboss resteasy resteasy jackson provider would do the trick but maybe you ll want to be more precise and just depend on org codehaus jackson jackson core asl which should be enough
1774,was just looking into that unfortunately the wildfly provided module uses jackson which is way older than what the sniffer expects and that our fault as we depend on an old version of avro which requires that version of jackson trying
1775,jenkins retest this please
1776,jenkins retest this please
1777,jenkins retest this please
1778,superseded by
1779,having some failures in the es module failed tests searchfactorytest testindexmanagerstoppedafterindexinitializationexception expected but was searchfactorytest testindexmanagerstoppedafterindexmanagersearchfactorysetupexception expected but was searchfactorytest testservicesstoppedafterindexinitializationexception expected but was searchfactorytest testservicesstoppedafterindexmanagersearchfactorysetupexception expected but was tests run failures errors skipped
1780,jenkins test this please
1781,merged
1782,not important as it not an hot code area but it looks bit wasteful to add them all to new collection you could just close them all btw should we invoke each close method in try catch log ignore block
1783,wanted to use stream but decided against it in order to be able to backport guess ll add good old closeall method btw should we invoke each close method in try catch log ignore block ll try to do that ideally we should throw an exception if anything goes wrong and still close every reference but in order to do that we should do it everywhere and unfortunately we don
1784,what the need for this rule it doesn look like you need this flag you can just omit the condition in the second rule
1785,would actually do something here so that the test can assert that the searchexception was thrown flip boolean so that you can assert on the boolean after the catch block otherwise you have the risk that the services are indeed released but just because the failures didn happen being extra paranoid here because the byteman rules tend to break without us noticing when they rely on specific signatures
1786,right in this particular test this isn necessary removed
1787,there is no reason for the services to be released if the failure didn happen since we don close the factory in this test but ok added check
1788,closing since added your commit to
1789,jenkins retest this please
1790,jenkins retest this please
1791,jenkins retest this please
1792,jenkins retest this please
1793,the commits look good would like to merge this but the build is still failing with similar error caused by java io ioexception too many open files at sun nio ch ioutil makepipe native method at sun nio ch epollselectorimpl epollselectorimpl java at sun nio ch epollselectorprovider openselector epollselectorprovider java at java nio channels selector open selector java at org apache http impl nio reactor abstractmultiworkerioreactor abstractmultiworkerioreactor java more shall leave the pr open it possible that we simply have to raise the limits
1794,have theory couldn verify yet but suspect the problem is simply caused by the fact that the reactive threads of the async http client aren shut down aggressively but just scheduled to close gracefully this graceful shutdown happens rather quickly but it should take at least full second as the selector needs to wake up first and has timeout by default so we don notice any leak when debugging single test yet see threads over jconsole during the testsuite the testsuite takes longer than but since the amount of threads to be shut down quickly raises in the hundreds the scheduler isn going to wake them all up as aggressively so this wakeup time becomes longer coumpounding the problem think we either find way to block and wait for the shutdown to have happened or we just avoid the explosive scheduling issue by setting lower setting in the testsuite elasticsearch src test resources hibernate properties hibernate search default elasticsearch max total connection
1795,interesting you commit actually reduces the number of leaked file descriptors for each search factory from to it better though don understand why times less threads translates into times less leaked file descriptors on the other hand setting max total connection to means we end up with ours tests only being able to perform concurrent calls to elasticsearch which supposedly was what made performance tests fail on the ci and is what tried to solve in my first commit so bit torn here it seems we end up exactly where we started from and had some luck with the ci ll try to see what those leaked file descriptors are maybe it can shed some light on the issue
1796,just rebased to also implement the improvements in testelasticsearchclient still investigating but one intersting thing is that the testelasticsearchclient does not leak threads for some reason the threads of its restclient are correctly terminated while those of the main restclient the one used by the searchfactory never are restclient close is invoked in both cases though
1797,here everything should be fine now the build seems to run fine no timeout on ci slave even after removed my initial commit that raised the number of reactor threads so guess the two remaining commits should be enough
1798,looks good testing one last time
1799,thanks merged
1800,tracked as
1801,merged with couple minor changes applied to master and
1802,it weird to talk about servers now that everything is all cloudy and such
1803,imho it important to mention that it the default behavior
1804,in the context of user reading this on the pdf calling it page is bit confusing no
1805,you still pay for additional servers on aws you even pay for es when using it as service feel free to propose re wording but think the point is not negligible
1806,good catch
1807,true that force pushed better formulation
1808,well you can run your es service on the same vm bare metal server feel free to ignore this part but thought it was bit weird
1809,yes you can do it but it will require higher performance server just to deal with the several dozens of additional threads and you ll need some more for the efficiency lost in the transport serializations of requests and responses
1810,actually think your change would be misleading the option is per index specific you can choose different property value for each index
1811,to be honest made it consistent with the others above
1812,ooops ll change it in the other direction thanks for spotting
1813,shouldn we add this to org hibernate search cfg environment default services map noopnamedresolver is not used anywhere so don think it is serving its purpose right now
1814,good catch forgot about that not that missing or having it would make much of difference
1815,build failing error mnt jenkins workdir workspace hibernate search pr integrationtest osgi karaf it src test java org hibernate search test integration osgi systemtest java string literal expressions should be on the left side of an equals comparison equalsavoidnull error mnt jenkins workdir workspace hibernate search pr integrationtest osgi karaf it src test java org hibernate search test integration osgi systemtest java string literal expressions should be on the left side of an equals comparison equalsavoidnull
1816,looks like underestimated the complexity of implementing this check fixed
1817,looks like the aws slaves need reconfiguring as well local machine name ip ec internal needs to resolve to localhost address most commonly as or it resolved to fix your network configuration to be able to run the osgi integration tests reliably it is possible though that osgi tests will pass even if this fails
1818,pushed new approach this should cause less trouble
1819,looks much safer indeed grin merged thanks
1820,merged thanks
1821,merged
1822,merged
1823,usability question which combinations of refreshafterwrite and sync fields of elasticsearchindexmanager belong to which use case do we need to clarify in the docs which combinations are suggested finally do you think any of these combinations are nonsense and should issue log warning
1824,thanks for the summary it good to think about these combinations agree with most of your thoughts but to make sure we re on the same page remember that by default we send operations to the backend after the database changes are committed so your first case sync refreshafterwrite is described correctly as you state but remember that even if an error gets synhcornously reported it won abort the database changes essentially there third parameter for these combinations happens within the transaction vs happens after commit for the case async refreshafterwrite which you agree makes less sense believe that es won actually perform any periodic refresh on its own if no changes have been applied so even that minor benefit is not really there essentially we should agree that this mode is quite pointless should we warn against it by logging warning tempted to not to as it quite harmless other than being less efficient but who knows is someone finds better reasons to do this
1825,merged opened as an optionally follow up happy to wait with it as suspect our own experience is about to improve in this area
1826,suspect this isn dealing with the errorhandler in the usual way the org hibernate search exception errorcontext is able to highlight single failure our of group where the group usually was meant to be all operations from the current transaction it probably not easy to apply the errorhandler in the usual way as it normally would handle failure as something like out of operations we failed on somehow suggesting that wasn executed in this case the various operations might have been applied out of order so you should collect all success fail operations to forge new kind of error state
1827,wouldn consider this blocker and not inclined to invest too much time on this as we want to evolve the errorhandler api since errors are handled individually users aren going to miss them just add comment
1828,you are right but afraid this problem is more general even in the synchronous work processing we have one error context per work not one per list of works see the two executesafely methods in elasticsearchworkprocessor there definitely something fishy here opened ticket also added commit to at least mention the issue in comments and rebased on master
1829,merged thanks
1830,note we should backport this to and maybe also to
1831,just spotted another case where we have similar problem will push an update
1832,done added test and fix for hsearch
1833,nice merged in master backporting now
1834,backported to both and branches branch needed little change as session didn implement the jpa flavoured getresultlist method yet thanks
1835,can one of the admins add this person to the trusted builders reply with add to whitelist or ok to test
1836,ok to test
1837,hi thanks for sending patch appreciate you have good intentions to help but won apply this change as it not necessary it doesn fix any problem the code quality improvement is questionable we prefer the code to be readable if you want to help may suggest to try having look at some of these issues filter some of these might be simple enough for someone new to the project but it possible wrong and they might be actually hard feel free to try any of these and change issue if you get stuck also pick something you re most familiar with for example wouldn try to upgrade jgroups if you re not familiar with using jgroups already
1838,any reason to use the name params instead of just params maybe you used an automated tool
1839,there is params variable present used eclipse to refactor code params matches more closely to params value
1840,think the fix is missing on the elasticsearch side currently the test passes because the analyzer isn used in your schema so the analyzer is instantiated as lucene analyzer and then it reaches your check but if you assign the analyzer to field in the sample entity the analyzer will be correctly detected as an elasticsearch one and the check will be bypassed added commit to demonstrate the issue feel free to squash it suspect that org hibernate search engine impl configcontext addanalyzerdef analyzerdef xannotatedelement might be better place to put the check but suppose you can also duplicate the check on the elasticsearch side
1841,pushed new version applying this validation more generally across the code it also changes an spi but think that for the better as like to keep the annotations out of spi signatures
1842,re pushed as had mistake in javadoc
1843,moved to spi
1844,jenkins retest this please
1845,merged thanks
1846,since this is mainly intended to be used by service providers maybe we should move this class to org hibernate search cfg spi
1847,ok didn mean to add is an an api actually impl even better
1848,you can but that one more osgi problem because this must be used in the elasticsearch module
1849,think it works too well the ci is failing
1850,ok interesting ve sent pr to the ci configuration to improve its configuration let hope travis is having better default
1851,launched job for your commit on travis we ll see ci org yrodiere hibernate search builds
1852,unfortunately it doesn work on travis either testlocalhostresolution org hibernate search test integration osgi systemtest time elapsed sec failure org junit comparisonfailure local machine name testing gce cc fa does not resolve to fix your network configuration to be able to run the osgi integration tests expected but was at org junit assert assertequals assert java at org hibernate search test integration osgi systemtest testlocalhostresolution systemtest java
1853,thanks that suggests they are using quite old version of debian ll find an alternative way to check for sanity which isn this strict
1854,jenkins retest this please
1855,looks good don think we ll want to test too many implementation details of the rest client but it good to have the basics so the failed nodes are no longer contacted do you know for how long expect the client to eventually try to see if they recover merging
1856,the code handling the blacklisting time is located in deadhoststate it seems to start with minute and then increase with the number of failures to up to minutes private static final long min connection timeout nanos timeunit minutes tonanos private static final long max connection timeout nanos timeunit minutes tonanos
1857,note just pushed an update which added the commit when validating elasticsearch schemas use default as default value for analyzer references and the next one noticed the issue while working on something else and since the pr hasn been merged yet
1858,jenkins retest this please
1859,jenkins retest this please
1860,this should be ready for review about the builds the previous ci build passed but the one before failed for no apparent reason so launching another one to see if it was transient failure that can be blamed on the slave concurrent build or whatever or if there is randomly occurring problem in hibernate search itself
1861,jenkins retest this please
1862,jenkins retest this please
1863,jenkins retest this please
1864,there are some problems with the maven profiles if run with profile elasticsearch or elasticsearch the start goal is no longer valid tried to change it to the new goal runforked as in the new es profile but then there another failure relating to not being able to find org elasticsearch plugin delete by query zip the plugin versions and tasks need to have stricter separation among profiles
1865,so this situation is not new it been here since introduced the elasticsearch profiles the elasticsearch profile is enabled automatically when the testelasticsearchversion is not defined had to do this because just making this default profile means the profile will only be enabled when no other profile is so enable docs and you lose the elasticsearch profile unfortunately property is not defined for maven means not defined explicitly and definitions in explicitly enabled profiles do not count so in your case you had both the elasticsearch and the elasticsearch profiles enabled and suppose the elasticsearch profile defined the testelasticsearchversion property but elasticsearch defined its own plugin configuration which won work for several reasons so if you want to run tests you must either stick to the instructions in readme md and provide the testelasticsearchversion explicitly mvn clean install pelasticsearch dtestelasticsearchversion or disable the default profile elasticsearch explicitly mvn clean install elasticsearch elasticsearch ll see if can change the poms to make things easier but doubt it
1866,ah right sorry forgot about that no rush with improvements like to integrate this first and the readme instructions are good enough for now
1867,awesome work it merged added one commit to address couple of super trivial javadoc copy paste errors
1868,tried to organize the changes in atomic commits so that they can be more easily reviewed if you think should reorganize some of it so that it easier to review please say so ll see what can do ll need hint though nothing important but was confused by the change of directions in the second commit you introduce an noopbackendrequestresultassessor service but then it removed again not worth spending time to polish the commit history just mention it in as when notice such things on my own prs it typically suggests ve been experimenting but didn re start with clear purpose
1869,nothing important but was confused by the change of directions in the second commit you introduce an noopbackendrequestresultassessor service but then it removed again yes it was either that or had to squash this commit and the following one but they have slightly different purposes maybe next time should squash them anyway
1870,maybe next time should squash them anyway maybe it tradeoff understand it not always worth to re work the commits extensively trust you on that only highlighting it to make sure it your choice and not by accident for the record having massive changes locally which never sent pr for as wanted to polish them more the reality is ll have to do the work over as waited too long and it easier to re do the work than fixing conflicts so lesson learned better to merge fast unless it easy see other similar cases now like elasticsearchdialectprovider guess you changed direction after we talked more about services
1871,org elasticsearch client sniff sniffer why is there support to create these things don see it ever being used probably missing something
1872,org elasticsearch client sniff sniffer why is there support to create these things don see it ever being used probably missing something it spawns thread that does all the work you don need to use it which is why we don we just create it and close it when it not needed anymore
1873,merged
1874,it looks like this wasn needed
1875,right added fixup commit will rebase autosquash when you re done reviewing don want to mess with the commit hashs until then
1876,they don have to can you qualify guess it missing something like to be sorteable
1877,was trying to say that if through the sort dsl you target fields that are populated by custom field bridges then those field bridges must implement metadataprovidingfieldbridge but see now that my warning isn right after the sort dsl example like it should be pushed an update and rephrased the warning bit is it better
1878,we also use the dist profile in the regular master job the dist profile only generates aggregated javadoc so you won have any issue if this particular javadoc is not included to be completely thorough when the aggregated javadoc is built it builds the javadoc of all the modules but it only reports errors for the modules included in the final output in the log file of the ci job you can see there was an error generating the elasticsearch javadoc but as it wasn included in the aggregated output it wasn reported in the release job we use dperformrelease true to generate the sources jars and the javadoc jars in hv they are disabled with an explicit maven javadoc skip true directive it should be tested but not sure generating the individual javadocs the aggregated one will take much more time as it looks like the aggregate task looks for already generated javadoc before generating them if it confirmed we would only have to add dperformrelease true to the ci job to be on the safe side
1879,thanks to keep building javadocs just correctly interested in keeping the builds fast locally during dev as that the moment we all might need quick experiments see no reason to disable such validations on ci jobs we re talking about couple of seconds right prefer to document switch for local builds default builds so that remember how can opt in to check for verifications
1880,it more like one minute more for the entire build no biggie imho ll update the ci jobs btw you don have ci job for branch ll create one too
1881,nice while on it create one for as well master is now
1882,right so created ci jobs for and master and runs with dperformrelease true to be sure the javadoc is ok and pdocumentation pdf to be sure we can generate the pdf doc we might have issues with special characters or things like that pr job runs with dperformrelease true jira also needs some love on the fixversion front but ll let you do that as you like it this pr should be included in master backported to as is adapted for but it shouldn be too hard
1883,pushed to and master
1884,well spotted maybe we should also update the lucene doc link to it seems there isn any javadoc for later versions though
1885,yeah tried and it wasn there so left it alone to be honest find it less disturbing to have rather than if we don have but dont really care
1886,core
1887,nice detective job
1888,core right it not
1889,yeah they were really way outdated ll push another commit
1890,merged thanks
1891,should be propertiesbased instead of propertiesbased
1892,don forget to also rename in the meta inf services file
1893,there was an inconsistency between the property name being documented vs the one being used hibernate search default elasticsearch discovery scheme hibernate search default elasticsearch discovery default scheme picked the second one hope it good
1894,merged
1895,there was an inconsistency between the property name being documented vs the one being used ha had trouble making my mind about this guess my subconscious didn agree with me thanks for spotting this picked the second one hope it good it currently bit less appropriate since currently there no way to define per node scheme but it also more future proof so let say it the best one
1896,good to hear because it released on wed feb yoann rodi re wrote there was an inconsistency between the property name being documented vs the one being used ha had trouble making my mind about this guess my subconscious didn agree with me thanks for spotting this picked the second one hope it good it currently bit less appropriate since currently there no way to define per node scheme but it also more future proof so let say it the best one you are receiving this because you modified the open close state reply to this email directly view it on github or mute the thread
1897,fixed the camel casing and merged
1898,should be setenablejpaannotationsprocessing no capital also given the setter just above shouldn it rather be setjpaannotationprocessingenabled
1899,not related to this pr but it seems we re introducing two different naming schemes in this class for option setters withmultitenancyenabled withidprovidedimplicit multipleinstances enablejpaannotationsprocessing no need to change this pr but just so know do you have preference
1900,thanks
1901,find the new name more suited for this specific case as it has an imperative effect on toggle you re right it inconsistent though think the only weak justification can think of is that the multi tenancy and provided id strategies need to be plugged in additional strategies to work
1902,rebased and merged thanks
1903,in my latest release announcement mentioned but indeed can find any reason why or shouldn work could you confirm this maybe should correct the blog post
1904,confirm it should work fine since actually tested the whole range
1905,thanks fixed the blog post
1906,thanks merged
1907,seems integration tests are failing we should have look
1908,retest this please
1909,it failed because there wildfly instance running on ci which wasn property terminated by some other job it works locally you can ignore it
1910,thanks merged
1911,jenkins retest this please
1912,think addressed all your comments and we should be on the same page regarding this feature the first commits should probably be squashed after review as for the build status the failure looks unrelated
1913,jenkins retest this please
1914,pushed new version squashed the first commits added one commit to rename useand added one commit to add lucene queryparser to osgi and distribution it was already present in the wildfly modules
1915,great work looks very good the only detail not convinced of is the starting point of the dsl qb simplequerystring it feels bit at odds with the other methods but not having better idea merged it proposal let post dedicated blog to present explain the feature and see if someone has better name to offer merged
1916,maybe we could call this native queries instead of plain text queries granted it would be less obvious that these queries are not type safe but the native keyword seems to fit quite well especially when you consider native queries in jpa also we may not allow the same syntax for every indexing service see you plugged this to elasticsearch simple query strings dsl simple query string query html whose syntax is similar but it probably has some differences so the word native would warn users about that issue
1917,following my suggestion above text would become nativequery or something like that native is java keyword unfortunately guess native or native are not something we can consider in any case think text is prone to error it gives the impression this is the only full text enabled query which is wrong understand what we re trying to say is that the query definition will be textual but it ambiguous some suggestions if you don like nativequery parsed querystring fromstring
1918,this is bit clumsy so defaultoperator operator and isn much better or and lack some context guess conjunctive disjunctive are tad too obscure if nobody finds better option think say we go for even though it far from ideal
1919,it default operator not defaultoperator it may work in es but ve seen cases where es dropped such undocumented syntax so we should stay away from such syntax
1920,this javadoc should be rephrased the value is parsed it not analyzed by the field analyzers only part of it is actually analyzed
1921,this javadoc seems wrong we can target any field regardless of its type we may want to warn users that queries apply on the bridged data though so dates may have weird format for instance
1922,we don pass the reference to the analyzer here if understand correctly this is because we can define per field analyzers in elasticsearch simple query string we only have one global analyzer parameter maybe this should be documented users may be surprised when they write searchfactory buildquerybuilder forentity myentity class overridesforfield foo somequeryanalyzer get text forfield foo matching blah blah createquery and the resulting query doesn use the overridden analyzer maybe we should also support the case where there only one field and throw an error if there are multiple fields with different analyzers
1923,maybe we should add something to the elasticsearch integration doc to mention that the syntax there is the one for simple query string which may be slightly different at least in the future
1924,from what can see above overridingremoteanalyzername is already in the analyzers set so we could just pass the set to the logger method if you made the parameter collection that is grin java analyzers add queryremoteanalyzername value added to the set here if queryremoteanalyzername equals originalremoteanalyzername if overridingremoteanalyzername null overridingremoteanalyzername queryremoteanalyzername same value put into overridingremoteanalyzername here
1925,should probably be build query from simple query string same for the below
1926,same here should be about simple query string rather than plain text query since we decided to use that terminology
1927,copy paste error here it not term query
1928,copy paste error here it not term query
1929,withandasdefaultoperator maybe this would make the dsl feel bit more natural simple query string on field foo with and as default operator matching bar it just suggestion don mean to argue about this ignore it if you don like it
1930,well spotted fixed
1931,yup fixed
1932,fixed
1933,fixed sorry about that
1934,fixed sorry about that
1935,done
1936,note this should be backported to
1937,looks good just push it
1938,merged great find
1939,jenkins test this please
1940,jenkins retest this please
1941,rebased and merged and backported to thanks
1942,jenkins retest this please
1943,thanks merged it including the deprecation agree with that
1944,merged thanks rename that method and removed the unwrapping
1945,there no need to unwrap guess the getfactory method should be renamed
1946,jenkins retest this please
1947,merged
1948,ve been trying to understand this but couldn figure out why this is necessary you all are the generics gurus in case we have to integrate this will it cause runtime compatbility issues with our previous signature think not as our api on the interface is still the generic one but that just makes it even more odd
1949,from what understand of type erasure my code should be strictly equivalent to the previous code can have try if you want compile small application against and then try to run it against
1950,thanks no need ll soon test this and other integrations with previous build of infinispan and quite optimistic ll merge this for now so we can move on but if someone knows be interested looks like java compiler bug but then again it would be quite coincidence that both javac and the eclipse compiler have the same quirk
1951,just force pushed an update to solve dependency convergence issue hope this will fix the build
1952,looks great thanks for researching this feels much better testing now
1953,there some problem with the dependencies guess caused by the exclusions you had to add tests in error jestclienttest authentication noclassdeffound com fasterxml jackson data jestclienttest multiplehosts noclassdeffound com fasterxml jackson datab jestclienttest simple noclassdeffound com fasterxml jackson databind json
1954,solved sorry about that so in the end there were two issues dependency convergence between wiremock and jest dependency convergence within jackson itself jackson databind depends on jackson annotations go figure which wiremock depends on
1955,merged thanks ll backport as well
1956,jenkins retest this please
1957,thanks merged
1958,actually not sure whether we should backport this to or not against what version do we want to check version the latest final or simply the previous final in stated the latest final which would mean we don want to backport this to
1959,ll not backport it those ships have sailed
1960,merged thanks
1961,thanks merged it
1962,and backported
1963,hostname and port looka like copy paste error
1964,confused about the usage here you say it has to be global but then you make an example which uses an index specific property understand the reasons just pointing out the explanation is oddly phrased
1965,same issue with here
1966,what if the username is non empty but the password is would that be valid or should we warn ignore
1967,so zero length string would disable it should we rather check for not null or is that going to be all the same for es
1968,would be nice to log warn at boostrap about this
1969,just copy pasted the phrasing from other properties that have been here for long time server uri for instance but practically every other es property has similar phrasing the example is supposed to make it clear that you can only use default and not an index name but you still have to include default because we were expecting to support defining it per index in the future think it supposed to mirror the phrasing for core hibernate search settings org hibernate search cfg environment locking strategy can be given globally or for specific indexes hibernate search default locking strategy simple hibernate search books locking strategy org custom components mylockingfactory or org hibernate search cfg environment index base prop name option for setting the base directory for storing lucene indexes when working with file system based directories to be given globally hibernate search default indexbase var lucene indexes replaced the current phasing with something like that without an example to be given globally only prefixed with hibernate search default cannot be specified per index hibernate search myindex elasticsearch username this limitation will be removed in future version of hibernate search is it better
1970,same answer
1971,right thanks fixed
1972,right added warning
1973,don see how an empty string username would make sense but ok changed that to null check
1974,users will get an authentication error if the password is invalid empty or non matching at some point we have to trust the backend
1975,
1976,my question was meant as question not demand
1977,ok sorry there is no particular check in jest or the apache http client so guess an empty string is propagated to es as is from my tests es rejects empty usernames curl xget password cat pretty error root cause type security exception reason missing authentication token for rest request cat pretty header www authenticate basic realm shield charset utf type security exception reason missing authentication token for rest request cat pretty header www authenticate basic realm shield charset utf status
1978,it seems there conflict ll rebase
1979,rebased on master just now
1980,could you add javadoc to the interfaces in the public api org hibernate search elasticsearch analyzer definition elasticsearchanalysiscomponentdefinitioncontext org hibernate search elasticsearch analyzer definition elasticsearchanalysisdefinitionregistrybuilder org hibernate search elasticsearch analyzer definition elasticsearchanalyzerdefinitioncontext org hibernate search elasticsearch analyzer definition elasticsearchanalyzerdefinitionwithtokenizercontext org hibernate search elasticsearch analyzer definition elasticsearchtypedanalysiscomponentdefinitioncontext
1981,great merged did two last changes marked the new dsl as experimental so we can change it in the next minor with more flexibility changed the jira description as the text implied we introduce service literally but it not one
1982,ok to change this but tbh always thought it was weird that you would create log instances traditionally we ve always just called them log as it not really constant it mutable object no reason to amend the pr of course
1983,true we could consider that loggers are output streams and as such they can be considered mutable as system out for instance ve always followed the rule static final capital case but there no real reason beyond consistency and it seems was wrong in thinking log is more common we have occurrences of static final log log vs occurrences of static final log log maybe should try and rename all those loggers to log one day in the meantime ll remember to name them log
1984,fyi we re renaming them to log in hv
1985,have no strong opinion for the sake of sharing my view the new log ones are the ones you created simply didn complain before but they looked odd definitely prefer smaller prs when possible as my main problem is not to find hours to review prs but to find contiguous uninterrupted hours
1986,why not using boolean lowercase
1987,was wondering why the string parameter has vararg option and the others don guess you have specific analyzer need example in mind
1988,could you use classloaderhelper instancefromname instead it would provide more sanity checks and errors consistent with other services
1989,if your seems typo if you
1990,same typo
1991,same typo
1992,same here could you use classloaderhelper instancefromname instead
1993,you need space just before set to value maybe better to quote the environment analyzer definition provider with single quotes not request must not throw any exception seems redundant also bit scary will the data center blow up if an oom happens in there optional alternative may be more useful to remind that public no argument constructor is expected
1994,reflectionhelper createinstance below allows the use of factory classes with the annotation it seems useful in this particular case but it won work well with classloaderhelper instancefromname did you mean should drop the support entirely
1995,interesting idea wasn thinking of the checks was thinking of are the ones provided by org hibernate search util impl classloaderhelper verifysupertypecompatibility class object class string org hibernate search util impl classloaderhelper checkhasnoargconstructor class string org hibernate search util impl classloaderhelper checkclasstype class string guess you can leave the it looks good to have it we probably should unify the two approaches in follow up improvement
1996,yes there are some analyzer types that have string array parameters didn see any with number or boolean arrays though but you re right we may as well avoid bad surprises ll add vararg version for other parameter types
1997,no particular reason fixed
1998,fixed
1999,fixed
2000,fixed
2001,fixed also fixed the similar message for elasticsearch new version id value property environment analyzer definition provider set to value is invalid the value must be the fully qualified name of class with public no arg constructor in your classpath also the class must either implement luceneanalyzerdefinitionprovider or expose public annotated method returning luceneanalyzerdefinitionprovider
2002,it looks like if interpreting this right that you expect the annotations to override the configuration could you explain the rationale
2003,btw the comment on line mentioned fetched from the integrator so that not consistent
2004,same question applies to the override test in luceneanalyzerdefinitionprovidertest
2005,about the comment the code actually fetches the analyzer reference from the integrator so technically the comment is correct the integrator is not the analyzer provider maybe you have better wording in mind the rationale behind override is you mentioned initially that we could have default provider that would add some common analyzers if we don make override definitions from the provider on existing applications the introduction of those default definitions might change analyzer definitions without the users knowing about it for instance if we introduce definition for standard and the user already has an named standard the other solution would be to forbid analyzer overrides completely throw an exception but then again that would mean breaking compatibility with existing code if we have default analyzer definitions also suspect we ll need to support overrides at some point especially when we ll handle index scoped analyzer providers
2006,test this please
2007,test this please nevermind this had been triggered normally
2008,are we absolutely sure that this class won change or more importantly get repackaged somewhere else before orm just asking because of what happened in orm it would be shame that some previous version of search ends up non compatible with new possibly micro version of orm just because we wanted to get rid of warning
2009,no we re not absolutely sure but this class has been there for years as soon as the final is out we ll set up ci jobs to discuss with the orm team any breaking changes getting rid of the warning is quite important both from performance and user confusion perspective and couldn find better solution one alternative would be to patch orm to introduce an explicit spi level contract for this but then you need to bump the requirement to prefer this solution
2010,ok then merging thanks
2011,jenkins test this please
2012,suppose you created this ticket following performance testing in infinispan have been busy with performance testing but actually not yet with infinispan it actually amazing what difference this small change makes we have flaw in our container based performance tests which triggers an occasional deadlock in when we re too fast after this change that test fails much more frequently from almost never to almost all the time on my pc at least
2013,have been busy with performance testing but actually not yet with infinispan so you used the existing performance testing project from our own code great after this change that test fails much more frequently from almost never to almost all the time on my pc at least suppose there no way to fix this maybe upgrade it would be shame if after merging this pr our ci became useless because it would always fail
2014,suppose there no way to fix this maybe upgrade it would be shame if after merging this pr our ci became useless because it would always fail yes let keep an eye on this hope not as ci is quite slow let not upgrade it more seriously yes fixing the test is on my watchlist so you used the existing performance testing project from our own code great have some more perf tests as well being developed will need to tidy them up eventually and share it currently mess of experiments and various branches trying different things different combinations of dependencies moving ahead we want to have nightly performance regression reports built by ci
2015,merged thanks we ll see how well the ci behaves and prioritize this locking bug accordingly
2016,jenkins test this please
2017,merged thanks
2018,pushed an improvement
2019,here an error noticed while reading through the changes from now on you shall be remembered as eagle eye yoann
2020,noticed as well but came to the same conclusions tikabridge has also an uncertain future imo like the functionality it provides but it brings too many dependencies like to use it as an example of how we might be able to tightly integrate with advanced bridges including possibly having their own annotations yet have these live in separate module so that we can isolate the dependencies properly this might be strong requirement for producing jigsaw modules in short not see the benefit on opening new tickets for now
2021,merged thanks and ok to look at tikabridge again for hsearch
2022,there an extra comma here
2023,thanks fixed
2024,if understand correctly we were trying to detect failures over loopback interface if so then yes this is probably bit too much for tests merged thanks
2025,yes that right even worse it was using the actual network interface for that while we are using the loopback protocol which is just static hashmap to avoid trouble with setting up the network interfaces correctly for it
2026,looks nice and to backport see no significant risk minor question why did you opt for org hibernate search elasticsearch impl jestapiformatter to be service couldn test build it yet still figuring out what wrong with my machine
2027,minor question why did you opt for org hibernate search elasticsearch impl jestapiformatter to be service because it needs access to gsonservice guess could have made it constructor parameter but users would still have had to request release an instance of gsonservice instead of jestapiformatter right now so it wouldn have been simpler in the end
2028,merged on master and
2029,fount found
2030,no need for the super here
2031,fixed
2032,ll remove it but seriously don know what the problem with this
2033,backported as well
2034,this is looking good to me do you want to try it out on infinispan to see how it works in practice
2035,trying it out now might now have results until later today as we have long planning meeting today
2036,any news on this
2037,doesn seem very dangerous ll merge it so we can keep working with minimal conflicts will be able to open bugs as needed
2038,actually it seems some plugin upgrades are required to support java code investigating
2039,it works at last here proof build based on this pr that also adds some lambdas ci org yrodiere hibernate search builds please note that also had to fix hsearch which involves many maven plugin upgrades didn test the release scripts not sure whether it possible to run those in an isolated environment
2040,todo when this will be merged see search commit edbb ee afb commitcomment
2041,interesting building this branch crashes my jvm good luck debugging that fatal error has been detected by the java runtime environment sigsegv xb at pc dd pid tid eaf jre version openjdk runtime environment build java vm openjdk bit server vm mixed mode linux amd compressed oops problematic frame libc so memcpy sse unaligned erms core dump written default location home sanne workspaces hibernate hibernate search root core or core an error report file with more information is saved as home sanne workspaces hibernate hibernate search root hs err pid log
2042,regarding the release scripts yes quite sure something will break there but since we plan to release cr and have no strict deadline we can cross fingers think we can in theory test the process by having jenkins not push to the repository its changes nor tags and then delete the directory from sourceforge not sure about the documentation say let just cross fingers
2043,it doesn crash mine using slightly more recent version of the jdk though the newest is by the way trying right now could you please try the most recent jdk and if it still fails provide the error report file thanks
2044,works for me even with with the exact same architecture are you able to reproduce it consistently
2045,almost consistently approximately chance it triggered last night on my workstation switching hardware now to rule out deeper issues not that have much choice need to be in the office today so laptop it is
2046,ok running the build on in loop ll keep you updated
2047,whoa same failure on the laptop that starts to look like unlikely to be related to hardware issues fatal error has been detected by the java runtime environment sigsegv xb at pc pid tid jre version openjdk runtime environment build java vm openjdk bit server vm mixed mode linux amd compressed oops problematic frame libc so memmove avx unaligned erms failed to write core dump core dumps have been disabled to enable core dumping try ulimit unlimited before starting java again an error report file with more information is saved as home sanne workspaces hibernate hibernate search root hs err pid log
2048,whoa same failure on the laptop still nothing on mine nothing of interest in home sanne workspaces hibernate hibernate search root hs err pid log
2049,merged thanks
2050,what is the value in not checking at all even not for index existance it not that hibernate orm can start when there no database
2051,what is the value in not checking at all even not for index existance the only use case see is mentioned in the ticket user wanting to create the index himself but after hs started strange but then guess using none is also quite strange to begin with it not that hibernate orm can start when there no database true but that not particularly because of hbm ddl so if we want to mirror that behavior we shouldn try to check the index existence inside our strategy
2052,ok yes had merged it after reading alex laptseu comments but agree it strange
2053,to be discussed the main argument against this change in my opinion is that we already released those artifacts in version for instance cr but really why would someone depend on these artifacts
2054,these modules already have the skip deploy property enabled did you find them in the maven central repositories
2055,you re right saw this folder search integrationtest osgi and failed to check inside but this is actually only remnant of some alpha releases sorry about that closing
2056,tried it locally works fine and looks great looking forward to be able to merge it
2057,it ready for review
2058,looks great one doubt didn double check is the output going to be in the same location especially for the release scripts to upload them still correctly
2059,merged thanks
2060,yes everything is already taken care of in the assembly and in the release scripts we already did one release of hv with the new documentation
2061,it so secondary feel bad to mention it but the other property names below have hyphen before the dir keyword so maybe this should be base output dir
2062,also about the value of this property didn you say you were going to remove the en us part in because we don translate the doc anyway for consistency
2063,yeah it mostly because don want to change the hierarchy on the website and the stable url of the documentations fixed the dir issue and small other one didn notice before and force pushed an update
2064,merged in exclusively
2065,thanks merged
2066,caution we ll have to merge this into too
2067,merged on both thanks
2068,jenkins test this please
2069,merged thanks just added two trivial commits
2070,there short version for that boolean getboolean org hibernate search fail on unreleased service
2071,the wrapper needs to be synchronized here like the original method which you re inlining now failing to do so might expose you to service instance to increment its usage counter during this stop operation for legitimate usage and yet throw the exception or log the warning it extremely unlikely as we be shutting down anyway but it in theory possible if service is needed to perform clean teardown ll fix that
2072,nice merged
2073,by the way the ticket states when doing this consider removing the workaround for issue hhh we added bytebuddy to the osgi dependencies in the features file as it was not listed optional did you decide against removing the workaround
2074,right decided to not remove that sorry should have commented by keeping bytebuddy people can choose if they want to use it
2075,we used to allow an on property of type to include paths that were not included in type see the test for an example think this should be forbidden mainly because it feels like violation of encapsulation to me but also because the current behavior of will not work well with such setups that very interesting point from one side agree with you that this shouldn happen on the other can see how someone needing to fine tune things might want to do that so if we fix it by not doing it we might need to introduce specific feature for such mapping you guessed right don think we should merge the second change at this stage could you split that in its own issue so then we can decide if it material for
2076,guess the culprit is to clarify if includepaths is narrowing filter or indicative when creating it strictly had the narrowing idea in mind but can see how the include paths terminology might have misled some people for what it worth realize this feature has been around for some time but still feel like it bolted on as we never revisited it from the first poc it been long time that want to rethink the whole documentbuilder process from scratch
2077,ve merged the first two commits which resolve the ticket don throw the useful work of the other two commits away
2078,this could be return pathsencounteredstate containskey path
2079,contains commits from september october last year
2080,thanks for the review addressed your remarks and added one more commit to solve
2081,merged thanks
2082,wouldn it be simpler to use fulltextquery here and in the next diff it would have the advantage of making fulltextqueryimpl also compatible with hibernate orm and lower but guess it irrelevant because we have to introduce incompatibilities in other places fulltextsharedsessionbuilderdelegator java in particular
2083,so reckon this is not the solution you found when discussing the issue with the orm team solved the issue bit differently when worked on the upgrade without knowing you already were working on it search commit be ea bd the build passes on travis ci org yrodiere hibernate search builds not sure it good enough but at least it wouldn require copying hibernate orm file
2084,judging from the code in org hibernate internal sessionfactoryimpl buildcurrentsessioncontext the value jta would achieve the same effect while being bit more future proof since jtasessioncontext is an internal class or is there particular reason to reference the class explicitly
2085,the commit message seems to be missing word maybe it hhh
2086,by the way shouldn all commits containing fixes related to the orm version bump be squashed into single commit including both the version bump and the fixes understood you wanted to always add tests after the fix so as not to confuse git bisect following the same reasoning having separate commits here could also lead to test failures when running git bisect or is it alright in this case
2087,agreed with steve that we should move the ddltransactionisolatortestingimpl java file to orm testing utilities so we ll be able to depend on it not least it means they ll fix the file in case there need for further changes so prefer to use plain copy of their class to that now know which class exactly need to move
2088,why would that be simpler didn put great deal of thought here as both alternatives are deprecated and we don even implement it
2089,or is there particular reason to reference the class explicitly yes me not knowing about the jta configuration option thanks ll change it
2090,right thanks
2091,didn mean it as strict rule more like something to keep in mind new rule there never are strict rules typically see value in keeping git bisect working fine this is more valuable in maintenance branches as the likelyhood for it to be broken anyway during large feature sprint is high there also value in keeping changes indipendent in this case felt keeping each step of the orm upgrade independent was making it clearer both for you to review and for future reference if you feel strongly about it can squash them all what do you prefer
2092,it would be simpler because fulltextquery is what we want to implement in this file while org hibernate query query is something we happen to inherit from indirectly and that has the same name as another class we already reference in the same file anyway it no important enough to argue about it let keep it that way
2093,don mind either solution just thought you may have overlooked this potential issue with git bisect but obviously you haven so let keep it that way
2094,it seems this import was being used in the javadocs and the build now fails see lines and
2095,it small detail really but since there already an issue with this commit queryimplementor already extends org hibernate query query and org hibernate query indirectly so we could remove the explicit extends org hibernate query query what do you think
2096,damn really need to figure out why such things don fail to me locally
2097,interesting going to try that as it looks promising fyi this wasn possible in earlier versions of orm but those spis evolved bit also based on our earlier attempts to migrate search
2098,thanks for the reviews think addressed your concerns is it ok to merge as is the additional comment is there search pull files diff dae fc ac
2099,
2100,jenkins retest this please
2101,jenkins retest this please
2102,totally unrelated but couldn we factorize this somehow mean method taking the classes as parameters you directly call in your
2103,puzzling check guess could find out the reasons by debugging the tests but this means some comments here could be helpful
2104,it definitely not the only puzzling thing in this part of the code but yes you re right ll add comment
2105,it probably something we should discuss for the annotation metadata provider magic became little too magic and obscure lately with es and obscure bug fixing
2106,actually this code is probably not even needed since the default hbm ddl strategy drops the schema when closing the factory ll remove the code and check that we really drop the schema
2107,just checked the tables are dropped automatically after the test so removed this code should take more care when copy paste
2108,infinispan does not implement this interface
2109,thanks ll try to see whether it actually possible for people to integrate custom implementation of entityindexbinding within hibernate search then
2110,cool that something wanted to do from the beginning happy we need to do it to fix real issue any objection against the spi change if not it good to go
2111,looks good merging
2112,frankly think this change is silly but since you all find it confusing ll apply
2113,great it even worked in the late evening merged
2114,jenkins retest this please
2115,jenkins retest this please
2116,jenkins retest this please
2117,jenkins retest this please
2118,test jenkins
2119,error compilation error info error home sanne workspaces hibernate hibernate search root orm src test java org hibernate search test query facet multivaluedfacetingtest java method createhsquery in interface org hibernate search spi searchintegrator cannot be applied to given types required no arguments found org apache lucene search matchalldocsquery java lang class reason actual and formal argument lists differ in length error home sanne workspaces hibernate hibernate search root orm src test java org hibernate search test query facet multivaluedfacetingtest java method createhsquery in interface org hibernate search spi searchintegrator cannot be applied to given types required no arguments found org apache lucene search matchalldocsquery java lang class reason actual and formal argument lists differ in length error home sanne workspaces hibernate hibernate search root orm src test java org hibernate search test query facet multivaluedfacetingtest java method createhsquery in interface org hibernate search spi searchintegrator cannot be applied to given types required no arguments found org apache lucene search matchalldocsquery java lang class reason actual and formal argument lists differ in length error home sanne workspaces hibernate hibernate search root orm src test java org hibernate search test query facet multivaluedfacetingtest java method createhsquery in interface org hibernate search spi searchintegrator cannot be applied to given types required no arguments found org apache lucene search matchalldocsquery java lang class reason actual and formal argument lists differ in length error home sanne workspaces hibernate hibernate search root orm src test java org hibernate search test query facet multivaluedfacetingtest java method createhsquery in interface org hibernate search spi searchintegrator cannot be applied to given types required no arguments found org apache lucene search matchalldocsquery java lang class reason actual and formal argument lists differ in length error home sanne workspaces hibernate hibernate search root orm src test java org hibernate search test query facet multivaluedfacetingtest java method createhsquery in interface org hibernate search spi searchintegrator cannot be applied to given types required no arguments found org apache lucene search matchalldocsquery java lang class reason actual and formal argument lists differ in length
2120,info starting audit home sanne workspaces hibernate hibernate search root orm src test java org hibernate search test query facet multivaluedfacetingtest java found two spaces lucenequery new matchalldocsquery home sanne workspaces hibernate hibernate search root orm src test java org hibernate search test query facet multivaluedfacetingtest java found two spaces lucenequery new matchalldocsquery home sanne workspaces hibernate hibernate search root orm src test java org hibernate search test query facet multivaluedfacetingtest java found two spaces lucenequery new matchalldocsquery home sanne workspaces hibernate hibernate search root orm src test java org hibernate search test query facet multivaluedfacetingtest java found two spaces lucenequery new matchalldocsquery home sanne workspaces hibernate hibernate search root orm src test java org hibernate search test query facet multivaluedfacetingtest java found two spaces lucenequery new matchalldocsquery home sanne workspaces hibernate hibernate search root orm src test java org hibernate search test query facet multivaluedfacetingtest java found two spaces lucenequery new matchalldocsquery audit done
2121,thanks it fixed the build now passes ci org yrodiere hibernate search builds removed the commit that added the travis yml
2122,ci retest this please
2123,jenkins retest this please
2124,retest this please
2125,retest this please
2126,jenkins retest this please
2127,jenkins retest this please
2128,jenkins retest this please
2129,jenkins retest this please
2130,jenkins retest this please
2131,about using what in hv collectionhelper validator blob master engine src main java org hibernate validator internal util collectionhelper java ok ll introduce another method to create an iterable though so we can use foreach loops
2132,ci retest this
2133,jenkins retest this please
2134,rebased and merged thanks
2135,think we usually use
2136,doesn look related to this commit does it
2137,would vote for not using array and introduce what needed in collectionhelper as we did for hv
2138,it related since the commit makes it more likely that arrays will be used but yeah it addresses different issue it just nitpicking anyway initializearray is no op
2139,seriously
2140,done
2141,jenkins test this please
2142,fixed variable name for consistency and merged multivalued multivalued thanks
2143,not really convinced it clearer what is parent
2144,facetting faceting in the commit comment
2145,facetting faceting in the commit comment
2146,any reason why they are not private wouldn expect them to be used elsewhere in the package
2147,yeah it not good idea to commit tests not working then ignore them it especially painful when you try to bisect something
2148,so we don expect array of primitives here
2149,feel free to suggest better name just meant to mention that it not the property we re processing that is multi valued but its parent property what important is that even though the parent is not multi valued the property we re processing still can be
2150,done
2151,see my other pr search pull does not work if we don also have which means supporting arrays of primitives for facets makes little sense if we have no support for arrays of primitives in the field bridges plus wanted to discuss the whole solution of array in single pr because it likely to raise some objections
2152,done
2153,originally used hibernate orm in the test and hibernate orm cannot instantiate private classes but you re right since the test doesn use orm anymore there no reason for making the class package scoped fixed
2154,ok ll squash that into the previous commit
2155,merged thanks
2156,jenkins test this please
2157,jenkins retest this please
2158,merged
2159,excellent seems way more comprehensive than what have expected love the good test coverage too merged
2160,merged this earlier sorry forgot to close
2161,thanks it should be ok now so we ll just wait for to give his opinion on whether we can merge this in cr after the holidays
2162,nice merged it thanks
2163,space after the dot would be nice yes this is the one for which expect crazy eyes
2164,let work directly on the analyzers here we don need to be on the reference level
2165,this looks like fine after checking other parts but found it bit suspicious you seem to put some special effort to collect all references into single collection to then invoke the initialize method on all references at once found that suspicious as relying on that would mean we could have some issues with dynamic discovery of new entities and hence new analyzers still it doesn look like the initialization method actually requires to have them all in one single collection
2166,as far as can tell the actual problem is we create new instances of analyzers when dynamically adding new entities even for analyzers we already discovered so we end up having multiple references to the same analyzer pointing to different instances of this analyzer it similar for elasticsearch guess it not critical unless you have dozens of analyzers and you dynamically add new entities every two seconds this is pre existing bug though not really the point of this pr solving it would require to initialize the configcontext analyzer registries with the content of the previous version of the search integrator actually did solve this bug in another branch working on for other reasons but that branch is currently blocked because of an unrelated ongoing debate over what to do next dev january html you can see the solution on my hsearch branch search commits hsearch the commit search commit af de ed ab cff dafd cf in particular and here search commit af de ed ab cff dafd cf diff cd to be very precise
2167,jenkins retest this please
2168,jenkins retest this please
2169,jenkins retest this please
2170,merged thanks
2171,didn mean to close this sorry
2172,it bit odd because lucenequerytranslator is definitely referenced from the elasticsearch module it is implemented in org hibernate search elasticsearch impl elasticsearchlucenequerytranslator are we sure the elasticsearch module is used in osgi tests
2173,are we sure the elasticsearch module is used in osgi tests sure the elasticsearch module is not tested within osgi previously though the lucenequerytranslator class was needed to be exposed initialized don remember even when not using elasticsearch
2174,that probably related to daa dc db where moved code using this interface from the orm module to the engine module
2175,right that probably the reason this works now good job
2176,merged thanks
2177,thanks merged
2178,if understand correctly this commit also makes the wrappers remain in the cache when they are stopped but suppose it is on purpose
2179,yes in fact that was the problem one thread would perform stop operation and then remove the service from the cache while another thread had already got reference to it yet had not started it it will then start it virtually however by doing so it would increment the usage counter on service wrapper which is no longer tracked by the registry subsequent operations would initialize new service wrapper as the one in the registry was gone and so the and operations end up being unbalanced
2180,take it as testimony that all this stuff was really not meant to do service start stop frequently at runtime
2181,to sum up there are three main topics remaining we have analyzer analyzerreference mixups search pull discussion my last commit should solve that issue does it seem ok to you whether file parameters should be forwarded as is and files should exist on the elasticsearch instance or we should parse those files and forward their content adequately formatted in json search pull discussion whether we pass parameters to elasticsearch specific analysis factories using multiple small parameters with the same name as in elasticsearch or one big json object parameter with magic name search pull discussion my opnion is we should leave it as is but we could also provide both to users and let them choose the first one should be addressed in my latest commit and ll try to address the second right now but it getting late probably won have time to finish today any opinion on this
2182,thanks my quick opinion on your questions bearing in mind didn review the pr yet not sure what you re talking about guess ll see during the review that nice idea but classify it as future maybe improvement no need for jiras we can see how it plays out go with the most intuitive approach from an end user perspective but don have enough experience with es analyzer definitions to judge happy to follow your suggestion ll merely check to see how maintainable this looks like onward with some hands on tests
2183,fyi still working on adding better support for file parameters for analysis factories in hsearch just discovered that some analysis related tests did not actually test indexing and it seems the syntax for those files is slightly different for elasticsearch especially char mapping rules where es doesn expect surrounding double quotes while lucene does all in all solution of parsing files on the hibernate search side and sending the content as json arrays seems to be more and more appropriate especially given the amount of work required for users to convert their files
2184,you mean more improvement commits are expected to appear on this pr soon right or shall we look into merging this and then open follow up improvement jiras as needed
2185,just pushed the improvements kept them in separate commits to make that readable we could handle this separately but probably not after the cr the behavior we are discussing here the one regarding files could not be changed without breaking users other matters are less critical ll open separate prs ll move the commit about analyzer reference mixups to another pr too since guillaume is not particularly happy with the solution and ll have to change it anyway
2186,merged great job all was quite worried about us attempting this translation but it looking much better than what was expecting
2187,passthroughtreference passthroughreference
2188,some javadoc to explain the purpose of this class would be nice
2189,unneeded white space
2190,as discussed on the phone could you explain bit more the sequence of operations typically here it would be nice to explain that analyzers not used in the mapping are registered as lucene analyzers
2191,comment explaining the limitation we discussed about the order would be nice
2192,buildertoclone is misleading here you don clone the builder think containerbuilder would be better
2193,not related to your patch but while at it fake is misleading here we use the pass through analyzer
2194,mmmmh the commit message does not really state the content of this commit it far more extensive afaics
2195,shouldn we use getclass instead of using static class reference
2196,shouldn we use getclass instead of using static class reference
2197,shouldn we use getclass instead of using static class reference
2198,having the analyzer here was not mistake for me the analyzer didn really need to be aware of the notion of reference why exactly did you change that
2199,it weird it looks like we are copying an analyzer while in fact we build an analyzerreference maybe the name builder is misleading and referencebuilder would be better all in all not convinced this is an improvement what the exact reason for this change the commit message does not really help
2200,maybe include the name of the analyzer or the analyzer if defined
2201,think we should include the name for the builtin analyzers that would be more clear know this code has moved so it probably something to apply on top of the other changes
2202,looks like you forgot to update the message as you did above
2203,think it would be nice to initialize the name
2204,typo in the commit message translate lucene analyzer definitions their translate lucene analyzer definitions to their
2205,don see the point of making it protected
2206,so you will always have an analyzerdef considering the comment at the top of customelasticsearchanalyzerimpl thought it was only guaranteed for this impl
2207,undefined sounds weird builtin maybe
2208,yeah as mentioned above not sure it good idea to define it in the interface
2209,please use classformatter class for the class parameters in the log methods here and below
2210,maybe use more explicit parameter names
2211,looks like the parameter name is missing
2212,light finnnish light finnish
2213,you can remove the super
2214,was worried about leaf types in the inheritance tree that would be pure implementations not meant to be accessed if those types implemented different public interfaces that would make difference in the result of this method and expose implementation details but it turns out didn need to do something like that so do you want me to use getclass
2215,couldn we return an empty indexsettings in the case we don have definition it would feel more natural especially if we imagine we add other settings
2216,no super needed
2217,iirc for new files we add an empty line at the end
2218,in practice we did pass references only those references were called lazy analyzers we cannot pass fully initialized analyzers to the scoped analyzer because we can initialize the analyzers until after we created the scoped analyzers during the mapping construction anyway this change is more related to what done in one of the next commits related to lazy analyzers ll try to see why it here
2219,mmmh ok any reason why you add super everywhere can see pattern here
2220,instan iating
2221,exists
2222,we do build an analyzer it just that we return reference to the result instead of returning the result directly we must return reference and we must start the copy from the analyzer itself because only the analyzer itself which is specific to the indexing service knows which type of reference to return if we returned the analyzer directly we wouldn know how to wrap it in reference here it not that bad because we are in lucene context so we could wrap it in luceneanalyzerreference and be done with it but in other places namely org hibernate search query dsl impl connectedquerycontextbuilder hsearchentitycontext we don have that kind of information we can even access the analyzer strategies anymore so we re stuck and we actually need reference not an analyzer because later we ll use the reference to determine whether it remote or not though guess we could use some instanceof but that makes all these is methods in analyzer references rather pointless doesn it
2223,anwsering your review comment in later commits we must introduce methods in elasticsearchanalyzer that are specific to elasticsearch or rather specific to the way the elasticsearch module handles analyzers those methods are not relevant to the engine so we can add those in remoteanalyzer the superinterface of elasticsearchanalyzer if we keep scopedremoteanalyzer in the engine module we obviously cannot make it implement methods defined in the elasticsearch module but we should because scopedremoteanalyzer is essentially proxy that should be usable wherever we use standard analyzer so we end up moving the implementation of the scoped analyzer to the module where we know exactly what is implemented which seems to make sense
2224,wondering if it worth introducing this infrastructure rather than simply use jsonelement jsonarray to serialize the elements
2225,appended this tostring please note that this is not expected to happen though assertionfailure not searchexception
2226,right fixed
2227,that seems wrong to me because when using that constructor the reference is not to name but something else the default some class we don have anything to put in name or at least nothing that would not conflict with the analyzer definition namespace the set of names used in name or did misunderstand
2228,neither do fixed
2229,we can use instanceof because we have scoped analyzers so we ll have definition either when it customelasticsearchanalyzerimpl or when it scopedelasticsearchanalyzerimpl pointing to customelasticsearchanalyzerimpl
2230,thing is it not always builtin it maybe something that was defined by the user on the server side also use builtin in later commit for something else what about serverdefinedelasticsearchanalyzerimpl
2231,see my answer above apart from handling scoped analyzer manually if analyzer instanceof scoped else don see any other solution and think this one is less bad
2232,done
2233,bit worried about this change the standardanalyzer that might be used as default would have the exact same behavior really think using an analyzer filtering the non ascii characters is better think it feasible isn it
2234,ok
2235,fixed
2236,use
2237,we will need to detect those when implementing the merge strategy in the elasticsearchindexmanager but yes could implement an isempty method then guess will do
2238,it does not harm either anyway fixed
2239,wonder if we should simply pass json object instead of separate parameters
2240,eclipse generated constructors
2241,fixed
2242,fixed
2243,thanks lot for this one
2244,done
2245,is it work in progress it seems so as you created issues for it
2246,know the parser is lenient but wouldn it be better with between the array elements
2247,actually it occurred to me only after spent hours on this crap anyway using jsonelement jsonarray may hurt when we ll implement validation for analyzer definitions so like to avoid that as much as possible know it was real pain when implemented mapping validation
2248,thing is we can only use built in lucene analyzer unless we want to alter the test another way by using analyzer definitions instead of an analyzer implementation changed this to use turkish diacritics standardanalyzer seems to fail at removing those and the turkish analyzer is built in
2249,fixed
2250,agree it could do but not sure it would be better we have some magic parameter name not really intuitive we have more error cases to handle what happens if someone gives parameter name other than the magic one it would not be much more readable thanks to java lacking multi line string constants real pain that one on top of that not even sure there are analyzers with object parameters in elasticsearch sure didn come across any the parameters are essentially flat with arrays sometimes so we wouldn gain much to be honest say yes if we were introducing elasticsearch specific annotations but in that case it doesn seem to fit the annotation very well
2251,it sure would fixed
2252,yes it is added details about that
2253,fixed
2254,fixed
2255,fixed
2256,fixed
2257,fixed
2258,fixed
2259,fixed
2260,fixed
2261,ok
2262,what worried about is that if you subclass it with class instanceofb is class will return false which feels kinda weird if we think they shouldn be subclassed we could make them final to be on the safe side or would you expect the subclass to always reimplement is
2263,that what would expect yes if subclass wants to expose more of its implemented interfaces it should do it explicitly that the point of this whole is unwrap pattern in this case we don use adaptors so simple instanceof and client side casts would have done the trick the only reason to implement that pattern is to be bit cleaner and to be more strict about encapsulation see org hibernate jpa spi abstractentitymanagerimpl unwrap class for instance it even more strict than what propose it only accepts interface types anyway that what think but it more nitpicking than anything else really don think it ll make difference ll use getclass so we ll be safe if someone adds subclass
2264,jenkins retest this please
2265,jenkins retest this please
2266,fyi just rebased this on master the conflicts were just on imports reviewing now
2267,rebased the project and applied all the remarks instead of creating field bridges for dynamicmappingit ve created parameterized filed bridge ve also added some javadoc
2268,what are actual use cases for enabling dynamic mappings reading through the issue it seems the reporter actually hit an issue which would rather be solved by properly mapping indexed embeddables using the correct strict schema it seems like big deviation from the current approach to support dynamically added fields and wondering whether we ve considered all the consequences how does field validation in the query dsl work for instance
2269,must admit thought the same before this pr but enabled test that demonstrate its usefulness when you want to index map this test previously only worked on lucene see the commit hsearch update existing tests so it may be useful now do we want to support that on elasticsearch that another question regarding the type detection in the query dsl it doesn seem any different from lucene to me there also is difference between querying strings and numbers maybe that not an issue with elasticsearch but more general one as side note we do have tickets relative to dynamic fields but not directly related to elasticsearch hsearch and maybe also hsearch
2270,one last attempt of keeping the api part fieldmetadatacreationcontext is an experimental api and we specify that it is currently under development elasticsearch is the equivalent of fieldmetadatacreationcontextimpl that it is currently under an impl package the name should probably be elasticsearchfieldmetadatacreationcontext but it seems too long to me elasticsearchfieldmetadata fieldmetadatacreationcontext is an spi and not public api it also does not mention elasticsearch in the api but only that mappedon should return fieldcreationcontext better if you give look as well ok postponing this part but would prefer to keep it because the user can startto experiment with it and we have an initial poc before committing to an api
2271,do we have strong use case for this if there are issues with the emitted strict mapping we should rather fix those what do you mean by issues elasticsearch allow to define different fields with different dynamic type properties so you could specify that all the fields are strict but one of the field is an inner object and the fields in it can change maybe this is not the best use case for hibernate search but there might be other clients that need to access the same index there is an example in the elasticsearch documentation mapping html the notion of object fields seems to have huge impact it may be justified to add but it still bit blurry to me suspect that the more backends we will have the more fileld types we will need for example elasticsearch also support nested types not sure how we want to address this in the future for this specific case inner object might be better name the javadoc will specify that the mapping can change based on the backend capabilities
2272,fyi applying the remarks
2273,better if you give look as well sure looking forward to it but ll wait for your revised version thanks
2274,ve applied all the remarks and kept the api for now ve created new cfg dynamictype for the configuration ve moved the bridge builtin impl elasticsearch class under bridge spi elasticsearch added updated javadoc fiixed an error in the mapasinnerobjectfieldbridge bridge used by the test the api is still the same ve only changed the package so the questions about keeping it are still relevant you can have look now
2275,jenkins retest this please
2276,while working on something else just came across section in the documentation that stated creating sub fields in custom field bridges is not supported and explained at length why it isn supported thing is with your new object field type it actually is supported you only have to override the type of the default field to object maybe this part of the documentation should be rewritten
2277,please don use the javadoc tag to point to external urls that will have the release process fail use or don use anything and we avoid the problem
2278,api looks great thanks for exploring all those options for the record expect to be able to chain such metadata definitions eventually when we ll work on supporting multiple indexing technologies builder field dynamicfield fieldtype object mappedon elasticsearch class dynamic dynamictype true not terminating yet mappedon solr class usedocvaluesasstored true solr specific option
2279,rebased and remarks applied realized that made mistake and applied the pr for hsearch and hsearch search pull on master on my repository and not on upstream the end result is that had to to rebase the patches made by again and they are included in this pr making it bigger than it actually is sorry about it don feel confident about removing that part of the documentation the one related about the sub fields until we have test covering the use case what it is describing seems different to what ve done and don feel confident removing or rewriting the section until we tested it as separate issue
2280,confused there are several other commits included now some of them are reverts intentional
2281,that my fault made mistake when applied the the search pull didn realized applied that on my remote repository and not on upstream noticed it today when other pr were already included this branch was already build on top of those changes at least that what think happened since master does not have those commits and remember pushing them anyway this changes related to hsearch and hsearch should be on master already the reverts are related to add back the as requirement for collections like discussed elsewhere
2282,ok understand you had forgotten to push some changes but why include them in this pr just push them
2283,yes could have done that on dec sanne grinovero wrote ok understand you had forgotten to push some changes but why include them in this pr just push them you are receiving this because you were mentioned reply to this email directly view it on github or mute the thread
2284,thanks merged
2285,there typo here should be elasticsearchdefinedfield
2286,this should not be hardcoded constant value but simply name know this won change anything in practice but it just in case people copy paste this code
2287,bit perplexed dynamicstrict does not match any field name wonder why this works anyway maybe there should be two different bridges here it feels bit strange that the name parameter in configurefieldmetadata is ignored same as before agree it can work as is but it more in case someone copy pastes this code
2288,this could use generics so that we ensure more or less that the cast in mappedon below will always work public void add class class elasticsearch extra put class elasticsearch also elasticsearch should probably be renamed
2289,shouldn this be map object instead it will save us one compiler warning
2290,unless mistaken there should probably be unchecked on this method to avoid warning know there already are tons of them but we could at least refrain from adding new ones another maybe better solution would be to use the class to do the cast return class cast extra get class
2291,maybe encounters with trailing
2292,elasticsearch and dynamictype are impl types as per there packages they should not be accessed here
2293,is this needed now for element collections worth mentioning in the migration notes for sure
2294,can we have public enum as we do for elasticsearchindexstatus
2295,what the reason for having this in separate method but not doing the same for boost
2296,sorry about that but just noticed this class is part of an implementation package if we want to make it available for use in custom field bridges shouldn this be api also maybe more specific name is necessary or we consider that this class will be used everywhere someone needs an elasticsearch specific api and in that case there should be slightly more complex design one central interface with multiple class extends xxx getxxxapi methods
2297,othe other haven fully groked yet why this is needed now could you explain bit
2298,it was always needed but in one of the latest pr removed it after long discussion we decided to revert it back for compatibility
2299,ok
2300,in elasticsearch you cannot set dynamic true on field that it not an object or nested fieldtype does not have way to define similar type at the moment fieldtype allows only primitive types guess the javadoc shouldn talk about containers ll update it
2301,consider this proof of concept at this point will remove it and create separate issue for this api and only support the configuration property
2302,ok ll remove this from the pr
2303,we alredy have ll update it
2304,caution with the existing enum it part of an implementation package and for good reason it used for building our internal representation of the elasticsearch mapping and as such it shouldn be exposed we can always add another enum if it really necessary
2305,right will add new one to be consistent with the other options
2306,could you clarify who is the subject of the behaviour also unknown field isn very clear imo an unexpected field name or better field name which was not declared in the index schema
2307,same comment on unknown field might be wrong but suspect it not very clear
2308,ok ll rephrase it think copied it from the elasticsearch documentation but in this context might not be clear
2309,please don call it backend feel your pain we are lacking good designation for this but backend is an overloaded term in this context which already has different meaning
2310,not sure what you mean here specifically what is backend meaning in this context
2311,could you use the logger and have it create searchexception
2312,final
2313,the object being repeated is confusing backends at the end of the sentence is as well alternative proposal composite object that will benefit from using different encoding on each indexing technology
2314,isn it explained in details one line after this one
2315,ll think differrent word but we need term to define these should we just refer to index managers
2316,think in most cases can replace backend with index manager would that work in this case trying to add extra field bridges that make sense only with some index managers and will be ignored by the others for example elasticsearchbridgedefinedfield the key is the class of the bridge and the value is the instance for the field considered in bridgedefinedfield
2317,sure
2318,mean it not clear if this is to configure the behaviour of elasticsearch or of hibernate search
2319,give access to properties that are specific to an indexing technology not particularly fond of that open to better ideas
2320,merged search pull
2321,merged thanks
2322,great thanks merged made minor change as after rebase the log ids had to be bumped up and tests needed to match
2323,rebased just now on master
2324,merged search pull
2325,merged
2326,merged
2327,great merged
2328,had only one comment which can be done later about the logging message org hibernate search elasticsearch logging impl log unexpectedindexstatus string string string do you think we should rephrase it to point out that we waited some milliseconds before failing
2329,sure
2330,jenkins test this please
2331,what was wrong here is ci refusing to run it
2332,no performance test failed this happens randomly sometimes
2333,looks good to me merged thanks
2334,please note that for an unknown reason some commits appear jumbled on github for instance hsearch revert hsearch split container bridges tests to te should be just before hsearch update array iterable map bridgetest following the introduction of this seems to be github issue though since local git log gives me something more sensible
2335,pr rejected closing going to submit another pr soon that will not introduce new annotation but the behavior for elasticsearch will be buggy again which will have to do until
2336,noticed it now but think the log should refer to returntype and not elementtype
2337,right changed that on the new pr preparing thanks
2338,thanks
2339,great job merged
2340,sorry sent the wrong commit fixing soon
2341,interesting one merged
2342,it assigned to you we need it merged
2343,it assigned to you we need it merged sorry about it got distracted by several things ll check it first thing in the morning
2344,can you rebase this pr to the latest changes it looks good to me but after rebased it have the following exception in the performance tests caused by org jdbc jdbcsqlexception timeout trying to lock table sql statement update book set publicationdate rating summary title totalsold where id at org message dbexception getjdbcsqlexception dbexception java at org message dbexception get dbexception java at org command command filterconcurrentupdate command java at org command command executeupdate command java at org jdbc jdbcpreparedstatement executeupdateinternal jdbcpreparedstatement java at org jdbc jdbcpreparedstatement executeupdate jdbcpreparedstatement java at com zaxxer hikari proxy preparedstatementproxy executeupdate preparedstatementproxy java at com zaxxer hikari proxy preparedstatementjavassistproxy executeupdate preparedstatementjavassistproxy java at org hibernate engine jdbc internal resultsetreturnimpl executeupdate resultsetreturnimpl java at org hibernate engine jdbc batch internal nonbatchingbatch addtobatch nonbatchingbatch java at org hibernate persister entity abstractentitypersister update abstractentitypersister java at org hibernate persister entity abstractentitypersister updateorinsert abstractentitypersister java at org hibernate persister entity abstractentitypersister update abstractentitypersister java at org hibernate action internal entityupdateaction execute entityupdateaction java at org hibernate engine spi actionqueue executeactions actionqueue java at org hibernate engine spi actionqueue executeactions actionqueue java at org hibernate event internal abstractflushingeventlistener performexecutions abstractflushingeventlistener java at org hibernate event internal defaultflusheventlistener onflush defaultflusheventlistener java at org hibernate internal sessionimpl flush sessionimpl java at org hibernate internal sessionimpl managedflush sessionimpl java at org hibernate internal sessionimpl flushbeforetransactioncompletion sessionimpl java at org hibernate internal sessionimpl beforetransactioncompletion sessionimpl java at org hibernate engine jdbc internal jdbccoordinatorimpl beforetransactioncompletion jdbccoordinatorimpl java at org hibernate resource transaction backend jdbc internal jdbcresourcelocaltransactioncoordinatorimpl beforecompletioncallback jdbcresourcelocaltransactioncoordinatorimpl java at org hibernate resource transaction backend jdbc internal jdbcresourcelocaltransactioncoordinatorimpl access jdbcresourcelocaltransactioncoordinatorimpl java at org hibernate resource transaction backend jdbc internal jdbcresourcelocaltransactioncoordinatorimpl transactiondrivercontrolimpl commit jdbcresourcelocaltransactioncoordinatorimp java at org hibernate engine transaction internal transactionimpl commit transactionimpl java at org hibernate search test performance task abstracttask run abstracttask java at java util concurrent threadpoolexecutor runworker threadpoolexecutor java at java util concurrent threadpoolexecutor worker run threadpoolexecutor java at java lang thread run thread java caused by org jdbc jdbcsqlexception concurrent update in table book another transaction has updated or deleted the same row at org message dbexception getjdbcsqlexception dbexception java at org message dbexception get dbexception java at org message dbexception get dbexception java
2345,that probably unrelated it sporadic failure we ve had since some months didn have time to analyze that sorry
2346,alright ll merge it what surprises me is that it happens regularly on the rebase branch but not on master
2347,hum interesting do you see any relation between the changed code and the failing test
2348,still checking thought it was something related to the change in the date format it seems to deal with the publication date but if you tell me it an existing error not so sure anymore
2349,not sure either it just looks like an error which we ve sometimes had during recent builds but the one had doesn trigger that often
2350,judging from the root cause concurrent update in table book another transaction has updated or deleted the same row say it not related to the change now what causes this issue that couldn say but ve seen this failure several time generally restarting the build solves it maybe stress tests are bit too stressful
2351,rebased and merged search pull
2352,see also we ll have to merge one or the other if understood it correctly those changes only affect the directorybasedindexmanager right at least from infinispan point of view there are no issues with the directorybasedindexmanager at the moment since all the stream work is applied synchronously to the index so even if this pr is merged the issue of missing documents because the flush was called while async works were not applied to the index when using the es would still remain that what addresses
2353,if understood it correctly those changes only affect the directorybasedindexmanager right they do but the approach is different you only have synchronization issues because you send indexing works from multiple nodes but only flush from one node so the flush may happen before some indexing works you said you had to do this because with directorybasedindexmanager the flushes would mess with works being executed gathered there must be synchronization issue then and this pr solves that issue theoretically after this pr is merged you ll be able to send final flush from every node which added asynchronous indexing works removing the need to explicitly wait for the works to finish executing before flushing mind that the final flushes may have to be executed through performoperations list indexingmonitor according to the javadoc operations might be applied out of order to mark two series of operations which need to be applied in order use transactional operation between them transactional operation will always flush all streaming operations first and be applied before subsequent streaming operations
2354,you said you had to do this because with directorybasedindexmanager the flushes would mess with works being executed no wrote earlier the issue is only with the elasticsearchindexmanager the flush once after indexing from multiple nodes in stream fashion strategy works fine for the directorybasedindexmanager because it does not support async stream indexing
2355,talking about another issue we mentioned on the same ticket the one that prevented you from sending flush from every node quoting my question suppose flushing from every node that used enqueueasyncwork is out of the question your answer this does not work well for the directoryindexmanager it could lead to cascade failures since flush can be very expensive after inserting large amount of data that why flush is carefully done once for the elasticsearch haven tested it but suppose it could go better since they prevent multiple flushes in parallel so what propose is we prevent multiple flushes in parallel on the same index writer and be done with it
2356,so what propose is we prevent multiple flushes in parallel on the same index writer and be done with it right overlooked the part where you suggested that on infinispan we start flushing from every node instead of once after all nodes are done submitting their data thinking about it this can lead to other undesired issues let me explain your changes may prevent multiple expensive flushes at the same time and thus bringing the whole cluster to its knees which it good but still it ll execute multiple flushes imagine cluster of nodes each node finishes submitting data at different point in time reasonable to assume that data distribution may not be exactly identical across nodes and then flushes the flushes will not be executed in parallel but will happens nonetheless times node that finishes early and flushes will effectively slow down everyone else while it does its in theory non required flush which can decrease throughput of the mass indexing processing
2357,node that finishes early and flushes will effectively slow down everyone else while it does its in theory non required flush which can decrease throughput of the mass indexing processing how see it this flush is not required now but the data it flushes will have to be flushed eventually and once it been flushed well it that much less to flush at the end however understand what you mean about performance worst case we will have flushes each for th of the data which may prevent lucene to perform some optimizations and may require some of its internal operations to be repeated needlessly expect flush with less data to be faster but consecutive flushes with each times less data may indeed be sub optimal bottom line honestly can tell how badly this would impact performance without testing it let see what thinks about it the fix might be relevant anyway even if infinispan doesn switch to one flush per node strategy because there really seems to be synchronization issue from what you said
2358,agreed on the synchronization issue so let promote this pr as an addition to rather than replacement for it
2359,looks like have to catch up reading on several fronts so forgive me if start with some dumb questions on this one don understand what problem is being resolved here test might be necessary there are patterns to prevent the sequential flushes see for example org hibernate search indexes impl sharingbufferreaderprovider refreshoperationid it unlikely to fold flushes into one but it should result into to operations assuming all flush operations are incoming in the start finish period of the first flush
2360,as long as infinispan is concerned there is only flush being done at the moment and there are no plans to start making more than one due to the reasons mentioned above
2361,don understand what problem is being resolved here test might be necessary ll try to do that today or tomorrow but not sure the issue will be easily reproductible technically this commit makes sure that while doing flush we don try to write to the index which could be an issue since the flush actually commits the index writer and after that we have to use new index writer the link with hsearch is that hsearch is only relevant in the following scenario purge indexes once batchbackend enqueueasyncwork several times batchbackend flush once and the reason for the last step to be executed only once in centralized fashion is presumably that if one node flushes while another is still indexing there will be failures because the flush changes the index writer sets it to null and the indexing works use that same index writer here making sure that even if one node flushes while another is still indexing everything will go smoothly which will enable infinispan to change its scenario to the following purge indexes once batchbackend enqueueasyncwork several times in parallel on several nodes batchbackend flush once at the end for each node and then hsearch is not relevant anymore there are patterns to prevent the sequential flushes see for example org hibernate search indexes impl sharingbufferreaderprovider refreshoperationid don see how it related to flushes you mean we could apply the same pattern to fold multiple flushes into one
2362,technically this commit makes sure that while doing flush we don try to write to the index that not problem lucene indexwriter is threadsafe worst case we ll be including in the flush some changes which didn require the flush we don guarantee that changes which don have an explicit flush will not be flushed yet for example the write buffers are bounded when the buffers are full flush will be triggered automatically which could be an issue since the flush actually commits the index writer and after that we have to use new index writer we don have to use new indexwriter after flush only some configuration actually demand this yet don see the problem as that specific case is driven by org hibernate search backend impl lucene sharedindexcommitpolicy which ensures the iw is not closed when it being used by using reference counting the one exception can think of is how oom exceptions out of disk and other critical exceptions are handled in this case iw might need to be forcefully closed
2363,you re right didn pay enough attention to the commit policies and especially to the fact that only sharedindexcommitpolicy is used whenever an index writer is shared this means don know where the issue mentioned by the issue with flushing from every node could come from which means the easiest way to solve hsearch is propably closing
2364,this means don know where the issue mentioned by the issue with flushing from every node could come from the main issue is doing several flushes that can potentially affect performance of the whole mass indexing process we do because only is needed really
2365,agreed on the synchronization issue so let promote this pr as an addition to rather than replacement for it am not sure as well if there is synchronization issue we never tried to flush at the same time
2366,np it great to see you exploring this complex area only few of us know this section and it not particularly readable it been quite battle tested though including in highly demanding environments from perspective of performance so ll be conversvative on making any changes without reproducer or at least having observed problem
2367,am not sure as well if there is synchronization issue we never tried to flush at the same time ultimately that synchronized within the iw the only potential drawback is the cost of doing many flushes in sequence but that shouldn be situation which we re likely to trigger
2368,see also search pull for an alternative solution
2369,merged
2370,nice merged thanks
2371,hi thought about the tikabridge bit this week end and think we have another way out for the container type issues with tikabridge without adding yet another bridge interface my concern with adding new bridge interfaces is that for every new interface we add the extent of what bridge can implement becomes less and less obvious to newcomer know type introspection is useful and ve done it myself in other prs but if we can avoid it maybe we should so the solution currently when return type is container we only do one pass on bridge providers passing context with getreturntype returning the element type what if we did two passes one where the context would hold the container type getreturntype method that returns the container type and getreturnelementtype method that returns the element type and second pass that where we would act as usual with getreturntype returning the element type we would only do bridge wrapping with our container wrappers in the second case this would probably be backward compatible because pre existing bridge providers would give up on the first pass don support collection and everything would be like it used to be on the second pass what do you think
2372,actually the interface has the added benefit of also working on field bridges created because of explicit annotations impl mycontainerbridge class so it probably better ll wait for your opinion before merging by the way think that fixing hsearch has probably made the problem experienced with tikabridge even broader the tikabridge issue was with bridge providers getting the wrong metadata but with hsearch fixed the issue will also be there at runtime people that designed custom field bridges for collections will have their bridge wrapped in an iterablebridge for instance without them knowing which will probably result in their field throwing classcastexception when indexing they ll be passed an element instead of the whole collection introducing the new containerawarebridge interface offers solution to users experiencing this issue but wonder how we should advertise this interface especially because it ll be needed in while it wasn in
2373,wonder how we should advertise this interface not sure understand your remarks this interface overrides the default behaviours for containers bridges the default behaviour is to index the elements of container and if you instead want to index the whole container you can use this interface especially because it ll be needed in while it wasn in that not true tikabridge does not work in with byte arrays anyway you just have different error adding this interface doesn affect what was working on unless missing something
2374,to be fair didn check if it works with but given the nature of the problem assume it doesn work with it might be wrong
2375,let me clarify there are two different issues the first is the one you re addressing with bridge providers bridge providers were being passed context that returns the element type and gives no information about the actual type of objects that will be passed to the bridge in set string name object value document document luceneoptions options that made the tikabridgeprovider fail for byte because byte was passed and it didn support byte only byte but there is another nastier issue here we used to pass the element type instead of the actual property type because we usually wrap provided bridges within an arraybridge iterablebridge and so on that what is done in bridgefactory getfieldbridgefrombridgeprovider so the bridge providers need not know about the actual container type we handle it for them and only pass them the elements one after another that the theory but in practice it didn work until we fixed hsearch or at least not in every case ll spare you the details so until we fixed hsearch bridges applied on container types arrays iterables maps were actually being passed the container when indexing with set string name object value document document luceneoptions options so there are users out there know some that built field bridges that supported containers well before and it used to work so now that we fixed hsearch those bridges will now be wrapped in our container bridges as they should have been from the beginning and will now get passed container elements in set string name object value document document luceneoptions options since they re expecting containers they ll fail when trying to cast the value to container this means that their code that used in because hsearch hadn been fixed won work in anymore your interface would solve this second issue because custom bridges supporting containers would only have to implement this interface but still it requires users to do something and that why wondered how we should advertise this interface is it clearer
2376,the fieldbridge contract is very vague about which value is going to be index we should probably take the chance to decide the correct behaviour and add some tests for it users will need to update their bridges this time if they used different behaviour that said unless we still require the annotation don see how we can know if the user wants to index the container or the element and still keep back compatibility this would mean revert some of the changes and post pone them after would treat all this as follow up issue though as it requires some additional discussion how to address it in particular would expect to receive the whole object when create custom field bridge and not the element current default behaviour edit removed duplicated paragraph and fixed wording
2377,this is my wdyt
2378,jenkins test this please
2379,for your information working on solution to that may remove the need for this pr because the if bridge instanceof tikabridge may disappear please do not merge until get the chance to open pr
2380,can you rebase your current work on top of this one we still need to add the missing test also probably the changes in the tikabridgeprovider will still be needed then you can close this issue and send pr that solves both issues
2381,right there more to this pr than just containerawarebridge thanks for the tip ll take as much from this pr as possible only expect to remove the containerawarebridge interface which won make sense anymore because the default will be not to wrap bridges in container bridges ll keep you updated
2382,cherry picked most commits in my pr for hsearch thanks closing this one for now since hsearch must be fixed for other reasons and makes the containerawarebridge obsolete container bridges are now only applied when explicitly requested by users feel free to reopen this pr if you disagree
2383,rebased on latest master
2384,merged thanks
2385,we really need to avoid requesting service reference at runtime it is quite problematic to handle these requests concurrently efficiently know we did it in other places too but original poc was meant to be cleaned up could you pass the reference to this service to the constructor in some way while making sure that the reference to the service is requested just once at initialization
2386,don think can those queries are created in org hibernate search elasticsearch impl elasticsearchjsonquerydescriptor createhsquery searchintegrator and that method is generic spi we could change it but we certainly couldn shouldn add elasticsearch specific parameters the query descriptors themselves may be created from public static methods such as org hibernate search elasticsearch elasticsearchqueries fromjson string making it impossible to pass reference to the service when creating the query descriptor what can do is request the reference only once in the elasticsearchhsquery constructor which is not much better since queries are generally only executed once or twice replace the gsonservice by static methods but did exactly the opposite few months ago so that would be shame maybe see why requesting reference to service is such performance issue especially given we have cache also like to mention two facts we already request reference to service each time we create query through org hibernate search engine impl immutablesearchfactory createhsquery query class provided elasticsearch is being used this code is only executed in debug mode which expect to be less efficient than normal mode what do you think
2387,just had look at the service manager code and guess the efficiency issue you hinted at was with those synchronized start stop methods in org hibernate search engine service impl standardservicemanager servicewrapper couldn we use plain java util concurrent locks lock under the hood instead of our own counters here that way we have read lock that would ensure nobody is going to start stop service while it being used and write lock that would ensure we re free to start stop service without breaking anyone else was thinking of something similar to what you did in org hibernate search backend impl lucene lazyexecutorholder
2388,we can do many things but it will always be more efficient to start all needed services at boot time and stop them at the end incidentally the servicewrapper could be made more efficient for parallel runtime access but that would come at other costs which don think we should be paying for example wouldn assume that using plain lock would be better than the current code think in terms of limits what would happen on single threaded app for every single query we be starting the service then stopping it again for some services this might be cheap but for others it will not it will at very least be allocating several objects which we don have to if you prefer we can resolve that later but bear with me that expect the perfect version of the code to not stop start services at runtime unless there specific reasonable need for example we ll have to live with the fact that service might need to be started lazily in reaction of starting new indexmanager for example started lazily by dynamic sharding request to expand
2389,think in terms of limits what would happen on single threaded app for every single query we be starting the service then stopping it again ok that not what had in mind it true in the general case though even in single threaded app gsonservice is likely to be referenced elsewhere so it likely wouldn be started for each query it is for instance referenced by org hibernate search elasticsearch client impl jestclient which is referenced indirectly by elasticsearchindexmanager whose lifespan is large enough to make this start stop dance quite rare anyway we re both willing to avoid this potential performance issue here ll simply repeat what said yesterday in that particular case there no single non service object created when bootstrapping that could hold the reference to this service and pass it along to queries at runtime would like to do so but it simply not possible in the current state of the code or at least unable to see how it possible which is why trying to think of alternative solutions created ticket to address potential performance issues in the servicemanager for those few cases where we are forced to repeatedly acquire reference to services we should avoid it agree but there may be cases where we can do otherwise see
2390,thanks merged
2391,same as above think this should something like that catch throwable try if transaction isactive transaction rollback catch throwable somelogger warn error while automatically rolling back transaction maybe we could remove that addsuppressed throw
2392,think we should handle exceptions with more caution instead of finally this would be catch throwable try entitymanager close catch throwable somelogger warn error while automatically closing an entity manager maybe we could remove that addsuppressed throw entitymanager close let any exception when closing propagate since we didn catch any exception before
2393,it test helper either way they will end up on our logs
2394,what do you gain with that if anything fails the test fails and we ll have both exceptions logged
2395,maybe in that case though not sure that exceptions get logged when they are bypassed due to another exception being thrown in finally block before java people advised to explicitly log those but it might be because the default behavior simply sends the stacktrace to system err since java must admit don know what happens in that case in the helper below though positive the throwable gets swallowed and never appears in logs if an exception arises when rolling back sorry to be pestering but exceptions being swallowed in tests especially assertion failures are real pain and since we get to solve the issue in single widely used helper don see why we wouldn
2396,ok pushed an update checked how the suppressed exception looks like it quite nice and readable under the original exception so we shouldn need the log
2397,rebased just now ready for review
2398,merged as well thanks
2399,think addressed your concerns really not sure the unwrap class pattern fits here though it feels rather clumsy in our case mostly because bridges have no common superinterface exposing the unwrap method so we must rely on utils anyway whenever we want to unwrap bridges this is true for client code metadata processor and such but also for the implementation of the unwrap class method itself so if we have to use utils we might as well make the unwrap code in bridges as simple as possible and stick to its previous form ll let you judge of that added the unwrap method change in the very last commit you can remove it easily if you agree with me
2400,jenkins test this please
2401,thanks for that research see your point yet prefer to take the change so that other people maintaining the code won be surprised by the contract ve added one commit to make your function simpler hope it makes you feel better about that afa
2402,rebased and merged
2403,the unwrap method is typically implemented by letting the method return some internal component which matches the type of the parameter that for example the contract on entitymanager an example implementation is here org hibernate search jpa impl fulltextentitymanagerimpl unwrap class just wondering did you consider that did it not fit your solution doesn look bad it just that given the specific name would expect it to follow the well known pattern
2404,when it comes to these exceptions think that quoting the value which the user attempted to use is helpful to understand the error see the previous version of the error had it why remove this
2405,since you no longer requested the service you should not release it either might as well not keep the reference to servicemanager
2406,no longer needed
2407,ok understand now what you re doing with those messages
2408,did not consider it you re right the unwrap method in nullencodingtwowayfieldbridge was already there and just generalized its use maybe following the unwrap class pattern would be better ll see what can do but it probably won look perfect we actually have two ways of unwrapping one which goes through container bridges the other that doesn
2409,right missed that fixed thanks
2410,the orm upgrade is not going to the branch neither now nor later for the test fix have better solution too coming which requires java also restricted to only preview is here ad ecc cae
2411,rebased and merged thanks
2412,thanks ll re enable the mariadb tests on ci hibernate org
2413,thanks ll re enable the mariadb tests on ci hibernate org
2414,updated and rebased
2415,jenkins test this please
2416,rebased and merged thanks
2417,couldn find any place where we use the terms logical indexes ok with you if replace that with index managers
2418,because invented on the fly no worries ll update it
2419,it seems checkstyle is not happy could you please fix the code formatting errors search pr org hibernate hibernate search orm console
2420,think it is fixed now
2421,have some doubts related to naming see above apart from that it looks good
2422,renamed the way you suggested
2423,rebased and merged thanks
2424,backported to
2425,know bridgeprovidercontext is spi and can be changed but this naming scheme scares me it feels like getreturntype is somewhat random not exact see two solutions we could deprecate the old getreturntype and use more appropriate naming like for instance getpropertytype and getpropertyelementtype or we could change the behavior of this method slightly rename it getcontainertype and make it return null when the property is not container what do you think
2426,did you see there already are two classes named tikabridgetest maybe introducing third class with name this generic is not good idea what would you think of tikabridgeinputformattest
2427,this class is called tikabridge support test but ll change it
2428,prefer the getproperty element type approach don like the getcontainertype one because sometimes it returns null and force me to check but wanted to keep the patch simple without renaming other existing spi somewhere in the code think saw something like getelementorcontainertype would that be better
2429,it probably good compromise until yes getelementorcontainerreturntype then
2430,thanks merged backporting it to
2431,any reason why you added reflectionhelper might as well remove it so that we see it method of this very class
2432,wondering if it would be worth it to exclude java lang object sounds like some useless work using the programmatic api to declare search annotations on it would be weird to say the least but maybe it safer to also take it into account wdyt
2433,wondering if carries is the right word here as stated here wouldn be sure the annotations on methods and properties are considered it might be just me so feel free to ignore
2434,agree it would be weird total nonsense even to index something on object at least in production guess we could imagine someone indexing tostring for debugging purposes in development environment though it still be weird anyway don think the number of classes inspected here is that important we re talking about one execution per class in the hierarchy of each non hibernate classes and only when boostrapping the search factory which is really not much work especially since it does not involve if we were talking about runtime code why not but in this case find the weirdness of excluding object more annoying than the performance hit of inspecting the object class
2435,no particular reason it was copy paste think ll remove it
2436,contains seemed especially fuzzy to me it okay for method name but here in the javadoc wouldn want any ambiguity ll try something else
2437,yup that was my overall feeling as well but felt better mentioning it
2438,rebased and addressed most of the reviews
2439,looks like have to explain bit of the intent behind performstreamoperation sorry for the lack of clear documentation once upon time the massindexer would use its own dedicated indexwriter this implies that when the massindexer was running any other change to the index would be blocked in wait for the index lock to be released the indexwriter backend of the massindexer was different than the one being used by the transactional backend it would apply changes in parallel no ordering guarantees and no flushing between writes while the traditional one would apply block batch of changes at time to maintain strict order and commit the iw at the end of each block we introduced the performstreamoperation as way to sneak by the changes required by the massindexer on the same iw already possibly open by the standard iw backend bypassing the one change at time requirement of the normal backend while reusing the same iw instance in practice this needed and needs some care as now we had two incoming streams of changes on the same iw with subtly different semantics it is not an option to simply apply the strongest required semantics as otherwise the performance penalty is unacceptable like taking month rather than minute to do certain operations the main flaw of the current design is that the conceptual streams have no starting point and no end the flush command for example is needed by the massindexer to signal for the phase of ve sent bunch of stream commands now done so now want you to finally flush to disk this is actually very tricky point as the previous stream ops being applied in parallel need to be strictly ordered all before the flush hope that clarifies the original intent of the performstreamoperation method we should likely rethink such things now as it all looks quite obsolete when combined with many other changes we applied to the backend for example wonder if we should explicitly open close stream tasks making the explicit flush command unnecessary or rather separate the high level flush concept from actual index commits which should be backend implementation detail on this pr now my main question is why are you testing semantics of performstreamoperation is infinispan using this for anything else than the massindexer keep in mind that the massindexer is the only one which is meant to use this method and it assumed to never produce more than one entry for the same id your test intentionally violates this property in other words the performstreamoperation might have an ill name and sorry for that but it doesn guarantee ordering within the stream as it expects stream of unrelated data points let also keep in mind
2440,why are you testing semantics of performstreamoperation infinispan massindexer uses org hibernate search backend spi batchbackend that in turn ends up calling this method the test just does the same but it doesn guarantee ordering within the stream that fine currently we don expect the stream to be ordered
2441,never produce more than one entry for the same id your test intentionally violates this property this is not requirement of the test pushed new version with different ids
2442,removed the sync by default it is sync only for the flush changed the test to go through the batchbackend instead of calling performstreamoperation directly
2443,merged thanks as commented above still suspect the reproducer might eventually fail with the wrong timings but we ll see if it comes to that also don think raising the refresh timeout makes any difference
2444,if we force refresh when flushing refresh true above then we should not use refreshafterwrite here but simply false otherwise there ll be two refreshes one when performing the flush and the other in org hibernate search elasticsearch client impl backendrequestprocessor requestprocessingrunnable processasyncwork
2445,if understand correctly this test relies quite heavily on hibernate search default elasticsearch refresh after write being false there pr about to be merged that made that true by default in tests and it might become the new default before the final release mean it not impossible could you please set the value of this property to false explicitly just to be sure
2446,could you please use elasticsearch no capital just to be consistent with other tests
2447,from what can read in the documentation flush html since we re not setting wait if ongoing to true here the operation will fail if flush operation is in progress say it not what we want especially given that we re already executing the operation asynchronously and thus waiting bit more is no big deal
2448,so here we re switching the default behavior when forceasync is false from asynchronous to synchronous from what can see in org hibernate search indexes spi indexmanager performstreamoperation lucenework indexingmonitor boolean the behavior when forceasync is false will depend on the backend configuration so guess we could make it async by default if we wanted to must admit don quite grasp the implications of that change though the whole concept of being able to execute stream operations asynchronously or synchronously seems rather blurry to me so must be missing something what do you think
2449,nice catch
2450,so guess we could make it async by default if we wanted to indeed bear in mind that the directorybasedindexmanager doesn have search blob master engine src main java org hibernate search indexes spi directorybasedindexmanager java async stream mode currently forceasync is ignored but the elasticsearchindexmanager does have it and it is now the default on master making it sync as this pr does is up for discussion and the fact that both index managers behave differently causes some issues imo an async default would need an improved api either exposing something to detect if there is any in flight changes not applied to index so that my flush will actually flush or maybe return future
2451,the second parameter should be forceasync instead of false think otherwise forceasync is simply ignored
2452,short story left it false to maintain the behaviour currently in place all work is async by default so forceasync is not used as before long story this is what the contract says about this flag forceasync if true the invocation will not block to wait for it being applied when false this will depend on the backend configuration in the directotybasedindexmanager there is configuration worker execution which assumes values sync async that defines how works are applied to the index in theory the forceasync flag should have no effect if the backend is already async so assuming worker execution async and forceasync false what should happen having forceasync would make it sync disappointed you may be asking why does it matter since the elasticsearchindexmanager does not honor worker execution should it honor it realized answering those question and implementing missing pieces were not directly related to this pr which is about flush per entity and maybe should be addressed in another jira wdyt
2453,you re right got confused obviously if it async by default then forcing async shouldn do anything sorry about that about worker execution it only applies to non stream works from what can see in the code so in our case it not relevant support is indeed missing for elasticsearch added ticket on jira so we can at least discuss it
2454,think there race here the indexasstream operations are merely scheduling work into queue so that they can be batched with periodic writes the flush operation is issuing flush request on the es node but it not flushing this queue first ll merge it anyway as it doesn seem to affect this test in practice and there good progress here
2455,elasticsearchindexmanager performstreamoperation is waiting for the async works to be applied to the index
2456,thanks that what was missing only on flush clever
2457,merged search pull issue thanks
2458,suppose we need to update the documentation as well in regards to the not need anymore
2459,had to add commit probably because of the different merged prs now interacting search commit efd bb bbe db
2460,the container field bridges are not documented there ticket to add the documentation right probably because of hsearch which enabled engine tests on elasticsearch
2461,about the maps sets implementations in the metadata search commit cd cc ca cbb the thing is we used to use hashmap hashset whose iteration order is notoriously unstable it might change when you add new elements but this iteration order is important it determines in which order fields are added to document or in which order fields are added to the elasticsearch mapping and in some cases most notably indexing in elasticsearch the order in which fields are added to the json document may change the code that is executed and so it happens that in search commit aaced ba fixed two aspects of the same bug as matter of fact there are two places where we might change the json document when indexing explicitly search commit aaced ba diff bd dae fa when we add property value to the json document the add method seems bit odd but it only so that we can support multi valued fields even though this information that field is multi valued is not part of our metadata implicitly search commit aaced ba diff bd dae fa when we implicitly create parent properties for instance when we add value for the property foo bar then foo has to be added to the json document as an object property so we can set bar on it this is done under the hood but it is document modification and it does not follow the same rules as the explicit change since multi values are not at all supported in this case thus since there are two different places in the code where we change document there are two places where field naming conflict could be detected which is why we have two error cases when for the the same field name first an explicit change is performed add sets concrete value such as an integer date etc for field foo and then an implicit one getorcreate tries to set composite value json object for field foo in order to add the field foo bar search commit cee bb ffd diff dcdf af ba de when the changes happen in reverse order first the implicit getorcreate then the explicit add search commit cee bb ffd diff dcdf af ba de now one can understand that if the iteration order over the fields is unpredictable can hardly test those two cases because won have any guarantee on which field is added to the json document first and so won be able to ensure am in case or in case that where the map set implementation come in play by using linkedhashset and linkedhashmap ensure that the metadata order is the same as the processing order in the annotationmetadataprocessor thus the metadata order becomes predictable to some extent not totally predictable since we still rely on the order of the fields methods returned by the jvm which is undefined and not even guaranteed to be deterministic but partially predictable can be sure for instance that on methods will appear in the metadata before on attributes because methods are processed first on related subject don find the reliance on particular map set implementation that smelly at least not anymore than java is smelly the contract of set and map does not mention that the iteration order should be stable so it up to the implementation would gladly use the stableset and stablemap interfaces but there is no such thing sortedset and sortedmap are not exactly what we want because their only implementations treeset and treemap require total order on the elements we add to these containers and in this case we don have one given two fields we could order them by their field name but what if two different documentfieldmetadata have the same name they re not identical but there no way to say which one is greater and yes this can happen most notably when class bridges are defined without field name search commit fc eb fe bb
2462,can one of the admins add this person to the trusted builders reply with add to whitelist or ok to test
2463,jenkins add to whitelist
2464,thanks for taking the time to fix this do you think you could also add test this would make the issue more obvious and most importantly would prevent regression if we happen to change that class later you can add your test in org hibernate search test query dsl dsltest in the hibernate search orm module you can copy paste testphrasequery for instance and adapt the code to reproduce this particular issue
2465,this is probably too late for next beta of but happy to release bugfix release later this week just for this fix thanks
2466,hi timo any chance you could inject your test case in dsltest as mentioned by it would be nice if you could also sign the cla for the hibernate project on it very simple formality and come back to us with your username once done thanks
2467,hi guillaume ve just added the testcase to the pull request add removed some whitespaces afterwards ve also singned the cla the username is ttretter as well cheers timo
2468,thanks reworked the commits bit and merged it also backported to the branch
2469,hi any chance to get bugfix release for that
2470,you re right sorry forgot we ll release it today thanks again
2471,version final was released now depending on were you are you might be able to get it via maven already or you might need some more hours for your favourite mirrors to sync up release notes and announcement will appear soon on in relation to
2472,thank you very much
2473,good analysis thanks for that agree with you on not supporting to project field which wasn explicitly marked for projection capabilities store yes for the lucene backend storing the source document in es is optional not sure if we want to keep indexing it at the very least we should not rely on it to be stored so that we might introduce an option to skip it as the storage and performance penalty might be unbearable for some with lucene we also allow to project unknown fields as strings but we already agreed that this legacy behaviour should not apply to es you mention needing docvalues as alternative why lost you from there onwards
2474,you mention needing docvalues as alternative why lost you from there onwards it was mistake meant field storage updated my original post good analysis thanks for that agree with you on not supporting to project field which wasn explicitly marked for projection capabilities store yes for the lucene backend storing the source document in es is optional not sure if we want to keep indexing it at the very least we should not rely on it to be stored so that we might introduce an option to skip it as the storage and performance penalty might be unbearable for some agree relying on the source document is far from ideal but right now it the only way to support projections properly as explained in the paragraph starting with reminder but yes we could introduce global parameter allowing users to use field storage for projections and document the limitations with lucene we also allow to project unknown fields as strings but we already agreed that this legacy behaviour should not apply to es right though the case at hand is slightly different we re talking of known fields with known metadata but with storage disabled store no currently those are being projected anyway because we don use field storage while on lucene an exception is raised
2475,ll close this as it needs at least to update the pr metadata
2476,updated
2477,merged thanks
2478,there repeatition of performance maybe apply the writes optimally
2479,should state for the elasticsearch indexing service only maybe
2480,say queries can use or rephrase the whole sentence to basically state query results can include but query results can use seems wrong results don use anything
2481,maybe this should be merged to the first paragraph it seems we re repeating ourselves here also we can add link to elasticsearch
2482,the modules sharedtestresources legacy and infinispan are not mentioned shouldn we at least mention that those modules are private and or obsolete and shouldn be referenced directly from user projects
2483,not caused by your changes think this should be in italic same with test below
2484,thanks rewrote this paragraph
2485,was hoping to keep it short but ok see that this might be necessary to be qualified
2486,need the first paragraph to be short here indeed repeating the concept as closing point but the real message is to make people aware that even if they opt for using es it still lucene under the covers
2487,there lot of stuff not being explained in the readme and whatever we write gets obsolete quickly rather not add details about stuff that occasional contributors are safe to ignore the longer readme becomes unnecessarily scary
2488,which is saving you from
2489,why is it though that you are stressing this point using lucene under the covers seems this should be more an internal detail of es itself
2490,merged thanks
2491,that for the typical hibernate search user there is no such thing as adding new entities at runtime this capability is an implementation detail of the infinispan integration and possibly of other integrators beyond the hibernate orm integration this documentation is specific for the hibernate search hibernate orm integration so to not make it all too confusing for them avoid such notes ll edit this commit to remove this specific change then merge it all hope you don mind
2492,not at all thanks
2493,pushed new version
2494,merged simply removed an obsolete commit in lazyexecutorholder this method needs to be invoked within ownership of the executorstatewritelock the code changed and the lock is now acquired inside the method thanks
2495,thanks don forget to mark the jira issues resolved
2496,shouldn this be protected by locking previous executorstatereadlock since the attribute is no longer volatile that seems necessary also wonder if the whole executor readlock writelock stuff shouldn be encapsulated in separate object what find dangerous is that just after we copied the executor one could call shutdown on previous lucenebackendresources which would shut down the executor but would not clean up the asyncindexingexecutor attribute on any new lucenebackendresources that happened to share the same executor and then we would have tasks being submitted but never handled having single shared object hold the references to the locks would and to the executor would probably solve the issue then when starting or shutting down the executor we wouldn change an attribute of lucenebackendresources but an attribute of that single shared object that happens to be referenced from lucenebackendresources which is slightly different or maybe there another mechanism that guarantees that we ll never call method on previous version of the resources after having created new version
2497,maybe indexmodificationreadlock would be better with capital
2498,good ideas ll apply them
2499,great merged this after re disabling the directoryproviderforquerytest test as it depends on hsearch as well
2500,merged
2501,can you rebase this pr please it seems there are some conflicts with the latest master
2502,done but it strange did not experience any conflict when rebasing though github did state there was one anyway let wait for the ci it ll be safer
2503,looks good now there were some issue with the name of test method
2504,merged search pull thanks looks good
2505,no need to change it but this could be number instead of object isn it
2506,yes it should have been number
2507,actually it seems some tests are failing randomly namely org hibernate search test projection projectionconversiontest concurrentmixedprojections ll have look
2508,ignored the test and created
2509,rebased and ready for review
2510,rebased and merged search pull thanks
2511,changed my commit and rebased this should be better this solution is bit more twisted when it comes to calling the monitor but otherwise it seems fine it even ready for when we ll add methods to indexmonitor and it should work just as well details didn move the loop to the handler because the handler was specific to each backend request and even the monitor it delegated to was specific to each backend request theoretically you may have two backend requests in the same bulk that have different monitor even if that wasn an issue tying the handler to the bulk instead of tying it to the backend request would have forced me to include action specific code in the handler to distinguish actions that require incrementing the monitor like update from those that don like delete
2512,nice thanks for going the extra mile
2513,merged
2514,the indexingmonitor can become contention point when it invoked too frequently for example when running on servers with many cpus one massindexer job will use them all in parallel and the pattern is relatively efficient because it attempts to not share much the monitor is one of the exceptions for this reason it takes long argument so that its counters can be incremented by values larger than one so would expect bulk request not cause invoking the indexingmonitor documentsadded method times but invoke it with parameter on the other hand like your idea of having the handle method to accept the bulkresultitem argument could you move this loop into the backendrequestsuccesshandler implementation there it can inspect the bulk result and invoke the indexingmonitor once as necessary
2515,ll see what can do but like to point out that the only other uses of indexingmonitor only increment it by which is why implemented it that way it sure didn seem to be concern with the lucene indexing service so figured there was not reason it should be concern with the elasticsearch indexing service maybe we should have look at the lucene side too org hibernate search backend impl lucene works addworkexecutor performwork lucenework indexwriterdelegate indexingmonitor for instance
2516,but like to point out that the only other uses of indexingmonitor only increment it by ah interesting it not how originally intended it another thing to fix
2517,has just been merged and rebased this one ready for review
2518,very nice great job
2519,here all your concerns should have been addressed only do as little double boxing as possible see the last commit added commit the last one that changes the projection result for missing coordinates from double max value to null the sort behavior is unchanged entities without coordinates are considered furthest by default it seems to me that it should stay that way for now it more or less consistent with the previous behavior which used the distance to which for most coordinates is large distance by the way the fact that we now return null for projections is likely to trigger npes in some applications maybe we should postpone that last commit to hibernate search
2520,merged
2521,would you really expect this especially when the sort is descending having those with null value listed on top seems counter intuitive think the previous behaviour to not list them at all was nicer
2522,we could still project it as null
2523,this code section is extremely performance sensitive especially regarding memory consumption we need to keep these results as double not double
2524,same here concerned about memory consumption of this object as we ll be allocating many of them during query would it be possible to avoid having to wrap all the values into boxing objects we already have reports of hitentry being too large
2525,rather than changing the coordinate method which is forcing you to return double rather than double you could check for this document to actually have both coordinates in advance and if not skip the collection
2526,as in the collector think we need to keep using primitives for each lat lon value and you can do so by checking in advance for the fields to exist in the bits instance if not eagerly return false
2527,in light of the other suggestions maybe you can keep the original signature don like this one as the invoker of the method should be responsible to not invoke this with null values rather than the method implementation being responsibl to work around for such case
2528,maybe but we have to convert the double max value returned by elasticsearch to null in that case ll see if it can be done reliably one thing that bothers me is not sure will be able to do the same with sorts consider the value is null and rather have the projection and sorts be consistent
2529,two things the fact that value is listed or not has nothing to do with sorts it related to distance constraints distance queries which are orthogonal to the sorts if you also have constraint on distance the entities with null latitude longitude will probably not appear in the search results since double max value is larger than any max distance you might have set except double max value ll update the doc to make that more obvious
2530,ll see what can do regarding those double
2531,thanks merged
2532,should we change these to plural forms host names servers
2533,right done
2534,loogs good to me merged thanks
2535,hi sorry for the delay think we could go with your idea of exposing the method which builds the standard errorhandler could you make proposal about that also did you notice that you can inject the errorhandler instance in the configuration properties
2536,updated
2537,rebased and merged thanks
2538,this will need little bit of javadoc
2539,prefer to keep the logic in searchconfiguration implementations to the bare minimal so that it easy to create different implementation could you undo moving these methods and simply have the geterrorhandler of this implementation return null
2540,we could simply invoke the searchconfiguration geterrorhandler here and if it not null give priority to that one ideally if the error handler property is also defined log warning to let people know that it going to be ignored as an alternative strategy you could convert it into service which means you can treat it as providedservice when you need to inject one from infinispan
2541,it self explanatory what do you have in mind
2542,let me detail my use case class myerrorhandler public myerrorhandler errorhandler configurederrorhandler by moving the creation to the configuration level it allows me to decorate the configured errorhandler and return it not sure about services would it create single errorhandler per jvm one errorhandler per searchintegrator is enough what about undoing everything and exposing the creation logic at spi level org hibernate search spi errorhandlercreator instead can simply re use it as building block for my custom errorhandler
2543,had in mind something like return null unless you want to override it but that depends on how we address your other points know we don document much especially self explanatory methods but when it comes to spi little guidance is needed
2544,ok so you want to wrap whatever is being configured by the user had missed that services won fit this either then although service is per integrator unless you want to provide the same instance to each do you need to handle some error internally in infinispan while still forward to the user other errors
2545,exposing the errorhandler creation as an spi might be acceptable if you really must but prefer to avoid it
2546,although service is per integrator was with the impression hsearch services were based on java util serviceloader and thus instance only for across all searchintegrator do you need to handle some error internally in infinispan while still forward to the user other errors yes on infinispan during topology changes there is small time window where lock obtention fails due to transient ownership changes and my custom error handler catches that and redirect the work to the rightful owner
2547,added the documentfieldpath type so it bit less weird search pull commits ce ed fdc ee def hsearch introduced documentfieldpath kept the getabsolutename methods on documentfieldmetadata facetmetadata for now because it seemed bit easier to use to me but can remove it if you feel it not necessary
2548,jenkins retest this please
2549,ok merged thanks
2550,care to explain this change maybe separate commit would be in order
2551,looks like you roll this back in the following commit maybe you should remove this change from this commit
2552,are we sure we don want at least the field name in the error message we are losing some info
2553,didn look at the path to arrive here but we are sure the user can get this error if he can we should move this to the logger
2554,facetrelativedname facetrelativename
2555,is the sourcefieldname absolute or relative as you wanted to be clear everywhere it might be good idea to be more precise
2556,the comment looks outdated
2557,should it really be debug level message
2558,maybe rename the method addfacetfieldmapping
2559,or you wanted to make it more general if so maybe subfield
2560,few lines below does not appear in the diff but just expand the lines representic representing
2561,just to be sure we only serialize the properties not the method would add to be on the safe side
2562,if feels really weird to have the absolutename and the relativename maybe it time to introduce fieldpath enclosing the prefix and the relative name and having method building the absolute name
2563,is there reason why we do not include the embedded metadata in the various maps
2564,not related to your patch but dislike the fact that the default value of encoding is auto while this value is not supported when exploiting facetmetadata later on it quite misleading defining the encoding type is indeed mandatory not optional not sure what to do about it but thought might as well mention it
2565,ok see how it was the easiest way to fix the issue considering the current state of the facetmetadata thing and the fact that dates are mapped to long which is not very convenient for es but don like it very much didn look at the lucene part or at which changes would be needed to do that but couldn we keep the auto value in the facetmetadata and determine the encoding type in the lucene specific part such as what we do here considering we have the sourcefield at hand without looking at the code say the issue is that for lucene we probably need to determine the encoding type several times just thinking out loud
2566,right fixed it in the actual commit where we introduce the new way to implement facets
2567,well defining the encoding type is optional to users the problem here is probably that we use the api type facetencoding in the metadata where it doesn really fit and more generally the issue is that the available types are really lucene specific with that in mind wouldn change that just yet and wait for
2568,right fixed
2569,it more conversioncontext bug than problem with this commit really the conversion context only contains bean context javabean class javabean property path but nothing about the document field ll add commit to make the conversion context include the field name in exceptions when we have it but can do miracles without breaking or misusing conversioncontext
2570,right fixed it actually there was message in the logger for that already used on the lucene side
2571,right fixed it
2572,right fixed it
2573,that code goes back to long before this pr it even been refactored at least twice and similar debug messages are generated for other types of mappings regular fields bridge defined fields probably not something to address in this pr created separate jira
2574,yes that really annoying what we call fields in lucene are called properties in es and es gives fields totally different meaning renamed to addsubfieldmetadata not very correct but at least it not ambiguous
2575,fixed it in the other pr thanks
2576,we use gson not jackson gson seems only serializes fields and not methods unless we use custom serializers the reflective type adapter the default seems to really only consider fields parent gson src main java com google gson internal bind reflectivetypeadapterfactory java and anyway the expose annotation used to ignore data when we cannot mark fields as transient can only be applied to fields not to methods elementtype field public expose also if the result of this method was being serialized good load of tests would be failing because initializedfields would not be understood by elasticsearch
2577,it doesn feel weird to me but agree enclosing it in separate object would be cleaner think we could leverage the pathcontext to generate those paths too ll work on that
2578,for some other maps there is as we sometime want to include only non embedded metadata especially when generating the es mapping here we never want that but we might as well be consistent anyway we ll all agree that something has to change in typemetadata nothing urgent though say it stuff
2579,the issue is mainly that we don have lucene specific metadata so we re putting this lucene specific encoding in the general metadata like we do for lot of other things if we wanted to move the automatic encoding resolution around there no lucene specific central place to store the resolved encoding so the only thing we could do would be to do type resolution every time we need the actual encoding which would be in org hibernate search engine spi documentbuilderindexedentity addfacetdocvalues document documentfieldmetadata facetmetadata object which find far more unappealing than adding that flag in the current metadata note that it not an issue of duplicating code we only use the encoding in one place it seems but really more an issue of re executing bootstrap code again and again at runtime anyway you re telling me we need to break free of lucene dependency and that definitely not the purpose of this pr but more of once we have lucene independent apis and perhaps more importantly engine we ll add lucene specific metadata on top of engine metadata as we will for elasticsearch and everything will be fine until then well we ll do as best we can
2580,if feels really weird to have the absolutename and the relativename maybe it time to introduce fieldpath enclosing the prefix and the relative name and having method building the absolute name
2581,is there reason why we do not include the embedded metadata in the various maps
2582,not related to your patch but dislike the fact that the default value of encoding is auto while this value is not supported when exploiting facetmetadata later on it quite misleading defining the encoding type is indeed mandatory not optional not sure what to do about it but thought might as well mention it
2583,ok see how it was the easiest way to fix the issue considering the current state of the facetmetadata thing and the fact that dates are mapped to long which is not very convenient for es but don like it very much didn look at the lucene part or at which changes would be needed to do that but couldn we keep the auto value in the facetmetadata and determine the encoding type in the lucene specific part such as what we do here considering we have the sourcefield at hand without looking at the code say the issue is that for lucene we probably need to determine the encoding type several times just thinking out loud
2584,looks good to me let you merge it with the others
2585,would have expected collections unmodifiablecollection here
2586,ok withdrawn you fixed it in the next commit thought you missed my earlier review comments
2587,this one is good to go too
2588,ok well like this one
2589,good to go once the other prs are merged
2590,apart from my question it looks good to me and it nice to see this one tackled
2591,ok this one is good to go too
2592,why did you get rid of using luceneoptions
2593,simply because there no way to add doc values field using luceneoptions it seems to be designed that way seeing the examples in the documentation agree it bit weird though another ticket maybe
2594,silly me think would prefer to keep the original field in addition with the sortable one it more in line with what we do elsewhere wdyt about adding something in luceneoptions wonder if it worth it given the fieldbridge plan but agree it bit harsh for the user to have to go in this sort of details while we usually hide all that machinery from him if had to do something think would add method to add sortable field which adds the original field and the doc values one in one go and hide this logic from the user of course it is bit redundant with the fact that we declare the field sortable few lines above but don think we can do better given the current api anyway agree this part is for another day
2595,it not strictly necessary but as you wish amended the commit about making it easier created the ticket
2596,merged thanks
2597,nice good to go once the pending one is merged
2598,thanks merged
2599,changed the status to on ice waiting for global decision on the es support
2600,now polished it bit notably by including the parameter in the generated doc but there not much to do as long as we stay on es be happy to apply this then if you can isolate the good parts es is out of scope for the specific issue we also need this to be able to document that if it works fine with es and possibly setup ci jobs
2601,refactored the pr to remove any es related stuff and to support es which happen to require different configuration ready for review fyi the es stuff has been moved to my es branch search compare hsearch yrodiere hsearch
2602,cool thanks reviewing
2603,don we need the groovy plugin on es having failure with the spatial tests when running it with mvn clean install pelasticsearch dtestelasticsearchversion
2604,it doesn exist below version maybe with different coordinates ll have look
2605,okay it org elasticsearch elasticsearch groovy ll try that and force push
2606,stupid question but do we really want to spend time supporting such older versions iirc sanne you told me aws supported would make us support and hopefully but wouldn care about older releases of es
2607,indeed wouldn spend too much time supporting older versions if it doesn work fine the pr is still valid as it does start the tests using the older version but wondered as the readme seemed to suggest that is supposed to work
2608,yeah think we should get rid of that and support the last version supported by aws provided it not too old the last version eventually and that all don think it has any value to support elasticsearch versions which are probably not supported anymore
2609,fixed or at least the server now starts with groovy support even for may we at least keep the settings even if we advertise we don support it in the documentation please
2610,yes happy to keep it for now thanks
2611,merged
2612,so this issue does not exist anymore
2613,it handled by elasticsearch maven plugin which essentially does that in our place
2614,looks good overall think ba ffa ff bd would merit its own jira as it bug not directly related to es you can keep it in this pr but specific jira would be nice as stated on irc have my concerns about the integer max value thing waiting for your feedback on this
2615,by the way here the commit that removed the size feature for the record
2616,ok looks like we re on the safe side for the integer max value thing thanks for checking let you split the other commit in with different jira number and merge thanks
2617,merged thanks
2618,do we agree this particular thing is not related to the fix at hand just to be sure understand correctly
2619,you re right it not noticed there was an issue here so fixed it assuming introduced it with my changes but it seems it was already there should revert this particular change
2620,would appreciate another jira it changes the way we interpret the user query so would prefer having specific issue mentioning it
2621,btw dont understand the following paragraph in the documentation this will work as long as there is not local analyzer defined with the same name if that the case hibernate search will ignore the analyzer when elasticsearch is used as backend and log warning this might sound complicated but we are looking for ways to ease the experience what is local analyzer do you mean that if there is with the same name this one cancels the use of the elasticsearch analyzer of the same name but does not make use of the local analyzer either is that worth just warning in that case
2622,thanks some important improvements in here highlighted couple minor expressions found confusing but they are not blockers can push this and send follow up if you prefer
2623,what is the just push it flag used for in general
2624,ve fixed the sentence issue around the dsl on the elasticsearch yellow status wrote down my understanding but maybe missing something but if you are correct then we did not need the readiness option in the first place so confused think we can push as is and do follow up
2625,what is the just push it flag used for in general we use it in two cases reviewer thinks it ok to integrate but can do that himself right away reviewer suggested minor improvements but leaves it up to the requestor to choose to follow up on the suggestions or decide to push it as is guess the first case is getting obsolete now that we have the option to merge from the web gui
2626,cool merged thanks
2627,why would you suggest this seems quite bad practice you have the option to start your es node as single node so it will be green and faster
2628,should we quote or italicize more like this queries the sentence seems weird if you don already know in advance what you mean
2629,and all but one the query generated by don understand this assume word is missing
2630,just noticed that in es if you have no replica your index will never be green it wasn the case in es think
2631,actually wrong checked second time and it seems messed up the configuration somewhere
2632,am not sure am following you but my understanding is that developer will only start single node the default settings do require more than one nodes to be green hence the option to run at yellow am missing something
2633,fixed and pushed new version
2634,asked stephen from joda to know when he plans to release time issues
2635,closing this pr following our discussion pr is coming for hsearch document the bug
2636,so think would have liked the last commit to be more step by step there are lot of changes which could have been made separately and think be more understandable overall like the changes apart from the original issue they fix few things that been bothering me for while btw don know if it github bugging but it looks like there is conflict but let wait for the other pr to be merged before rebasing
2637,thanks rebased addressed your concerns and split the last commit in two we can now wait for the other pr to be merged
2638,just rebased this on hsearch because it seems some tests enabled in are affected by these changes so rather have the ci execute those tests noticed that while working on which happens to have been fixed by accident in the last commit in this pr
2639,so as we discussed with yesterday had to add some fixes because of the rebase on top of hsearch the latter enabled more tests and some of those are failing due to this pr it basically pre existing bugs that only surfaced because changed the way we generate the es mapping we crawl through the document fields directly instead of going through the properties anyway just updated the last two commits following your comments didn rename the documentfieldmetadata documentfieldnametofieldmetadata properties to make it more obvious that they don include non embedded fields because if did should rename almost every property in typemetadata none of them includes embedded information along with the main type information if we do something thing it should be part of broader refactoring but then the relevance to hsearc and becomes less and less clear ll wait for you to come back to me before merging since not sure you had time to express all of your concerns
2640,so actually the more fix it the more tests begin to fail because previous bugs were hiding other ones ll just make another pr for all this metadata refactoring because it looking more and more like major issue sorry for the noise
2641,alright extracted the problematic code to we should be able to merge this pr as soon as the other one has been approved and merged
2642,we usually put things in this order tests private methods inner classes used by the tests it would be nice to conform to this order
2643,same remark about the order
2644,make it private class maybe
2645,make it private class maybe
2646,is it used anywhere else if not let make it private suppose it was the purpose of dropping documentidhelper
2647,you mention on the jira comments that this problem affects the lucene backend as well worth moving the test to engine
2648,yes ll see if can highlight the issue in an engine test
2649,meant to suggest to move this one not to add an additional one we don want to have too many redundant tests checking for the same things
2650,ll move to orm then engine tests are not yet executed on elasticsearch not even sure yet when they will be
2651,ll move to orm then engine tests are not yet executed on elasticsearch right forgot about that let merge this then the missing test for the embedded mode is an orthogonal issue
2652,rebased on master the build was failing because of which was merged to master few minutes ago
2653,addressed your concerns thanks
2654,merged thanks all
2655,know it preexisting to your patch but we should probably move this declaration to where it is used it makes no sense to have it here
2656,mmmmh did miss something or if isroot the whole work we did above was totally useless
2657,you re right there something wrong in here ll see what can do probably just add else
2658,thanks for the pr ve thought bit about it and not sure about that fix though the condition probably should be using org hibernate search engine impl immutablesearchfactory ismultitenancyenabled instead of checking the tenant id granted the effect would be the same since tenant ids are mandatory once multi tenancy is enabled but this would be easier to read it seems to me that if the tenant id contains an underscore there will still be problem the last one in particular make me thinks we re really shoving the issue under the carpet here think we should rather never try to extract the id from the elasticsearch id and simply use an in document id field by chance one pending pr added an id field search pull ll see if can get your test working this way and will submit pr
2659,think we should rather never try to extract the id from the elasticsearch id and simply use an in document id field sounds good out of curiosity what will go in the es id field
2660,out of curiosity what will go in the es id field same as now the actual document id as opposed to the entity id which is the concatenation of the tenant id and the entity id its main purpose is to allow es to know when an update should erase an existing document it would only be of use to hibernate search when querying by entity id using es id queries but this type of query is not implemented yet right know users can only query on the document fields which include the tenant id and the entity id in separate fields anyway
2661,closing this pr because of my follow up search pull thanks
2662,thanks just force pushed few minor changes will merge when the build passes
2663,merged thanks
2664,yes it good to go
2665,not worth fix but we agree we don need to test for the id to be not null here
2666,surprised the hashcode only uses the class hashcode while the equals involves the id
2667,if we end up amending this commit let fix the message and use explicitly
2668,same here
2669,same here
2670,well let do search and replace if we decide to fix it
2671,couldn we change this to use the specific type instead of changing all the tests
2672,maybe remove the commented
2673,if we end up amending this commit don think the is in order here no need to fix it if we don amend the commit though
2674,missing if maybe
2675,missing
2676,maybe dynamic boosting would be better title
2677,would have used the plural form static boosts are however supported think it sounds more natural but maybe it just me
2678,nice trick
2679,maybe elasticsearchunsupported features it
2680,very minor is it lucene query even when using elasticsearch
2681,not related to this line but to the commit message of add aacd look for hsearch hsearch
2682,am not sure about removing these tests do we test elsewhere that the indexed fields are effectively numeric if not would add your new test for es lucene agnostic tests that the field bridge is ok but think would create backend specific tests to check that the indexed document is ok
2683,interesting in which case might we have conflict suppose it related to the null case just vague remembering of previous pr maybe we should add prefix or suffix for this field specific to es to avoid conflicts
2684,have sentiment of vu same remark about the fact that worried we re losing tests checking the document content
2685,actually we do if the ids are both null the objects are not equal
2686,actually it on purpose it the only way to have consistent hashcodes throughout the lifecycle of an entity which may involve id changes and still have different hashcodes sometimes could have used constant though see this to implement equals and hashcode using the entity identifier bottom line it both the simplest solution and the only way to do it right since we don need performance here wouldn bother doing otherwise and believe me it hurts me to admit that
2687,this would still require changes in the tests because in some places we queried blog and not its subclasses which we can do without filtering explicitly on the internal class field passing the type to createfulltextquery will include subtypes and we can filter explictly on the internal class field in backend agnostic way figured it would be better to at least be consistent always query the root type since this test is already hard enough to understand
2688,done
2689,done
2690,done
2691,done
2692,done
2693,done
2694,done
2695,done
2696,done
2697,done
2698,done
2699,fixed the message
2700,it really not the kind of test we should be spending time on in my opinion white box integration testing feels like luxury when we re lacking simple unit tests anyway copied the older version of those tests to new lucenenumericfieldtest class
2701,solving the issue it in backward compatible way is probably impossible as we discussed created to at least throw explicit exceptions when the problem occurs
2702,and same answer created luceneprogrammaticmappingtest nevertheless
2703,that right the focus is on jmhbenchmarks concurrentreadwritetest readwritetestreader it good to see that the other metrics didn change
2704,fixed as suggested and rebased
2705,might be in good enough shape for you to give it try as well
2706,to try it out search pull files diff
2707,thanks for the explanations ok to merge on my side ll let you see with
2708,cool merged it
2709,just tried and the code below does the same job while at the same time limiting the chances new rules on the parent are not taken into account in this module because it only overrides the smaller possible subset of the configuration maybe it worth it xml de thetaphi forbiddenapis verify forbidden apis jdk unsafe jdk deprecated verify forbidden test apis jdk unsafe jdk deprecated source plugins
2710,don know if it on purpose but the syntax createhsquery lucenequery bookentity class should be preferred as createhsquery is deprecated
2711,shouldn the scheduledexecutorservice be cleaned up in this case too mean considering the exception is not propagated and the caller has no way to know the operation failed
2712,the synchronization seemed strange when first saw it but guess concurrentmap putifabsent is not used here because additional changes especially on currentreaders are needed when creating new perdirectorylastestreader
2713,don get why the lock is used here the perdirectorylasterreader instance being constructed has not been exposed to external objects here so no one else could be changing it at this specific moment
2714,when the pair being closed is the current pair we don update the perdirectorylatestreader here which might result in org hibernate search indexes impl periodicregreshingreaderprovider perdirectorylatestreader getlatestreader returning stale reader because it points to closed readerusagepair with closed indexreader or am wrong
2715,this member is never used
2716,there typo in the file name re reshing
2717,nice trick thanks ll try that
2718,it wasn on purpose just that this code is actually quite old ll fix that
2719,
2720,wdym by cleaned up to set the reference to null if so that not particularly important as this component can be restarted
2721,right in this case if there is concurrent request it preferrable to have thread wait on the synchronization lock rather than doing multiple io operations to attempt to open multiple readers and then have to close and discard one of them think of it in terms of spent resources if you lock the thread will be parked and cpu time assigned to do something useful on different thread the cost is if course that your current thread will have to wait milliseconds were is the time for the other thread to complete the indexreader refresh in the alternative strategy using putifabsent the thread will not hit the lock but it will have to perform the same io operations which will take it milliseconds to do as it the same operation as in the previous case so if you compare the two scenarios while the lock might looks like contention it actually frees the cpu but does less io and takes the take time for the client to actually get an indexreader so that why choose for the synchronized block
2722,any current indexreader has an additional token in the usagecounter so if close method is invoked on the current ir it won actually be closed see also the comment on usagecounter also on the method refreshifneeded you ll see that the no longer current indexreader is closed yet this simply means that its usage counter is decremented so that if any query is still using it it won actually be closed but it will only be closed when the last query which is using it will be closed
2723,in practice this might not be needed as something else will have to publish the well constructed class but it much easier to reason about concurrent structures if you guarantee that reads and writes all happen consistently through the same barriers in this case we choose that the current field is guarded by the read write lock so all its access should be using it not sure that the code would be really correct the lock although that certainly hard to proof simpler to keep the lock as it uncontended it won hurt
2724,my bad thought we also used for calendar
2725,merged thanks
2726,merged thanks
2727,merged thanks
2728,we didn include the ids in the indexed documents so searches on the id used to fail the field was missing we might want to revisit see search blob master elasticsearch src main java org hibernate search elasticsearch impl elasticsearchhsqueryimpl java and search blob master elasticsearch src main java org hibernate search elasticsearch impl elasticsearchhsqueryimpl java in the documentation we recommend to not sort on the id field especially for the lucene backend where it leads to erratic behaviors but think it will work with es and the new mapping
2729,right thanks for spotting this self assigned and added this ticket to the current sprint yoann rodi re yoann org hibernate noorm team on october at guillaume smet notifications com wrote we didn include the ids in the indexed documents so searches on the id used to fail the field was missing we might want to revisit see search blob master el asticsearch src main java org hibernate search elasticsearch impl elasticsearchhsqueryimpl java and search blob master el asticsearch src main java org hibernate search elasticsearch impl elasticsearchhsqueryimpl java in the documentation we recommend to not sort on the id field especially for the lucene backend where it leads to erratic behaviors but think it will work with es and the new mapping you are receiving this because you were mentioned reply to this email directly view it on github search pull issuecomment or mute the thread auth aazmzhmkipqmduzpvtlje dtxtqqley ks zhfgajpzm ka az
2730,jenkins retest this please
2731,yeah seem to have confused the ci with my rebases again it only building the second but last commit for what it worth it passes on travis ci org yrodiere hibernate search builds
2732,jenkins retest this please
2733,merged just added single character to fix javadoc typo
2734,merged
2735,looks fine merged
2736,jenkins retest this please
2737,merged thanks
2738,just quick comment on this one whatever the representation of embeddeds is in the index we need to also make sure that we can sort on them sorting on nested path requires an extra parameter don know if you took care of this and it might be better to tacke this once we agree on the representation but wanted to mention it
2739,don know what extra parameter you re talking about so guess didn take care of this are you talking about the nested datatype in elasticsearch because didn tackle this issue at all simply made sure that when we index fields we use the field path concatenated prefixes instead of using the property path java properties like we used to which failed miserably as soon as an had custom prefix so in fact just made sure that the json we send to es for indexing has structure that matches mapping we defined
2740,might be wrong but reading the commit comments understood that you might have used nested fields to deal with embedded it probably the way to go but it has consequences this was an open issue in our current implementation we haven taken good care of it see toelasticsearch isnested for instance see request sort html nested sorting for information on nested sorting
2741,thanks for the piece of information from what read this applies to the nested datatype in the below example offer is field of type nested one thing to note is that when indexing you can pass arrays for any field including object fields but they get flattened internally so you can nest without using the nested datatype the nested datatype brings more subtle behavior which guess is why special care should be taken when sorting currently every indexedembedded path component is mapped to the object datatype see org hibernate search elasticsearch impl elasticsearchindexmanager getorcreateproperties jsonobject string the jsonobject have no type properties and the default is object did not change anything to the mapping just made sure we produce correct json documents when indexing from what can see relates more closely to the issue you re mentioning but agree we ll have to address that one too
2742,adding the needs work label as just noticed there is some incorrect magic in org hibernate search elasticsearch impl fieldhelper getpropertymetadata entityindexbinding string that did not address will add tests demonstrating the issues and try to solve them
2743,you should be able to rebase this one
2744,thanks rebased on master
2745,merged thanks
2746,could we wait for the elasticsearch part to be implemented for morelikethis queries before removing the experimental flag or do we consider that we can break it in anyway
2747,we can change it in anyway
2748,merged thanks also created hsearch to consider dropping other flags at the very least when we release
2749,couldn test it myself but this seems appropriate merged thanks
2750,thanks couldn test it either but we ll see if ci windows likes it
2751,jenkins retest this please
2752,not directly related to this pr but be aware that few tests are skipped using elasticsearchsupportinprogress and they probably should be reevaluated too
2753,jenkins retest this please
2754,thanks for your feedback just force pushed your concerns should have been addressed also added comments to the various uses elasticsearchsupportinprogress mentioning the jira ticket
2755,looks good merging
2756,merged thanks
2757,why do you need to have value for elasticsearch
2758,we usually add comment for this just comment stating that this test is specific to lucene would do
2759,well spotted shouldn have committed this ll revert that
2760,jenkins retest this please
2761,jenkins retest this please
2762,could you rebase this one now that we merged hsearch thanks
2763,same as in already did actually strangely github is showing commits aef and cc as being part of this pr but these commits are already on master
2764,same solution as in amended my last commit with no change just to change the dates and hash and force pushed it seems to have solved the issue in github interface
2765,looks good to me apart from my minor comments
2766,thanks it should be good now apart from the classname classname thing where may be able to give us more information
2767,merged sorry for the lag
2768,the class names should be annotated with classname classname
2769,would have named it metadataprovidingtikametadataprocessor looks more natural
2770,know the existing code is not consistent on this but it metadata without the hyphen
2771,maybe hascreatedtempfile would be better thought it states if the file should be temporary or permanent
2772,no space before the
2773,no we re actually stopping with that practice afaik
2774,right wanted to make it easier to spot using auto completion especially for people who know about the tikametadataprocessor but not about the field metadata yet but guess it not really worth the weirdness
2775,right it was copy paste fixed
2776,fixed
2777,fixed
2778,looks like you missed one tikafieldmetadataprovidingmetadataprocessor when renaming
2779,sorry fixed
2780,right don think there is value in keeping that meta information over the years of our docbook usage we never really made use of the difference between classname methodname etc
2781,ok yoann could you simply add backticks to the class names so that they are formatted nicely in the doc once it done ll merge this one
2782,done also added commit to fix the missing backticks in the rest of this file there are plenty just ignore it if you think another pr is necessary
2783,could you rebase this one now that we merged hsearch thanks
2784,already did actually strangely github is showing commits aef and cc as being part of this pr but these commits are already on master
2785,amended my last commit with no change just to change the dates and hash and force pushed it seems to have solved the issue in github interface
2786,in dc commit message builtinaraybridge builtinarraybridge
2787,thanks fixed the issues and answered your question
2788,merged thanks
2789,maybe we should follow the convention used in projectionconstants something like hsearch nestingmarker and hsearch thismarker not sure about the camel casing depends on what you want to convey know projectionconstants is not entirely consistent but it would follow the rule of the majority
2790,is the case of is the case for
2791,what is the rationale behind the choice of this for this marker don find the name very explicit
2792,ok done
2793,right fixed thanks
2794,this marker is useful when collections are indexed for instance java public class myentity indexnullas null private list mycollection when mycollection contains foo bar the following fields will appear in the lucene document mycollection foo mycollection bar when mycollection is null the following field will appear mycollection null when you re in the second case you cannot know only from the lucene document whether the field represents collection element say mycollection in pseudo code or the collection itself still in pseudo code mycollection or mycollection this to be more explicit this or self are the only words that came to my mind and seemed to fit the meaning of this marker it states that the field value is not the value of collection element but really the value of the embedded itself be aware though that in order to fix hsearch already refactoring this just using string for the nesting path is not enough the marker has to convey more information so it might not be worth long discussion
2795,think object value would be better don know if you kept the marker in the follow up of this work
2796,objectvalue it is then changed that and force pushed yes the marker is dropped as part of hsearch we don need it anymore because the nesting marker carries more information
2797,nice merged
2798,ok nice also think we should make the es version parameter of the build so to run ci jobs with various es versions ll open separate jira for that
2799,merged
2800,looks good overall
2801,you ll still send this mail right on declared vs runtime or is it settled
2802,well think it settled considering the last example gave you that what put in the bval issue created here moreover the last commit fixes the oddity that was bothering me and triggered the question have the email mostly prepared if needed
2803,ok
2804,merged thanks
2805,fixed
2806,do we actually need typeforvalidatorresolution in here shouldn delegate and type parameter suffice for determining the identity
2807,also the hash code could be calculated once and be cashed
2808,don think it can be null
2809,no it can it either valid typevariable or the ones we forge
2810,force pushed an update
2811,didn we agree that the null check on delegate isn needed sambe above
2812,oh thought you were checking with me that typeargument cannot be null yeah agreed will fix
2813,closing this one opening new one with additional fixes
2814,rebased and merged thanks
2815,merged thanks
2816,instead of the gazillion of parameters should we rather have dedicated methods such as listproperty etc each taking the required parameters only definitely separate thing though
2817,merged thanks
2818,jenkins retest this please
2819,merged thanks ve added one more commit with minor adjustments most notably to have the test assert on the paths first and omit the assertion on count which usually isn as helpful in case of test failures
2820,bekhta added some more commits it should be good now it not quite clear to me why we moved the code for creating the proxy it for internal usage only and now we ve increased the public surface also if we explicitly exclude the protected stuff in the comments anyways let move forward with it my last question is on the names of the def members ve used the same names for the simple version accepting strings and the overloaded more powerful version accepting tagdef attributedef whereas in the annotations we have to use different names as we cannot overload the methods there think the simpler names are nicer but if you prefer to use the exactly same ones as in the annotation counterparts we can do that
2821,rebased and merged thanks to both of you
2822,so that the test failing for me after my changes and ve come to think that this assertion actually is wrong there should be no violation as protocol hasn been given hence no restrictions apply for the protocols before my change it would result in violation as we call addprotocol with an empty list of protocols all the protocols are disallowed
2823,merged thanks
2824,jenkins retest this please
2825,rebased and applied thanks
2826,can you open an issue for this one
2827,looks like this one was based on an old version of hv opening new one based on the right version
2828,here translation for ukrainian language javax validation constraints negative message strict true javax validation constraints positive message strict true
2829,applied your additional suggestions as well bekhta thanks
2830,ahaha
2831,closing superseded by
2832,can we size it with or perhaps
2833,or maybe even use stream containerelementconstraints stream filter getcascadingtypeparameter null collecttomap collectors tokey collectors tovalue
2834,should we create jira issue with an example
2835,do we still need this var probably yes just looking at the gh diff so lacking the full context
2836,used streams everywhere and you spot the one place where didn
2837,we don good catch
2838,done
2839,
2840,hi bekhta sorry for not answering earlier was busy preparing the beta of hv and didn have chance to review this before added couple of commits mostly to avoid instantiating new objects and be consistent with the rest of the code as for the tests for positive negative added tests in the tck that why there weren any tests in hv ll include them for now but might remove them later when will review the tck tests thanks
2841,merged thanks
2842,nice thanks bekhta
2843,current status we are waiting for the next release of asciidoctor ant before merging this we need the extension to work for hv and bv
2844,bekhta thanks amended your commit as the extension can be added to the shared configuration part instead of adding it to both executions
2845,ok cool
2846,hi followed your advice about annotationdef and here what ve done moved some parts from constraintdef to annotationdef and extended from it as constraintdef is an annotation as well right also added annotationsasparameters to annotationdef it contains those annotation parameters which are annotations themselves moved createannotationproxy to annotationdef as it looked as better place for it the only thing that like to improve is to cover case when parameter is not an array of annotations but single annotation right now there seems to be no such cases but like to add it so the functionality is more complete so if in general the approach is fine ll add this additional functionality for single annotation
2847,force pushed rebased version with one additional commit have to discuss something with gunnar before merging
2848,closing this in favor of which is based on this one thanks bekhta
2849,bit surprised we need this
2850,don think we need this either
2851,what if something is defined in both elements think the protocols takes over but it would be nice to check this
2852,it would be nice to have one check with an unsupported protocol when other protocols are defined
2853,we discussed it with gunnar the idea would be to have new annotationdef type similar to the constraintdef approach with annotationtype and map of parameters this type would replace tagwithattributes and attribute and avoid the need to refresh the configuration after each operation the new annotationdef would be transformed to annotation proxies in configuredconstraint createannotationproxy you would need to special case if the value is an annotationdef and recurse into it the overall idea is to avoid unneeded instantiations to keep the creation of the annotation proxies all in the same place if it not clear feel free to ping me for additional discussions
2854,ll double check this but as remember there are different sets and maps for each thing tag attribute protocol etc and validation will fail if you add protocol for example data for img src then validation will fail as img tag is absent in tags and the same for the attribute but again ll double check if that really so
2855,bekhta can you take look at this pr validator pull it based on your but takes slightly different approach for handling the inner types of in the api instead of having one fluent invocation on one level this adds new tagdef and new attributedef for those for the common case of no further configuration on the next level an overloaded version of just taking string is added it failing the test must have done something wrong within the implementation but before going further wanted to share it with you to discuss on the api like that it makes clearer when one element has been fully configured as opposed to one huge fluent invocation wdyt
2856,hi your approach looks cleaner without those instantiations of inner classes inside safehtmldef and as you said it easier to see where definition of one attribute starts and where it ends
2857,ok ll check out the test failure then and update my pr let drive home this one
2858,merged thanks
2859,good catch merged
2860,rebased and applied thanks
2861,closing will create grouped pr
2862,the only difference that ve found is that in other cases list annotations are using arrays to declare list elements and when changed mixdirectannotationandlistcontainerannotation to do the same it helped ah ah also played the spot the differences game but didn find this one so suppose it bug in jdk fixed in jdk would be for just fixing the test people using list will have multiple annotations in it or they won need it anyway think it sufficiently corner case so that we ignore it especially because it fixed in the next jdk version just wanted to have stable tests for jdk and so let just add the braces and leave with it wdyt thanks for getting to the bottom of it
2863,think that it good idea to start with fixing the test ll rework this commit to do just that add braces to annotation as for the check itself say that there still something that we can improve in next case java min list min min min annotation type method constructor runtime validatedby mixdirectannotationandlistcontainerannotation mixdirectannotationandlistcontainerannotationvalidator class public mixdirectannotationandlistcontainerannotation ap will report errors for each min min min that there mix of min and list but we should come up with something better than what ve done in the initial commit
2864,merged thanks
2865,we need to wait for the metadata api to be updated otherwise ci will be broken
2866,can this be merged now using beta as api version
2867,closing will create grouped pr
2868,nice do we have one for mixing say list and arrays too
2869,jenkins retest this please
2870,what kind of changes does it still need
2871,just need to check that throw the right exception type we should be able to merge this today
2872,fixed the exception type and force pushed should be ok to merge now
2873,fixed and force pushed
2874,thanks
2875,ah we ve missed that one in the spec
2876,isempty
2877,should we rather show the list of extractor classes as that more familiar to the user than our internal descriptor type
2878,can we try and use it lambda style inline when calling addvalueextractor too just to make sure that this works
2879,fixed
2880,saw you created an issue to track it
2881,right done
2882,as mentioned on hipchat not an option
2883,looks good to me just the one javadoc comment thanks
2884,in the issue you created you seem to suggest than just setting the baseuri to dummy one makes the issue go away typically is my relative url txt valid with baseuri of would have expected to not be valid ask this question because if it the case we might consider having the default baseuri set to
2885,hi forgot to change the labels after ve applied the changes didn add an invalid relative uri test as jsoup is not failing for such cases
2886,bekhta merged the second commit with few additional very minor changes thought it was time to merge this one you will have to rebase your other pr about the protocols
2887,should there be note here stating that relative urls will fail validation if baseuri is not set
2888,let make it for for now
2889,to specify the base uri to be used to resolve relative uris
2890,would use baseuri to be consistent with java net uri
2891,suggest something like base uri used to resolve relative uris to absolute ones if not set validation of html containing relative uris will fail
2892,it would be nice to also have test with real relative uri some relative url image png one working and one not working if the uri tries to go back too far
2893,it seems jsoup does not fail validation if the relative path goes back too far jsoup stringutil resolve url base string relurl uses new java net url base relurl which will resolve with test png as url containing it is not examined further no active issues with jsoup in this area so we might consider raising one what do you think if the baseuri default value is set by default the default behaviour of safehtml would change since it currently does not allow relative paths
2894,if the baseuri default value is set by default the default behaviour of safehtml would change since it currently does not allow relative paths yeah wondering if we should consider it feature or bug if in the future jsoup checks the relative url suppose it makes sense to keep it this way was mostly wondering if people would really consider providing the baseuri in the annotation definition and if maybe we should just pass to jsoup and consider relative links always valid from our pov don have strong opinion about it though
2895,while it was surprise to me that by default got validation failure for both relative images and inline data images hv it hard to know if someone depend on this behaviour to ensure their definition of valid input from my perspective say it probably both sensible and expected to support relative paths by default but changing the default is scary
2896,yeah let be safe bekhta can you address the minor comments made then we will merge it as for backporting it as mentioned by gunnar we would only do it if we do new release for now we don really have lot of material to justify new release and the associated maintenance burden but we ll see in the future using the next alpha of hv would be an option if you use jdk
2897,yes plan to make changes to both prs related to safehtml later today
2898,can one of the admins add this person to the trusted builders reply with add to whitelist or ok to test
2899,hi yvind thanks lot for sending this pr it seems though marko bet you doing this change there is already pr suggest to continue discussion over there as it bit more complete doc update fluent dsl update
2900,rebased and merged thanks bekhta
2901,cool thanks
2902,bekhta looks good and really great to see request for enhancement addressed this fast
2903,bekhta marked it as changes suggested as there are couple of minor changes gunnar suggested once they are fixed we could merge this one as for the programmatic api issue it should be pursued separately and then the tests should be updated created affected it to you as you seemed to be interested in it
2904,ok great was thinking that the programmatic api change should go in this one as well hence the delay on other changes
2905,bekhta yeah the bottom rule is whenever you can split task in separate ones that make sense do it obviously we want to avoid micro tasks that don make sense so there balance to find this way you get the code in earlier and avoid big pr being postponed again and again
2906,bekhta should we close this one in the favor of
2907,if it ok to have those two issues combined in on pr say we can close this one
2908,yes that ok thanks
2909,we already got additionaltagswithattributes did you consider to enhance tag instead of adding new annotation accepts multiple attributes so we had to add all protocols for all of them if more than one attribute is specified but that should be alright wdyt
2910,whitelists whitelist it its
2911,should we decide to go this route with new annotation it should be named attribute for the sake of consistency also some tags on the new annotation and on additionalprotocols would be good
2912,agree the name additionaltagswithattributes is maybe bit off if you add string protocols default to it but that probably preferable to adding the protocol
2913,ll remove the protocol annotation then and make the corresponding changes
2914,hum adding this in micro is bit of an issue micros shouldn alter the api at all also we don have plans for another non bugfix reease at this time prefer to have this in only for now should we then do another release it be candidate for backporting of course
2915,would be good to have more than one element in the test so we know that works too
2916,oh just realizing that some unfortunate approach has been chosen for safehtmldef in the past the programmatic api should never require to deal with annotation proxies instead there should have been members added on this def class so the properties can be set via the fluent dsl can we get this fixed for
2917,yes of course so we should deprecate current safehtmldef additionaltagswithattributes and add something like java public safehtmldef additionaltagwithattributes string name string attributes string protocols return this or java public safehtmldef additionaltagswithattributes tag additionaltagswithattributes return this public static class tag private final string name private final string attributes private final string protocols public tag string name string attributes string protocols this name name this attributes attributes this protocols protocols or java public tag addtag string tagname return new tag tagname public class tag private final string name private final set attributes private final set protocols private tag string name this name name this attributes collectionhelper newhashset this protocols collectionhelper newhashset public tag addattribute string name attributes add name return this public tag addprotocol string name protocols add name return this public safehtmldef add return safehtmldef this instead right which option would you prefer
2918,let think about it from user perspective that what like to be able to write new safehtmldef whitelisttype safehtml whitelisttype none let me add tag and configure all the way additionaltag img attribute src protocols data snafu attribute ref protocols bla additionaltag attribute href protocols data attribute bla attribute blub fast path for adding tags without further config additionaltags foo bar
2919,hi bekhta sorry for being so late to the party the bv release drained most of our workforce lately think there logic error here gunnar spotted it in his comment here validator pull commits baa be dbf df but without underlining it the protocols should be attached to the attributes and not to the tag the issue can see with this is that we would break the compatibility if we make attribute its own annotation suppose we could follow the same logic as for the tags and add an additionalattributeswithprotocols thingy wdyt
2920,also just saw can help with it for positive negative as part of this pr if the approach used for splitting number and monetaryamount that ve used is ok usage of basepositivevalidator basenegativevalidator and comparing method
2921,merged thanks bekhta
2922,yes that be great also we should discourage using of the existing and thanks
2923,ah good catch with the docs thanks
2924,
2925,think docs are also missing email and notempty for bv constraints didn want to add them in this pr as they are not related to it can open another pr for them if needed
2926,merged thanks bekhta
2927,java time types java types
2928,won build until validator pull is merged
2929,rebased and applied it should be backported to
2930,done
2931,thx
2932,jenkins retest this please
2933,jenkins retest this please
2934,jenkins retest this please
2935,rebased and applied thanks
2936,where is xavier name coming from
2937,reckon you won like it but what do you think of having dedicated validators for the individual type instaed of the huge instanceof switch here prefer that as validator resolution is done only once so we won pay the price for checking the type for each validator invocation again and again
2938,interesting what the rationale for not using array length
2939,it based on decimalmin max validators so let the name of the original authors
2940,don have strong opinion about it but think we should keep consistency mimicked decimalmin max so if we decide to change it we should probably do it globally in later commit
2941,consistency it based on the size validators but agree we should use array length instead pushed an additional commit to fix it for size and notempty
2942,ah yes makes sense
2943,for splitting up both can be done as follow up though if you prefer
2944,yes prefer getting the release out of the door asap will create new jira to track this
2945,
2946,
2947,if you agree ll open specific jira sounds reasonable looks good overall going to merge it let see what others say on the schema structure when proposing it for bv
2948,hmmmm so it hurts to say that again but gunnar was probably right from the beginning if we end up having to use regexp we probably use the wrong tool or in this case think the tool is not very well designed for its purpose could you take look at tools forbidden apis looks like the signature file format is simple tools forbidden apis blob master src main resources de thetaphi forbiddenapis signatures jdk deprecated txt you can disable method or class if it makes better work we should use it instead note that in passing we might be able to have less checkstyle configuration files as at least one of them is just to enable junit for parts where we rely on junit note that even if we use junit we should disable the assertjunit class so maybe we need one signature file for generally disabled api might be handy in the future and one for junit that we enable only for projects relying on testng was bit worried about how we would share the signature files but it looks like we can reference file in jar even if not documented so we could put the necessary signature files in the build config jar see the end of the comment here tools forbidden apis blob master src main java de thetaphi forbiddenapis maven abstractcheckmojo java
2949,yes ll look into this later today
2950,sooooooo here what ve done configured forbidden api plugin with some bundled signature files jdk unsafe jdk deprecated jdk non portable removed checkstyle rule for system out and replaced it with forbidden api bundled jdk system out added suppressforbidden annotation so it can be used to suppress some illegal classes and methods where it really needed not sure that ve chosen the best place for it though removed all different checkstyle configurations and left only one with all the rules removed license header checks from checkstyle configs so there can be one checkstyle config for all modules and replaced those checks with license maven plugin also added headers for files that were missing them added maven remote resources plugin so that all config related resources from build config module can be easily used in configurations of other plugins also did some cleaning of issues reported by forbidden apis plugin most of them are using something without specifying locale timezone charset
2951,bekhta very interesting work kudos added couple of comments inline about the class vs list of methods question if we have to provide the list of methods we would need to document how to generate this list
2952,ve tested the class vs method list thing it enough to just use the class so ve dropped all methods from the files also rebased to master and applied fix for missing headers in new xmls
2953,ok looks good waiting for position on adding the locale and other things everywhere
2954,bekhta merged this one thanks for your hard work reworked the commits so that they are bit more atomic editorialized bit the comments and also renamed the annotation to so that its purpose is more clear one thing also fixed is that you can use the maven remote resources plugin to get the license resources in the parent pom as build config might not be deployed yet or might not contain the resources if it an old version included this in your commit that being said chose to go the variable way in follow up commit not really fond of special casing the parent
2955,oh nice missed these configuration files when used it on the bv tck
2956,is there reason why you enable it per project there are projects where it doesn make sense
2957,would have expected it to be redefined in each submodule at least that what needed to do for bv tck do you have clever trick to avoid that
2958,is there reason not to use string format here
2959,this is removed in later commits with adding of maven remote resources plugin at first was thinking about adding it to every pom but got lazy and done it bit differently in the end this maven remote resources plugin do something similar to maven dependency unpack and places those configs in target so each module should have all configs available in target folder
2960,bit sceptic about this type of changes what your take on this not worried about these occurrences but more about how it will be frustrating when we write new tests
2961,though about it the reason why left it as is is because the messages here use such things for inserting parameters and it will require to update messages to use something like or and wasn sure if that was safe change to make if it is say let change it to use string format
2962,mmmh maybe we could use directory which makes more sense such as build config resources or something similar
2963,you can omit the groupid here not sure it done for the existing ones but we try to do it for the new ones
2964,interesting didn know this plugin and it in fact very useful nice trick
2965,not be used
2966,you need to define all the methods even if you have defined the types
2967,same question here about class vs list of methods
2968,yeah ok let it alone it safer
2969,not very happy about them as well that why ve done them all in separate commit so it can be removed if we decide so these things comes from those jdk unsafe jdk deprecated jdk non portable they seems to be useful to have in general judging by the names
2970,not sure about that ll check if it ll work with the class only and let you know there not much about the format of these files or in other words haven found anything about the format in the documentation of the plugin so just looked at format of provided files but haven checked for such cases
2971,ahh just remembered that one of the plugins either forbidden apis or check style illegal imports wasn picking up the java lang stringbuffer as it from the automatically imported package but not sure about which one it was of these two again ll play with different cases and ll let you what works and what not
2972,there no licenses in documentation module only pom file has header and all others don
2973,so it actually has to be class retention source isn enough
2974,why is it forbidden to begin with
2975,why is javafx forbidden by default
2976,personally not forbid something like now it is legit for our testing here generally strongly prefer to not go overboard with this kind of checks it not that we had an actual problem here
2977,on the headers of these files we had left them out intentionally but then there is no harm by having this small constant header so why not
2978,believe it comes from jdk non portable
2979,did add those as their absence was causing the build to fail but we can just add an exclude rule for them if it preferred not to have headers here just say how it should be
2980,not sure why it cannot be source but ve checked here tools forbidden apis blob master src main java de thetaphi forbiddenapis suppressforbidden java and it has retentionpolicy class for it
2981,do agree with you ve looked at those bundled files and these locale timezone charset things comes from jdk unsafe as there seems to be nothing else except locals and timezones charsets in those unsafe files say it can be safely removed link to the signature files if needed tools forbidden apis tree master src main resources de thetaphi forbiddenapis signatures
2982,bekhta is this still left over are you planning to revert this change as per our discussion above same question for some more places where locale getdefault is used now
2983,is there any further action needed here
2984,we can still enable it globally if that simpler
2985,ok
2986,can we disable this check then it seems to do bit too much
2987,for cutting down the number of changes here let limit to the actual issue at hand
2988,no leave them in now that they are there
2989,ve checked that mentioning just class is enough and updated the commit with that change so nothing else for this one
2990,yes was waiting for your response on this one was just sure if to remove them or not ll remove jdk unsafe and jdk non portable from the config as well as that commit with changes caused by it
2991,rebased
2992,merged thanks for the review
2993,why is it that shows up here same for some other methods in this test
2994,suppose some eclipse generation magic used when wrote the test not the first time notice that ll fix it
2995,merged thanks
2996,limit to throughput is nice change as it was taking ages to run this in all mode
2997,rebased and applied nice improvement
2998,merged thanks
2999,pushed to and master thanks
3000,tested this manually which think while not perfect is good enough and even if things went wrong the impact is low so think that ok
3001,bekhta think we should only keep testmultilevelpregeneratedvalidation don think there is point to measure the case where we don have any constraint or am wrong ll review this particular case and will revisit my review if we end up keeping more
3002,thanks for the review ll make the changes later toady as for the test without constraints it was meant to be something to compare the results to but thinking about it now it doesn make much sense that what sometimes happens when writing code late at night
3003,bekhta pushed an additional commit to your branch nothing much we have major problem with this it does not compile with bv anymore so we can build the performances tests for the older versions or for bval anymore maybe we should separate the performance tests in submodules one for bv and one for bv
3004,maybe we should separate the performance tests in submodules one for bv and one for bv yes that or we have separate source folder for the new ones src main java bv this source folder can be added for the current profile using the build helper maven plugin the only issue is the reference to the classes from benchmarkrunner this would have to be changed to deal with names and ignore any benchmarks non present open to both approaches having everything in one module is nicer from an execution point of view having single report etc but the name based references are bit more error prone for misses when renaming classes
3005,maybe name based references can be fixed with an annotation on the test classes and some simple annotation processor which will provide list of all found annotated tests as return value of some generated by ap method gmt gunnar morling maybe we should separate the performance tests in submodules one for bv and one for bv yes that or we have separate source folder for the new ones src main java bv this source folder can be added for the current profile using the build helper maven plugin the only issue is the reference to the classes from benchmarkrunner this would have to be changed to deal with names and ignore any benchmarks non present open to both approaches having everything in one module is nicer from an execution point of view having single report etc but the name based references are bit more error prone for misses when renaming classes you are receiving this because you were mentioned reply to this email directly view it on github or mute the thread
3006,go for gunnar approach as good first step it not as if we change these names often
3007,merged thanks
3008,think you can make this private same for the other classes below
3009,think these classes should be outside the generator class it weird to include them in the generator class
3010,let make it final just good habit to take
3011,private final same below
3012,maybe call it generate instead of get it more to the point think same below for visitor
3013,would say just keep the constraint the point is to exercise the validator code not to have an expensive constraint checked would have used for change but it not part of the spec either
3014,same remark about get generate for this method and the other one below
3015,for all the bv compatible classes you could use class getname so that we limit the issue with renaming to the bv classes it not particularly efficient but it not that important as it just startup cost
3016,maybe add comment just before starting the bv classes benchmarks specific to bean validation it would be even more important to explain why they are not added in the same way as the others
3017,yes no problem just give me sec
3018,merged to master and pending pr for with some follow up adjustments thanks
3019,reworked that last commit and force pushed
3020,rebased and applied
3021,as discussed on hipchat it would be nice to have specific implementation for the common case where we have only one node other than that it looks good to me
3022,force pushed an update that addresses all your concerns
3023,rebased and applied thanks
3024,what the reasoning for initializing it lazily instead of doing it in the constructor and making the field truly final btw can rootbeanclass ever be null
3025,it not wrong to put it here but it not needed as per my original intent for it meant it for marking those fields in classes shared across threads whose type doesn tell whether its mutable or not so all the list or set fields in beanmetadataimpl should be marked with it validationcontext otoh is not shared across threads so wouldn see the need to mark them here just to give some insight into the rationale as said it not wrong
3026,should we remove isconstrained altogether then not sure why it makes perf difference but we can do it if it helps there is still one usage in validatevalue btw
3027,nice
3028,why is it done lazily seems we ll need it in any case
3029,are the null checks really needed
3030,seems it was wise to limit it to the wildcard parameterization in the spec
3031,the issue is not isconstrained by itself that why kept it and there still usage of it the issue was that we used beanmetadatamanager isconstrained which got the bean metadata from the concurrent map and then we got again the bean metadata from the concurrent map few lines below either really few lines below or hidden in method call few lines below we should get the bean metadata from the concurrent map only once
3032,yeah right used it as marker to say that this value was not supposed to change during the object lifecycle and it was supposed to be final as the other ones ll remove them
3033,so in this case it an error it just that started with valuecontext and then copied the behavior from valuecontext to validationcontext ll change it here
3034,not really ll remove them
3035,got it in ogm we have for similar purpose though it applies to initialization of the field during construction time post construct callback not lazy init as done here if needed we could add it to hv too we don need to handle those stereotypes with religious believe it just kind of an open experiment whether its helpful to us or not
3036,mmmh but in fact we can get rid of these too got too conservative and wanted to keep the validationcontext initialization after the hasconstraints check but it bad idea changed it and got rid of isconstrained
3037,thanks
3038,rebased and applied pushed one more commit for some clean up thanks bekhta
3039,merged thanks
3040,looks good rebased and applied added one commit for using the class formatter in the log message thanks
3041,ok thanks
3042,one thing ve been wondering should we rename containerelement to containerelementtype it may appear as splitting hair but the constraints are put to the type not the element itself alternatively one could split it up into typeargument generic containers and componenttype arrays the names would be bit better to comprehend but both would do the same so don like it too much note my considerations are primarily driven by applying the same concepts names to the spec xml schema hence the extensive consideration thoughts
3043,ready for review apart from the renaming discussing above favor containerelementtype also there is one glitch with the api there are some illegal state transitions you can do type fishtank class property model field containerelement parameter going straight to method parameter doesn make sense of course sure it could be resolved by having multiple containerelementconstraintmappingcontext interfaces one for property parameter return value but couldn make it work impl wise so gave up on this eventually runtime exception is raised when calling the methods in an unsupported location should someone else have the energy to give it try be happy to merge it as follow up otherwise think it good enough
3044,btw that another project idea had define the states of such an internal dsl and the valid transitions ie allowed method calls in some abstract means external dsl and then have generator for creating the required interfaces for only exposing the allowed ops in each state and class bodies to be implemented just dreaming of this though
3045,rebased added one more commit more geared towards hv too
3046,alternatively one could split it up into typeargument generic containers and componenttype arrays the names would be bit better to comprehend but both would do the same so don like it too much so tend to agree that splitting it would make the names clearer but as it the exact same thing it feels weird to have different names so concur with you that keeping one name is better should someone else have the energy to give it try be happy to merge it as follow up otherwise think it good enough agreed it good enough as is added one commit to reindent test and removed the last commit expect follow up on this very subject
3047,to the select to select
3048,spaces space after the parenthesis
3049,ha that why they call you eagle eye guillaume
3050,are you handling this one
3051,yes want to make some additional clean up too
3052,cool thanks
3053,closing this one superseded by validator pull which integrates your changes thanks
3054,hi john you commented this is this what you wanted btw the use of the constant looks weird as it not made to be used here it is used in the for loops but there definitely something weird with the constants as we don use them consistently
3055,sorry my mistake intended to remove this test the for loop is completely optimised away by the jvm and the test jmh test does not perform any actual work if large number of iterations is required as test then new benchmark method with number of validation iterations would be appropriate and remove the for loop this would allow the jmh framework to manage the number of iterations
3056,ok will clean it up further and merge thanks
3057,out of curiousity how comes that the assertion on the size of violations on the line before isn enough to prevent the optimization you mention
3058,in practice the effect might be the same however the purpose of blackhole is to prevent dead code elimination false sharing and write wall which can skew benchmark results am not sure what effect hassize has on the aforementioned jit optimisations
3059,ok thanks better safe than sorry guess
3060,rebased and merged thanks
3061,so ve looked and java annotation generated was present in java xml ws annotation so ve made this change yes that was done recently that area is still in flux see our discussion dev february html on the jigsaw dev mailing list on the style thanks ton for coming up with that stylesheet the only issue see is that the dividers between table column rows have gone here are the current docs for comparison any chance to add that at least vertical ones may look tad better and one super minor thing when entering something into the search box in the upper right the results overlay still has the stock blue header maybe this could get brownish color so to fit better with the rest of theme otherwise it awesome thanks again
3062,bekhta thanks for taking care of that didn check the stylesheet but disagree on moving finalname to the build level it has nothing to do here there something weird with your ide it would be nice if you could move the add modules stuff to different commit as don think we will commit that for now discard the finalname change keep the css change in one commit thanks
3063,think the vertical ones can be added as for the horizontal ones they were causing some problems ll see if anything can be done about it and ll look once more through the doc to see if any colors should be updated like that one for the search that you ve mentioned ok ll do that as for the finalname it how ide is reading the pom file and validation it with the xsd schema ve looked here and has finalname in it project basedir target project build directory classes project artifactid project version but fine with where it was previously
3064,bekhta don think they have the same meaning in finalname would be the final name of the main artifact whereas in the assembly configuration it would be the one of the assembly at least that what think
3065,ve updated the css bit more see the screen below there are borders for tables now and search input glow is more hibernate looking also ve split it into two commits first one just with the style related changes and second for the readme update
3066,very nice the screenshot looks good ll take closer look tomorrow other hibernate projects will benefit from this as well so kudos to you for taking up this one
3067,just saw that other pr validator pull so ve removed that last commit for the readme happy to help let me know if any changes will be required
3068,bekhta looks good going to merge it out of curiousity how did you create this did you take the default jdk stylesheet css and then modified it or did you take our existing one and adapted it
3069,modified the jdk default one was using the current one to get colors and some font related values at first thought to modify the current one but didn want to break something for the current doc so as some modifications were required
3070,ok thanks for clarifying had compared it to the jdk default one and was overwhelmed by the huge number of differences but most of them are actually formatting related whitespace after an empty line between declarations etc reckon they originate from your editor
3071,yes that right reformatted that css file ve probably shouldn done that right gmt gunnar morling ok thanks for clarifying had compared it to the jdk default one and was overwhelmed by the huge number of differences but most of them are actually formatting related whitespace after an empty line between declarations etc reckon they originate from your editor you are receiving this because you were mentioned reply to this email directly view it on github or mute the thread
3072,yes that would have been bit better as it helps to keep the history comprehensible but it no problem sorry for all the questions just trying to make sure understand what going on ve found the following to be the best approach for dealing with this kind of changes create first commit with the original file unaltered commit the default java stylesheet css apply the actual modifications in separate commit don apply any re formatting or if you really really have to do it in separate commit between the initial one and the one with the actual changes this allows to understand the actual changes later on allowing it to re apply them another time if the underlying base has changed no worries though ll take care of it
3073,applied as discussed above ve added the original jdk stylesheet css in separate commit before your and reworked your commit to remove the formatting changes also added another commit to change some styling ll open up follow up issue for ironing out some more glitches thanks lot bekhta that was one of the big missing pieces for building on java
3074,ve pushed one commit with some smaller things noticed during review my only question is about the usage of default methods see inline
3075,removed the default methods and pushed to master will work on the backport
3076,we don need copy here anymore because the maps in constraintviolationcreationcontext are now immutable so we don allow the side effects that might have existed before and have justified this copy
3077,this is from pre era updated all the occurrences of this pattern
3078,wondered if it could be worth it to create the aggregation earlier decided against it because getmessageparameters is preexisting and bit worried about changing the definition of it
3079,sounds good
3080,why did you decide to make this default method the only implementation is our own one
3081,
3082,rebased and merged thanks
3083,seems cannot push to this pr
3084,it weird the allow edits from maintainers checkbox is checked unchecked it then checked it again
3085,ok still doesn work ll keep my changes locally then for now
3086,wow seems like quite lot of work to re write all these
3087,merged backported an amended version of the first commit didn backport the typeformatter as type gettypename is new in java
3088,re worked added commits to address your remarks hope it all good now
3089,merged thanks
3090,very minor but maybe let make it consistent and initialize the set and map below in the same way had to check if there was specific reason to initialize it this way compared to the others
3091,do we really want an info here you made it debug elsewhere
3092,wondering if it would be worth it to compute this hashcode only once don think it would be called often though
3093,so you don include observablevaluevalueextractor here can understand that it tough choice
3094,considering how useful getdefaultvalueextractors is would have made it set of ved instead of ve and reuse it in the constructor that could avoid forgetting to add one at one place or the other and we could stream the result directly in getdefaultvalueextractors
3095,would pass the descriptor here you re forced to unwrap it then rewrap it in places
3096,maybe we could change them to ved here and throw the error early if it not valid ve
3097,wonder if it wouldn be better to add the user defined ve after the default ones thus providing way to override the default ones
3098,wondering if it would be better to announce clearly it returns ved not ve
3099,let decide what to do about this before merging and implement it we have added lot of todos lately
3100,ll take look it may not work for configuration though as the public method mandates ve there
3101,will change it
3102,hum no it should be part of it
3103,good idea
3104,yes that how it should be done eventually currently this all relies on the order here
3105,agreed
3106,ok
3107,yes the public methods would add ves but we would convert them to ved as early as possible to throw an error as early as possible and use as much as possible ved internally
3108,yes of course
3109,info is used in other places in this class see logging methods
3110,also did it for valueextractordescriptorkey
3111,done
3112,done
3113,done
3114,done
3115,done
3116,added the checks
3117,bit annoyed by the fact that you changed the way hasconstraints is determined while it really totally unrelated think it should have its own jira and proper commit ok ll create jira and extract it into separate commit had larger change originally not creating the descriptor model eagerly any more and this was part of it reverted that largely but found that specific change worth keeping being bit lazy only
3118,yeah bit cautious about this one because we had bug in this part not so long ago with hasconstraints returning false instead of true in certain cases so prefer to be on the safe side if we have to dig changes in this area again
3119,extracted for hasconstraints and reworked the pr
3120,cool waiting for ci to go green and ll merge it
3121,now that long ci run
3122,ah yeah sorry merged it and kept it open for the backport which didn happen closing
3123,this one would have been better in separate commit and jira think we can do with it though think
3124,not sure really convinced by how we deal with the builder state in the getter here the pattern is kinda weird not that can think of something better though
3125,who says builder is write only
3126,rebased and merged thanks
3127,good spot
3128,seems animalsniffer has blind eye when it comes to annotations
3129,merged thanks ve added one tiny commit to remove another stale reference
3130,can one of the admins add this person to the trusted builders reply with add to whitelist or ok to test
3131,ok to test
3132,can you sign the cla for the hibernate validator project on and ping me here with your username once done thanks
3133,btw from your comments on jira it looks like you re not far from fix wanna give it try if not ll fix it
3134,hi did you see my message about the cla validator pull issuecomment we need it to incorporate your code into the code base thanks for your feedback
3135,hello was offline for while but back now ll try to have look at this today and fix the bug if can thanks
3136,btw signed the cla my username is ghusta
3137,squashed all your commits in one and added an additional commit to make things more consistent they weren before your patch so it more general clean up note that if you plan to contribute further we generally work on the master branch and then backport the fixes to the branch did the work to apply your patch to master thanks for your contribution
3138,ok very well think had some problems while rebasing it will be clearer like that it never perfect the first time thank you
3139,btw did you format the code code style with intellij or with eclipse did it with intellij and didn have the same result than with your clean up
3140,it custom formatting for both ides if you like to get style files please check here ide codestyles
3141,yeah as the code was not very consistent earlier it not always easy to choose how to format your code that why made it consistent use eclipse know bekhta uses intellij and he contributed updates to our code styles configuration but not sure they are perfect ide codestyles not really easy to configure different ides to get the exact same formatting output btw do you need release soon or it was just to experiment and you can use the snapshots if you need something soon we can plan release next week
3142,ok it the code style imported for the project hibernate ide codestyles maybe next time ll use this plugin eclipse code formatter for intellij idea eclipse code formatter concerning the bug was just experimenting with not in hurry
3143,nice
3144,merged thanks
3145,bekhta ve been thinking about it and as you say it just not possible to find reasonable size for the cache and exposing it as option wouldn be great either it be one of those knobs people don know what to set to so inclined currently to leave things as is
3146,oki closing it thanks nevertheless for investigating it bekhta
3147,happy to help
3148,applied that last commit thanks
3149,merged thanks
3150,added commit to your pr with the french translation
3151,done
3152,thanks and bekhta
3153,rebased and merged thanks
3154,can one of the admins add this person to the trusted builders reply with add to whitelist or ok to test
3155,ok to test
3156,thanks can you please sign the jboss contributor license agreement it web app living at it needed in order to merge your pr thanks
3157,done
3158,merged thanks while you re at it could you take look at the new strings we added at the bottom of the file for duration validation see validator blob master engine src main resources org hibernate validator validationmessages properties
3159,jenkins retest this please
3160,nice thanks
3161,hoping that pr isn jinxed
3162,merged thanks
3163,yeah that sounds reasonable indeed
3164,ve read through the discussion wasn able to think of anything better for period than what you ve seen as you were saying that there no way to say what is larger period month or days so can only see that option of allowing users to determine how long is the month but in general would say that if an object itself cannot be compared to another in one way we should not be adding constraint for it so for having duration only as for the duration as you were saying it doesn seem to be very readable to have just one unit and would be better to be able to put something like minutes seconds but in that case we would need to put parameter for all chronounit or at least for all smaller ones think it ll be not good if for example we have only hours minutes and seconds but no milliseconds or nanoseconds because what if you have duration of you wouldn be able to specify it right so on the one hand having only one chronounit is not very readable on the other hand we would need to add lot of annotation parameters really don have strong opinion on which option is better so ll just trust your judgment on this one
3165,yes you would have to add all of them even if don expect the smallest ones to be used won expect someone to require duration of nanoseconds as for the names keep the names used in duration so nanos millis to be consistent it bit more verbose but it always pain to specify duration in only one units did that lot in property files and it really pain to convert the values in your head
3166,so to summarize support of duration only add all parameters till years don think that eras or millennia are that used drop the range annotation remove support of duration for did miss anything
3167,bekhta sounds great
3168,add all parameters till years don think that eras or millennia are that used think for first version would stick to what is available in duration the plus methods basically and nothing more you will have the same issue we discussed earlier with months and years did miss anything the bug reported on the sign of one of the comparisons but you will find it anyway when writing tests the inclusive option similar to what is done in decimalmin decimalmax
3169,looks great ll just apply some typo fixes and merge it
3170,great thanks
3171,rebased and applied thanks bekhta
3172,do we really need this couldn we build period from the given years months days subtract the annotated period via minus and test isnegative on the result also an inclusive flag seems useful similar to
3173,can you use the annotation instead
3174,just skip that in the favor of two separate annotations
3175,second may be more commonly used value and thus better default
3176,some for the durationrange
3177,yeah thought it might work yesterday evening and then read the javadoc and the code for minus java public period minus temporalamount amounttosubtract period isoamount period from amounttosubtract return create math subtractexact years isoamount years math subtractexact months isoamount months math subtractexact days isoamount days it simply substract each part of the period so you could end up with year months days and this would indeed be considered negative wondering if it really makes sense to consider period baring these limitations for inclusive on both set of annotations
3178,to skip the range annotations
3179,to be honest think would rather have days hours minutes and seconds don think nanos would be useful but we can add it for consistency think limiting to one single unit is not that good wdyt about that proposal
3180,don think would add them here we have nice dedicated annotation let use that
3181,
3182,maybe call them maxduration and minduration for the minvalidatorforduration it would be easier to apprehend the comparison below
3183,note the comments in this class are to be taken into account only if we keep the period validators
3184,you don need that see period tototalmonths
3185,think you better transform everything to days it will be easier
3186,let be consistent and use as reference but as mentioned earlier vote for removing these ones
3187,they usually are added by alphabetical order
3188,thought about it too but then duration itself also only allows creation from the single elements there is no method of days hours minutes so guess stay consistent with that but don have strong preference really
3189,wondering if it really makes sense to consider period baring these limitations yes getting doubts as well first thought one could construct something around normalize but after all you cannot really tell whether months is longer or shorter than days as you don know the number of days in months so it seems for good reason that the java time api doesn expose way for comparing periods we then shouldn try to invent it for supporting duration only
3190,yeah looks like you only have the parse method for that or you have to use the plus methods that being said we would do the operation only once at startup so don think it that bad bekhta wdyt as for me find it more readable to say hours minutes rather than converting everything to minutes but maybe it just me
3191,nice catch merged
3192,looks good merged
3193,rebased and merged thanks can you add short note to the migration guide about the changed behavior in the null optional case thanks
3194,done
3195,merged thanks bekhta
3196,ok cool bit concerned about adding list also for those many cases where it not needed we may consider to encapsulate it behind dedicated valueextractordescriptor implementations there would be nestedvalueextractordescriptor which deals with the nested case allowing to use the plain and simple one for the normal case but we can leave that as optimization for following
3197,so think we are in pretty good shape now ll work tomorrow morning on the array support
3198,it ready for review think fixed all the pending issues
3199,pushed additional commits to address your comments waiting for your feedback on the list of valueextractordescriptor optimization
3200,waiting for your feedback on the list of valueextractordescriptor optimization think it good merged it and added the stereotype my thinking was not only about memory though but also about complexity of usage now validatorimpl needs to deal with list of extractors whereas hoped this complexity could be encapsulated within metaconstraint
3201,optional seems not sensible also there are some too much think this would be more realistic map list map prefer us to stick to realistic examples so we are sure we are on the right track to solve actual issues don mean to sound harsh case do
3202,why does it have two
3203,ah the usage of square brackets in the tostring methods was confusing me on first look thought some sort of node nesting was going on maybe worth to have some assertions on the actual path nodes also their types etc
3204,found that the assertion on the number often is not helpful let say it actually you don know which one is missing whereas if you just omit this assertion you ll see the actual paths in the next statement
3205,there is an empty named node in here after before email is that intentional let assert on the actual paths to have more explicitness of what we expect
3206,outter outer
3207,can you add an explantion why this is list now reckon it to navigate from the outermost container to the innermost
3208,yeah had the same thought lately added them mostly to be consistent also prefer to get rid of them
3209,exactly seems clear enough then ll add comment
3210,also wondering about the types of nodes should the intermediary ones be of kind type argument instead of property as it the case now
3211,well in the current implementation we need full chain of iirc we discussed it the other day and you agreed it was acceptable as first step to not require this chain we would need to continue the discovery on the whole parameterized type and either add iscascading to cascadingtypeparameter or rebuild the necessary tree once we made the discovery
3212,to be honest don want to spend too much time in it before we agree on the structure of the path let discuss that
3213,if you check out draft spec validationapi constraintviolation note that key index initerable are only set on the following node this may be the cause of confusion so think expect these three nodes here not totally sure about the kind and name of the nd node but that seems sensible node kind property name map key null index null initerable false node kind type argument name key invalid index null initerable true node kind property name email key null index initerable true
3214,removed
3215,this is now what we have except the second one is property as we don have the type argument node type but it already done as type argument
3216,changed the tostring and added assertions on the structure of the path
3217,done
3218,done
3219,fixed
3220,explained bit more the purpose of this list
3221,type parameter that is marked for cascaded validation and or has one or more nested type parameters marked for cascaded validation otherwise the cascading parameter is confusing
3222,let use package info java instead know that we have lot of package html files but the class is the recommended way nowadays so let begin with it
3223,hope we can encapsulate that behind an interface with two dedicated implementations so no list is needed for the default case but we can do that in follow up
3224,this should be type use eventually right better add todo marker
3225,noticed that this method getparameterconstraintlocation isn used anymore let remove it
3226,using within optional is weird also it for the sake of the example only prefer if we found more realistic usage
3227,that method became quite long the two cases it handles are good candidates for extracting two methods
3228,done
3229,created jira issue and added todo in the code
3230,done
3231,done
3232,ok went the list route even if it not that good either
3233,yeah well tried to do that and in the end thought the best solution was to use collections singletonlist introduced new helper called collectionhelper toimmutablelist same for set that we should use to make list immutable and that make some naive optimization see this commit validator pull commits de be bf ea ec think it should be generalized to all the immutable list set in the metadata tell me what you think about it
3234,should be backported to
3235,rebased and merged nice work thanks
3236,we shouldn initialize constraintvalidator here it useless ll change that and merge
3237,reworked the commit message bit and merged thanks
3238,rebased and merged
3239,with this you don avoid the resizing please keep the newarraylist call and change only the parameter value it will take care of it same for the other changes below
3240,that an array list not set with load factor assuming that what you have in mind prefer to phase out newarraylist as it provides no advantage any longer as we can rely on diamond it different for newhashset
3241,hmmm what the point of this we would have to move back to the snapshot as soon as we make new change to the api
3242,yes it ll be changed again soon but hv alpha should be built against it
3243,added the jira issue number to the commit message and merged thanks
3244,can one of the admins add this person to the trusted builders reply with add to whitelist or ok to test
3245,ok to test
3246,good catch could you sign the cla at for the hibernate validator project and get back to us with the username you used there thanks
3247,thanks have started the cla signing process yesterday but am still waiting for the application to be accepted my user id is michal fotyga
3248,yeah emmanuel who validates the cla is on vacation this week so we ll have to wait until monday ll ping him on monday
3249,but ll merge this right away thanks
3250,thank you what nice way to start day
3251,thanks that was quick merged to master and
3252,looks good thanks bekhta another thing that came to my mind is that maybe we should throw an exception illegalargumentexception if parameterless method is passed for parameter method validation wdyt don think we can do this as the bv spec doesn forbid passing such method so we cannot apply stricter rules in the ri
3253,rebased applied and added one more commit for some clean up simplification thanks marko
3254,great happy to help
3255,parameternameprovider getparameternames executable was called inside of the loop so thought that extracting it out of it would be bit faster
3256,this removed if statement seems to be redundant this private method is called from two places and in both cases there contracts assertnotnull parametervalues messages validatedparameterarraymustnotbenull so null cannot be passed to this method
3257,rebased and merged thanks
3258,fixed few minor issues and merged to master will also backport to
3259,looks good thanks
3260,thanks bekhta ve added another commit mainly for getting rid of the uses sub definition and pulling the actual element description right at the beginning ll merge that one as soon as the build has finished just let me know in case you see any further issues thanks again it much better for the pdf now
3261,great happy to help
3262,rebased and force pushed minor change to property name
3263,merged thanks
3264,pushed another commit with the relocation artifacts could you take look at it thanks
3265,we also should add it for the karaf features file
3266,force pushed an update with the karaf features stuff
3267,pushed another commit for making the artifact names more concise
3268,squashed the last commits and merged thanks
3269,hi marko looks nice but not very fond of us maintaining list of currencies in the long time agree it does not change lot but it does change also wondering if it may be possible to register other currencies in moneta which would make null and void the whole approach so on this
3270,yes hard coding this list of currencies seems not desirable in fact javax money defines an spi for providing currencies currencyproviderspi the set of available currencies really depends on the context of the specific application and registered currency providers one thing we could consider is to obtain the list of currencies exposed by the jdk itself check out java util currency getavailablecurrencies but it still wouldn accomodate for the case of custom currency provider implementation all in all think that not something we should validate
3271,agreed let close it thanks for your efforts marko
3272,looks good and nice thing to have but if we set up ci job shouldn we set failonviolations to true
3273,but if we set up ci job shouldn we set failonviolations to true yes that true ve pushed one more commit for this
3274,rebased merged and jenkins job created thanks
3275,just fixed the checkstyled issue sorry
3276,done updated the jira does it seem ok to you
3277,merged thanks
3278,pushed an update to rename forexecutable to forreturnvalue
3279,rebased and applied thanks for spotting and fixing bekhta on the backporting let apply it to no need for an eager release though it very special case and not user reported
3280,rebased and applied thanks
3281,it make sense to have this and others in the tck eventually but it good here for now ve made it talking point for next week to discuss the tck
3282,merged thanks
3283,merged thanks
3284,hum ok what the benefit of that why not always go for https
3285,the pdf still has some oddities page or on page the first one or two listings may appear before the page break but think it definitely good enough unfortunately apart from opening an issue don think there much can do about fixing it that being said as mentioned earlier by yoann our current pdf output is far from being perfect either maybe we can find less styled font for listings in the pdf too something more neutral would be nice but for sure no blocker either ok so you have the same problem have was wondering if maybe was missing common font agree it something we should fix the epub version also has some broken image references next to the author name at the beginning of each chapter maybe we can just get rid of this but also the xml schema wouldn spend much time on tuning epub output it nice to have but not really needed so rather omit it if it takes to much effort to fix ll check that maybe it too alpha for us
3286,jenkins retest this please
3287,modified the fonts we now have specific theme which is mostly the default with few variables changed also put the default in the theme directory so that we can easily compare with the reference if we need to update it one day removed the epub output it definitely not in good shape didn have an epub viewer to test it but now that did it far from being ready for prime time also changed the comments
3288,the release scripts are ready and so is the outdated content script on docs jboss org the only thing left will be to remove the link for the multi page html output on the website
3289,rebased and applied thanks can you merge it to too
3290,merged to
3291,ooi what the issue here that fixed in that new version link to the issue in their tracker would be nice
3292,that url looks weird should be min js reckon
3293,though personally dislike not getting it from our own server to begin with but arguable there are pros cons for both approaches
3294,it protocol relative url meaning the protocol adapts depending on the current protocol of the page
3295,see the commented part with resources asciidoctor currently copies all the resources from src main asciidoc so you end up with all the images css docinfo files even in the pdf or epub case provides resources option allowing to filter the elements copied ll make that more clear
3296,hum ok what the benefit of that why not always go for https to be honest also use that to be sure the js is not loaded when the user is browsing it locally if he has downloaded the doc of specific version pretty sure he doesn want to be notified that it an old one
3297,can you add reference to the original source of this github link and instead having the two files side by side how about adding the original one verbatim in one commit and then adapt it as per our needs in separate commit that how we handled other cases where started from copied resource
3298,seems not needed anymore
3299,because if want to update it and base it on new default theme yml file it going to be messy this way it really easy to keep track of the changes did that lot in previous job and it really more practical like that ll add the reference to the github file at the top of our theme but prefer to keep the original file too to be on the safe side
3300,yeah it does not do any harm so let it there as this way we can enable it quickly to do more tests if we want to
3301,ok works for me too
3302,done
3303,there is javadoc generation error on ci var lib jenkins workspace hibernate validator pr distribution engine src main java org hibernate validator internal metadata location constraintlocation java error reference not found bean would be passed for propertyconstraintlocation but an object array for
3304,thanks pushed an update
3305,merged thanks
3306,nice cleanup
3307,rebased and applied thanks
3308,merged and backported to as well as thanks
3309,looks great and epub too
3310,gah replied to your email before saw there was pr copying my comments here overall it looks great very clean there are few really strange issues though if the previous pdf wasn perfect either agree we can ship the pdf as is but otherwise we may want to look at it bit the main issues borders for code examples seem to generate strange artifacts when there is page break just before see for instance the bottom of pages and is there any way to tune page breaks or to tune the font size for code examples so that they fit better sometimes its bit weird pages would have put the page break just before the title page think scaling down the font size just bit would make the code example fit inside the page the nitpicking find the margins aggressively small but maybe it just me some images seem way too big to fit one page noticed page but maybe there are others
3311,some images seem way too big to fit one page there setting to tweak this see pdf image scaling but the default setting shouldn do this the weird thing is that in optaplanner docs have plenty of big images that get scaled down to fit nicely but in another project same asciidoc versions some config etc couldn get the big images to scale down to fit even with playing with that param this problem entirely eluded me if you find out how to fix it let me know pls
3312,actually just had the look at the docbook output us pdf hibernate validator reference pdf and there are really strange things too such as page breaks right in the middle of code examples or images overflowing out of the page so yes you re right it seems better with asciidoc anyway we can always merge as is and tune it later
3313,yes it was my plan to move the pdf epub generation to profile as for the docbook output
3314,ok cool you also could add something like skip pdf to the execution configuration block
3315,looks like we all agree it the way to go and the output is good enough ll pursue this as pet project
3316,nice ll close it for now so to keep the list of in flight prs lower looking forward to the final version of it would great to have it in alpha
3317,is the analytics snippet still contained in the rendered output
3318,emmanuel told me that knows how to do it in case we need pointer
3319,it easy in asciidoc add docinfo footer file docs src main asciidoc index docinfo footer html set these in the attributes element docs pom xml that docinfo footer file itself currently still gets copied to the target folder but they merged my pr to fix that for the next version think the release for maven plugin is overdue am waiting for it since november
3320,cool thanks
3321,merged thanks
3322,surprising the build does not fail
3323,we have animalsniffer set up on but for reason that don remember it not run as part of the default build but it seems it wouldn even have caught that one just tried it out maybe it not working with annotations or something
3324,bekhta thanks could you create global jira for that with fixversion to next it would be nice if you could add some tests similar to what did in to exercise the parameter handling
3325,yes ll do that
3326,nice thinking of it would have been nice example for small annotation processor to generate the def types based on the actual constraints
3327,bekhta while we re at it could you add package html in the pl specific constraints package
3328,think this one is not very urgent right if that so like to try the processor approach to cover generation of all these defs otherwise can finish this one add few tests for each def and add package file that mentioned and after that look into annotation processor def generation wdyt
3329,hey it not very urgent but not sure whether an ap really is worth it it not that we add new constraints every day but then such processor might quickly be implemented one problem is that we need the defs for the bv types which are not subject to compilation within hv ll leave it to your judgement which route to pursue but probably the ap will never pay off if it takes more than few hours to write it
3330,although it not critical would like to have it for our next so think for now the manual approach is good enough and you already did most of the work we could pursue the annotation processor approach as parallel pet project
3331,ve added few tests and missing package html and squashed everything together later ll look into annotation processor option as well as for me it ll be an interesting thing to implement
3332,bekhta so merged it on master but while backporting it on found bug that one of your tests reveals ll fix the bug then merge on
3333,ok great and what was the bug
3334,bekhta this one
3335,bekhta and here is the corresponding pr validator pull files it normal you didn see it as it was coincidentally fixed in master nice you triggered it by accident very few chances we would have found it otherwise
3336,thanks was just looking at that pr
3337,fixed the jira issue number in the commit message and merged thanks
3338,thanks for the review ll make corresponding changes tomorrow
3339,let remove it we cannot really know whether it typo or virtual property on purpose
3340,thanks for review ll make corresponding changes
3341,bekhta as you added another commit is it good to go from your side
3342,yes ve made all the changes and added test for the scriptassertdef as couldn find one so say it good to go
3343,ok cool ll take another look and merge
3344,rebased and applied added one more commit for some clean up most notably using the common assertion methods on constraintviolationassert thanks bekhta
3345,bekhta ve applied it to too it bit against the spririt of crs as no features should be added after cr has been put out but this feature is very insulated so don think there much risk to it and it nice to have it out
3346,it good consideration to check presence of the field but actually it not needed getpropertynode in the node builder api doesn mandate that the given property actually exists it intended to pass fake fields for map keys so we shouldn enforce this here
3347,field property in general bv abstracts from fields getters and exposes them as properties in unified manner also the default behavior should be mentioned something along these lines if given the resulting constraint violation will be reported on the specified property if not given the constraint violation will be reported on the annotated bean ah and could you add
3348,log log know we have it lowercase in many places but in new code we tend to use the proper casing for constants
3349,see my comment above we shouldn check for the presence of the field or property getter
3350,filed property though you could omit the param tags altogether they don provide any further insight
3351,so maybe make it as warning to let users know that they might mistyped property name or just remove it
3352,on which for which remove the for at the end of the sentence the should be after the
3353,please add the annotation it less important than for bugs but it good habit
3354,think it would be nice to add sentence about thre reporton option in the description below
3355,is the scriptassertdef class tested somewhere if so it would be nice to also test the reporton option
3356,you see you also start to see typos everywhere
3357,just pushed version addressing all your comments
3358,updated to use payload and fixed all your comments
3359,wondering whether it shouldn be on constraintlocation instead the latter has all the info ops related to value retrieval and the configuration of specific element field parameter etc metaconstraint refers to this and has the higher level constraint info
3360,how is it different from constraintlocation gettypeforvalidatorresolution having all these types with slightly different semantics makes me bit concerned
3361,nope constraintlocation is the object defining location it can be shared by several different constraints some of them requiring unwrapping some of them not
3362,note that in the metaconstraint the extractor is only set if there is some extraction going on think it will be more clear with the next commit coming
3363,the typeofvalidatedelement is the type of the validation object it might not be the type used for validator resolution as it might be the wrapped type note that it exactly the same behavior as before the code has been moved but is exactly identical to the existing logic
3364,ah ok so that already planning for allowing different validation applies to settings for the constraint of one element makes sense
3365,no need for these if you ask me
3366,getvalueextractormanager
3367,the var name should be adjusted too
3368,just seeing it can go away
3369,isunwrapbydefault sticking to your change above
3370,nice
3371,where has it been before
3372,we should rename getcascadedvalueextractor into getvalueextractor as it not used for cascading only anymore
3373,like that we get rid of things like this
3374,should be renamed then too
3375,why are these gone
3376,this seems unused now
3377,no it can remember trying to remove it but animal sniffer complains as javafx is not part of the java signatures added comment explaining that
3378,done
3379,done
3380,done
3381,good catch removed
3382,done
3383,unwrapvalidatedvalue is gone and everything is managed in the constraint definitions
3384,removed
3385,done
3386,why not just getvalueextractor it used for type parameter constraints and cascaded validation
3387,nice you could do it
3388,why is that actually as optional has type parameter constraints applying to the wrapped value should be given on the type argument hence no need for default unwrapping for element level constraints same for the non legacy extractor
3389,ok but shouldn we have test for specifying the option via the api on the constraint level or are there other tests for that
3390,removed
3391,renamed
3392,added some new tests to test the programmatic configuration with payload
3393,jenkins retest this please
3394,jenkins retest this please
3395,jenkins retest this please
3396,also added the constraint in the ref guide
3397,jenkins retest this please
3398,can you add
3399,maybe add french too in german it would be ung fcltige hrung erlaubte werte value
3400,also if you like ukrainian translation would be value
3401,bekhta thanks but it looks like you also escaped the value variable which shouldn be could you post message with the variable unescaped
3402,done value
3403,done also added commit to add it to poland specific annotations
3404,added thanks waiting for yoann blessing on the french translation and it should be good
3405,rebased and applied thanks
3406,may misremember but didn we want to add this optional dependency to the descriptor to begin with then user would only have to drop in the modules and add the api module in jboss deployment structure xml but not fiddle with any existing module xml
3407,isn it what it does this optional dependency is included in our patch file
3408,ah of course not sure why but somehow thought that be the setup code within the integration test module
3409,
3410,so ve finally made few more changes now it should catch more invalid cases can see other way than having two methods one for email another for urls to validate domain part as for the email ipv should be in and for url it shouldn also for ipv for email it should be like ipv some ip goes here and for url ipv is just in another question is about dotless domains even though they are prohibited see here en for example emails with such domains are considered valid see here address if we disallow such domains in that case url validation for files fails from one of the cases present in tests for file users foobar tmp the host part is users and it is dotless should we leave it as is or should we do something about it wdyt also added simple valid invalid ipv case as these were missing for the urls
3411,bekhta where are we with this one does it require any further changes
3412,hi ve replied to comments and as understand he ll make his final review don have any more changes to add from my side
3413,bekhta merged thanks
3414,don think these ones are an issue we should support exotic protocols note that the purpose of the regexps presented in regex is to create url shortener not to follow the standard so all the examples presented shouldn be considered valid
3415,all the ones above are indeed an issue if we decide to fix this we might do it by using the domain validation we apply in emailvalidator to the domain part think it should fix most of the issues
3416,the four above with dashes might be considered an issue too
3417,the ones with malformed ip addresses might also be considered an issue even if don think it that important to be thorough on ip addresses based urls
3418,surprised the idn urls pass with java net uri used to think that they were not supported had to use galimatias to parse uris with idn did it change recently
3419,the ones with valid ip addresses should be considered valid
3420,why is it the expectation that these are invalid is it some illegal ip range or something be fine if we just rejected those with wrong number of octets but don apply any further validation on the actual ranges if that the issue
3421,the link from which the urls were extracted was used to have an url validator for link shortener thus they have very special requirements that why we should be careful with the examples given
3422,here some explanation from the author of that regexp have added simple network ranges validation the rules used are valid range network adresses above and including are reserved addresses first and last ip address of each class is excluded since they are used as network broadcast addresses since don think this is worth implementing completely in regular expression following pass should exclude the intranet address space the loopback and the automatic configuration address space while the local multicast and and the reserved address spaces special ipv local id iana reserved mcast net special ipv future use iana reserved should already be excluded by the above regular expression ve extracted the validation used in emailvalidator as suggested in few comments above and left commented out those cases that still do not pass
3423,would keep this in the emailvalidator as it in no way related to the domain validation
3424,right thought that regexps for local part and domain had same subparts so moved both out but after closer look they don ll move the local part back also found out that for the email domain ip addresses are in brackets for example jsmith or jsmith ipv db so the same regexp wouldn work for domain and email ll see what can do about it and let you know when have something
3425,so the ip domain is now covered by domain
3426,bit concerned about this change to validate the domain name with the regexp think we should convert to punycode first at least that what see everywhere or you did change the regexp to also accept the range of characters from idn all in all think the commit would merit longer commit message so that we can understand what you re doing
3427,afaics you changed the regexp to make these cases invalid
3428,in the regexp it looks like you put around the ipv ip address but here you just put the address without any wrapper did miss something
3429,well as the regexp for the domain is built from chars and digits ipv is picked up with it as well so thought that as additional are not needed for ipv then we can skip the part ip domain
3430,yes this part might be bit confusing as you ve guessed ve changed the regexp to allow other chars as well not only ascii and moved the regexp check before idn toascii the only reason for this change was to be able to catch invalid cases that you commented on next de so as understand these two dashes makes this url invalid but if we do idn toascii first and there were non ascii symbols it might generate for example xn which would be caught with the regexp as invalid in case we update regexp to catch even though it not
3431,yes it this change domain label domain chars without dash domain chars without dash
3432,right it an invalid case so there assertfalse on this line there valid case at line asserttrue validator isvalid http db null
3433,ah right sorry
3434,ll remove this comment in the final version committed as it useless private method and method name and parameter very explicit
3435,will include that in the previous comment
3436,note that when we reformat and are not separated by new line at least in eclipse ll fix that
3437,in such moments sometimes think maybe should use eclipse at least for hv to not have these formatting differences but then understand that to used to intellij need to find and update this to match
3438,hi sorry to hear that hope you feel better now as for the tests ve run it with maven option and they passed now so maybe it was some problem with the local libs don know but it works now so this issue is resolved at least for now ll look into that maven plugin and let you know when have something
3439,also one more thing was thinking about this metadata provider and it is very similar to the annotation based one with similar logic but different types but as you were saying about the index that we can only use it up to certain part and then move to reflection the same apply here that without some major changes it seems not possible to group the same logic of both providers annotation and index based ones in one place
3440,and then there also this thought that had related to hv in general not related to jandex about unwrapping validated values with unwrapvalidatedvalue annotation was thinking that with type argument annotations this unwrapvalidatedvalue seems to become redundant and having less things to support and check for might make the code run bit faster you probably already thought about this and have some decision about it otherwise it might be something to think about don know if this would be of any value to you but was feeling like share this thought with you
3441,bekhta unwrapvalidatedvalue will be removed in hv it is being replaced by another annotation called constraintsappyto which has slightly different behavior gunnar added it to the spec in the appendix related to value extraction but it has not been implement yet
3442,also one more thing was thinking about this metadata provider and it is very similar to the annotation based one with similar logic but different types but as you were saying about the index that we can only use it up to certain part and then move to reflection the same apply here that without some major changes it seems not possible to group the same logic of both providers annotation and index based ones in one place yes my current opinion is that we should try to get jandex to work and see how it behaves if we see it has some value we will think about how we have to change hv to better fit this addition not relying to much on the reflection api in our internals is one of it think
3443,looks good thanks feel free to merge yourself once you ve added the adjustments to the iteration style
3444,merged thanks
3445,and there is missing fixed it and merged thanks good catch
3446,that merged right closing it thanks
3447,thanks for taking the time to report this and propose fix proposed slightly different update to point to the html single documentation which is now our canonical reference trying to improve seo here closing this one
3448,note that the build is going to be broken until we merge the java time pr
3449,why are you doing it for list type
3450,yes it currently commented out
3451,mmmh ok weird that asciidoc still processes the commented out part then
3452,that weird checked and it wasn part of the rendered doc gmt guillaume smet mmmh ok weird that asciidoc still processes the commented out part then you are receiving this because you modified the open close state reply to this email directly view it on github or mute the thread
3453,thx
3454,it always amazes me how do you find all those typos and how you are cleaning the javadocs
3455,jenkins retest this please
3456,rebased and merged thanks
3457,couldn we even get rid of this altogether and use the new elmanager
3458,is it right to return null here
3459,probably we should wrap it into validationexception not sure if it ever can occur
3460,or if we want to avoid elmanager due to the classloading issues we discussed while ago why is it that we need custom elcontext
3461,afaics it not something that should occur and all the other resolvers throw propertynotwritableexception so we better be consistent
3462,yes in fact it was already returning null before simplication as base was null when it was called
3463,there are reasons why kept our specific context first we provide way to inject specific expressionfactory and believe it or not the one we passed to standardelcontext is not used except to initialize the streamelresolver see the constructor of standardelcontext see elcontext converttotype to see how it defaults to the static one if it is not found in the context so if we want to be sure it used we need to put it in the context the second reason is that with standardelcontext we instantiate new resolvers for each interpolation while they are stateless and can be shared note that to keep the list of resolvers static didn add the streamelresolver which didn look as much value to me and wasn present before however added the staticfieldelresolver
3464,so if we want to be sure it used we need to put it in the context yes but couldn it be done like this elcontext ctx new standardelcontext factory ctx putcontext expressionfactory clss factory we instantiate new resolvers for each interpolation mh that sounds bad where is it happening
3465,as discussed on hipchat we instantiate new context for each message interpolation which is the way it should be done in our implementation we use static compositeelresolver which is shared while standardelcontext instantiate new resolvers
3466,can one of the admins add this person to the trusted builders reply with add to whitelist or ok to test
3467,ok to test
3468,also have pull request for the branch eagerly waiting in the line smile
3469,hi quick question did you analyze the change you made or did you just change newhashset to newlinkedhashset everywhere same for asset linkedhashset consumes slightly more memory so we should evaluate this change for each use case do it only when we want to maintain the order that being said we are heading towards adding more order to constraints evaluation see so it would make sense to keep the order of constraintviolation even if the annotation order was not guaranteed thanks for your feedback
3470,hi thanks lot for your feedback at first tried to just change newhashset which do effect the ordering but wasn sure if wasn missing some am not familiar with the source did some testing and found out did miss some so just went ahead and changed everything thought the impact is so minimal it maybe doesn matter and maybe we can just completly switch to linkedhashset like make it policy use linkedhashset everywere never use hashset so we are sure order is kept everywhere as in my initial comment think thougt about to also change the remaining hashset in the tests to linkedhashset as well to make this consistent policy if you don agree just switching to linkedhashset maybe you want to take half an hour and go through my changes and comment which lines you think is ok to stay hashset could have look at this after the weekend as well also do you have any memory benchmarks on switching to linkedhashset what the real life impact is it that bad
3471,asked around bit it bytes more per entry we can do the math now that kb difference per constraint entries
3472,hi thanks lot for your efforts keeping an order of the constraints is one of the issues being discussed for bv see the bval proposal for the discussions that happened so far think we should first converge on this at the spec level before putting an implementation in place my concern is that people would rely on the behavior of such ad hoc implementation resulting in portability issues not the least when moving to the bv solution proper that being said not fully sure whether the conclusions in the so answer you linked are correct there lot of implicitness in there it be great to have confirmation from the jdk team that there indeed is reliable order apart from the one for repeatable annotations which most of the so discussion relates to and that they are committing to retain that
3473,hi after some more consideration going to not merge this change for now think we should first look into solution on the spec level your contribution to this would be very welcome join us on the mailing list dev and get discussion started getting an authoritative answer from the jdk team whether there is guaranteed order of retrieved annotations would be great thing thanks for your effort around this topic also if we are not going for the suggested change right now think we ll come to good solution in the bv time frame
3474,will try to get in touch with the jdk team after the holidays is there an eta for bv will it be finished in thank you
3475,will try to get in touch with the jdk team after the holidays cool quite curious about the outcome is there an eta for bv will it be finished in yes we are aiming for release in the first preview will be out very early in the year and bv final is also planned to be part of java ee scheduled for too
3476,pushed new version with fixes and more comments
3477,on the sharing of locations it seems not to happen across metadata providers right not big problem still wondering though whether we only should switch to accessible members when creating the aggregated model then we could do it exactly once not sure though whether it worth the effort maybe something for later also to reduce conflicts with my concurrent work yes that might be something we want to do in the future but it orthogonal to this patch
3478,maybe only add comment on where it from
3479,pushed new version only use groovy snapshot for jdk upgrade patch gen maven plugin to alpha that alexey released think it ready to go now ll work on the backports once this is in
3480,looks reat now merged thanks
3481,could you add comment saying which is needed for what so we can track it more easily and check whether we can remove any after component or plug in update
3482,same here
3483,is it an optimization to avoid creating stream instance
3484,do we even need that any longer
3485,shouldn it be typeargumentconstraintlocation
3486,no it the one which will be wrapped later it strictly equivalent to the existing code
3487,yes it the common case so thought we might as well be as efficient as possible
3488,yeah right removed
3489,wow that whole lot they are all required by wildfly
3490,took them from the wf patch referenced by tomaz think it better to be in line with their expectations didn play hide and seek for this one
3491,hi bekhta the entire area of type level constraints is in flux for bv and semantics may change so suggest to not put effort into this right now the annotation will not be needed for list in bv anymore what concerns casting to internal types we should avoid it as it will render the ap un usable in eclipse if not done carefully we have to check the environment and do the right hack for each we do it in mapstruct side of project of mine here but also there it measure of last resort only if you spot any shortcomings or bugs in the compiler api it be better to report them to openjdk if there is no bug for it yet
3492,hey bekhta think we should close this one for now as type constraints are just too much in flux right now and it be sort of moving target to keep track of it with the ap let revisit once the dust has settled in that area thanks for your efforts nevertheless
3493,can one of the admins add this person to the trusted builders reply with add to whitelist or ok to test
3494,hi out of curiosity which test was giving you that error are you planning add the actual jacoco config too think it make sense to do this together as otherwise the change in constraintdescriptorimpl isn really needed could you also sign the jboss contributor license agreement it small web app living at we ll need that in order to merge your changes thanks
3495,hi any news on this we ll be interested in integrating jacoco configuration if you re willing to contribute it as mentioned by gunnar we ll need signed cla to integrate your patches thanks
3496,sorry been on vacation will knock it out tomorrow on dec am guillaume smet wrote hi any news on this we ll be interested in integrating jacoco configuration if you re willing to contribute it as mentioned by gunnar we ll need signed cla to integrate your patches thanks you are receiving this because you were mentioned reply to this email directly view it on github or mute the thread
3497,ok cool
3498,hey happy new year do you still plan to follow up on this one
3499,whoops slipped my mind over the holidays do have minimum example ready it appears it needs to be class level annotation to trigger the behavior will post it asap appears had bug in my example it might be bit longer
3500,update on test creation still trying to figure out under what exact conditions jacocoinit is added to class
3501,hi still struggling with your test case
3502,am getting closer things need to be just so for jacoco to add jacocoinit to class
3503,hey any further progress with this one
3504,finally have working test since the error depends on classloading and initialization order of static fields reproduction is extremely challenging for example if the constraint existed in package that contained the word hibernate the error would not occur thus the package of the test is the issue id the test will only run if the jacoco agent is among the inputarguments of the runtime java package hv import static java lang annotation elementtype import static java lang annotation retentionpolicy import java lang annotation documented import java lang annotation retention import java lang annotation retentionpolicy import java lang annotation target import java lang management managementfactory import javax validation constraint import javax validation payload import javax validation reportassingleviolation import javax validation validation import javax validation validator import javax validation validatorfactory import javax validation constraints pattern import javax validation constraintvalidation supportedvalidationtarget import javax validation constraintvalidation validationtarget import org hibernate validator parameternameprovider reflectionparameternameprovider import org junit before import org junit rule import org junit test import org junit rules expectedexception this test will fail with jacoco agent in eclipse javadoc public class hv test public expectedexception thrown expectedexception none static final validatorfactory validator factory validation bydefaultprovider configure parameternameprovider new reflectionparameternameprovider buildvalidatorfactory static final validator validator validator factory getvalidator public void beforemethod org junit assume assumetrue startedwithjacoco will return true if there is javaagent with the string jacoco in the startup arguments true if successful boolean startedwithjacoco for string inputargument managementfactory getruntimemxbean getinputarguments if inputargument startswith javaagent inputargument contains jacoco return true return false public void jacocofail this thrown expect javax validation validationexception class this thrown expectmessage hv the specified annotation defines no parameter jacocoinit try validator validate new hv test bar catch runtimeexception re throw re public static class bar hv test hv constraint private final string field public bar string field super this field field hv constraint constraint tests did work when in org hibernate package structure regexp hv constraint regex method field annotation type constructor parameter type use retentionpolicy runtime validatedby validationtarget annotated element public hv constraint the bar regular expression static string regex the bar regular expression pattern this is required to cause issues with jacococ static java util regex pattern regex pattern java util regex pattern compile regex message the string string message default bar field must be digits was validatedvalue groups the class class groups default payload the class extends payload class extends payload payload default defines several hv constraint annotations on the same element hv constraint method field annotation type constructor parameter type use runtime list value the breaksjacoco hv constraint value
3505,fyi signed the cla
3506,closing for now we ll follow up on this with
3507,the commented out import looks weird
3508,bekhta added one more commit and merged also backported it to
3509,great also please look at jandex pr when you have time for it and in meantime if there something else for me to look into just let me know thanks
3510,rebased and applied to master and
3511,applied to master and
3512,applied to master and
3513,it not clear why javax annotation is only needed on but not master my guess is that it brought by the newer karaf version on master
3514,can we close this one it has been merged to
3515,merged
3516,jenkins retest this please
3517,rebased and applied thanks
3518,jenkins retest this please
3519,replaced service provider with clean room implementation and merged thanks
3520,force pushed an update addressing your comments
3521,regarding backporting think hv and hv would be worth
3522,prefer iscollection or iscollectiontype element collection reminds too much of the construct with the same name in jpa here refer to any collection kind type by collection including maps not java util collection
3523,getcollectionelementtype
3524,maybe typewithlist when looking at the usage above first thought the type itself would be list type
3525,ok if we need to do all that how about avoiding the conversion to list then alltogether and have explicite iterator types private static class booleanarrayiterator implements iterator private boolean values private int current public booleanarrayiterator boolean values this values values public boolean hasnext return current values length public boolean next boolean result values current current return result
3526,we prefer to use over the reasoning is layed out in the contributor guide
3527,do you think and add much value here all for great documentation but think not stating the obvious also is virtue as it reduces the time to read hence often only put method comment and omit the others only add them if there is something specific to say about them that what put here whether the given type represents collection of elements or not whether it an iterable map or array type know it nit picking but thought bring it up so we may converge ve also changed my style over time so you may see examples wrote using the style critizing here
3528,wow very thorough testing overall
3529,you could use collectionhelper asset instead
3530,weird that what usually do think copy pasted it from somewhere else will fix
3531,used to agree with you what made me change my mind is that it generates javadoc warnings and would like to have zero of them in the future as we might miss something important don have any issue to conform to the opposite if you think it better
3532,yeah it took some time but considering we already missed bugs and regression in this area thought it was in order
3533,prefer more useful docs over making tool happy don know whether it possible but maybe one could have different rules policies for api spi where can get behind warnings policy and internal parts where that seems over the top
3534,can one of the admins add this person to the trusted builders reply with add to whitelist or ok to test
3535,ok to test
3536,nice catch thanks
3537,note that this requires api pull allowing to be used on type parameters
3538,wondering if should extract the unrelated fixes into proper jiras and get them committed it would keep the patch smaller wdyt yes that would be nice the first few commits in actual order within my branch the shown order in the pr differs bit are un related
3539,it should be rebased now that extracted the unrelated commits also fixed the typos in the test method names and it might have created conflict here too
3540,jenkins retest this please
3541,merged thanks
3542,that just quick hack here as said it have to be more generic
3543,currently it not needed but wondering whether we should require on the actual type itself class legacymapvalueextractor implements valueextractor it seems nice for consistency purposes and makes this extractor purpose more apparent
3544,that thing is nightmare ish it works for the general case now but eventually the logic would have to be refined specifically it works due to the order of registration of built in extractors more specific ones before more general ones it didn seem needed to implement it for now
3545,that test is interesting as basis for tinkering around with it
3546,wondering if listitem and iterableitem or listelement and iterableelement would be more descriptive it just detail but was surprised to see an index for listvalue and then understood it was only an item not the list
3547,nothing related to your code but we have typo here paramer parameter
3548,superfluous new line
3549,maybe make it unmodifiable
3550,just to be sure the order of the extractors is not important it should be made unmodifiable
3551,yes listitem would be better that said the entire contract needs to change anyways it needs to be more generic that one of the next things to look into but essentially we don know the nature of the association navigated into so we cannot work with fixed set of pre defined methods one idea is to the creation of node instances to that contract but we ll have to see
3552,
3553,it currently is important but eventually it shouldn be in the end think we need to keep the most specific extractor per type parameter if we have an extractor for iterable
3554,ok additional comment but probably useless if it goes away as you inversed the order of key and value in mapvalue think you should do the same for listvalue and have the index as second parameter it would be more consistent
3555,that what thought and with this new implementation with an hashmap you lose the order
3556,it currently works because we only will take the first extractor found per type parameter see the containskey call above what first per type parameter is determined by the insertion order in the constructor it all just fugly work around for the time being
3557,what the legacyness in this call not following
3558,and how will the legacy be used over the non legacy extractor
3559,designed it by requiring the annotation as well but don think have hard arguments for or against it
3560,what is this one doing
3561,how can you dare challenge and not set the right size from the get to
3562,so this model does not support the integerandlist kind of model correct or is value the one we would use
3563,think would have preferred something like addressbytype key too short value at least for strings and any type that we don know and will be tostring ed we make exceptions for numbers booleans dates
3564,twice the same stuff
3565,hum think got it
3566,just minor style issue shouldn we call it tmpcascadedvalueextractors to be consistent with the others or is it naming we don want to keep
3567,used for to used to
3568,missing new line
3569,btw don think initializing it with null is such good idea considering valueextractors constructor will throw npe
3570,any reason why you indented with tabs
3571,afaics it not case that can happen but think would prefer it to be initialized to an empty map in the other case
3572,found found for
3573,maybe remove the orconstrained here too
3574,same here
3575,it used when cascading into non collection association address address
3576,no just an oversight
3577,yes that just left over
3578,care to explain the second part of the condition thanks
3579,ok
3580,it has become obsolete with my latest commit going to push it asap it was needed to prevent repeated validation of an object which was part of the graph the validated bean and contained within an array visited during cascaded validation
3581,it only needed within this if block
3582,ok
3583,ok
3584,ok
3585,you can remove the jfx unwrapper class constant at the top of the class
3586,you know it dangerous to let parenthesis open
3587,same here
3588,sorry for the nitpicking but it the only thing you let me looks like you got the new line wrong in the javadoc comment
3589,if we plan to remove it someday think the best is to remove it now but if it does not cost us think we should probably keep it or throw an error if we consider it not valid pattern anymore
3590,multipletypeparameterexception multipletypeparameter exception
3591,this is bugfix isn it it doesn look related to the patch
3592,yes in that case you invoke indexedvalue for each list element and value for the single int property
3593,the legacy one will be used for set orders and the new one will be used for set orders the difference being that the former would validate any property constraints on custom set implementation whereas the latter would only validate the actual iterable elements selection is happening via the type parameter to which extractors are bound the non legacy one is bound to of iterable the legacy one is bound to an internal pseudo type parameter annotated element depending on where is spotted one or the other will be used
3594,
3595,ok ve added this to the follow up issue hv
3596,thanks done
3597,ha but you didn notice the typeo in instantation
3598,was talking about the allbindings map don feel comfortable having it set to null in some cases while we are using it below without null check for the time being don think we can be in the case where it is null and we need it in the for loop but better be safe and not have this pattern
3599,yes it bug fix it was uncovered in the course of implementing the new mechanism wouldn bother backporting unless user reports it
3600,you re missing an end include
3601,ok
3602,ok
3603,added it back
3604,yes fix it when it actually can happen expecting this code to be changed quite fair bit anyways
3605,can one of the admins add this person to the trusted builders reply with add to whitelist or ok to test
3606,jenkins add to whitelist
3607,ok perfect will squash and merge thanks
3608,one last thing could you sign the cla for the hibernate validator project at it one time thing for all your contributions to the project thanks
3609,can you ping me when it done and give me your username thanks
3610,signed and verified with the username bayerls some hours ago currently the status is still awaiting approval by project lead glad could help
3611,thanks the cla is approved an ve merged your change into master and
3612,also added one more commit for some related clean up
3613,looks very good thanks minor comment could you remove the this occurrences in front of dynamicpayload in the existing code of this method and amend your commit we should be consistent and see no reason to keep this additional bonus point for being in line with our checkstyle rules
3614,pushed new commit to remove the module files as they are not useful anymore
3615,well they are not useful anymore because we use the ones from the wildfly distribution and we update them so we don have to maintain our own
3616,where is this update happening it does for the tck runner but eventually we should be using the patch file there too
3617,think just the major should be fine and that one would implicitly target the latest minor of that major
3618,are you sure it does afaics the setupmodules groovy script from the tck runner also updates the files in place
3619,just had another look you are right that there is script now that updates the existing descriptors in place in modules target wildfly patched when creating the patch file so the copies are not needed any more for the tck runner we have script essentially the same one as above which updates the descriptors of the wf unzipped for testing instead it should use the patch created as described above and apply it in the same way the integration tests are doing it should have done it right when moving to the patching mechanism but then had forgotten about it
3620,created to track the use of the module file
3621,pushed an update addressing both hv and hv
3622,merged thanks added one more commit for removing the now obsolete groovy patching script from the tck runner module
3623,cool also make the wf version more flexible
3624,yup good catch what do you think we should use for the version final not sure how we can consider the module files as stable we will probably have to provide several patches for each version of wf we want to allow the upgrade for typically when will just be out we will probably want to support both and wdyt
3625,merged and backported
3626,rebased and merged thanks
3627,force pushed an update fixing the javax el commit it the only one that has this issue
3628,pushed all remaining commits thanks lot
3629,very nice to see this bekhta could you maybe describe bit the current status what working what is not any larger road blocks you see
3630,hi well so here how see this create jandexmetadataprovider some code is already present which will receive jandex index and go through classes interfaces and look for constraints to create beanconfiguration there will be set of builders similar to what is present for xmlmetadataprovider currently ve started to work on constrainedfieldjandexbuilder it seems to me that these builders will have few methods in common so most likely there will be one abstract and few implementations for type field method constructor with having way to create beanconfiguration from step create map with all configurations so right now looking into how to create constraintelement from jandex index there are few things left that thinking about at this point they are marked as todos in the code here they are is there way to find out if an annotation is constraint or not based on annotationinstance jandex class how to convert annotationinstance to annotation which is used to init constraintdescriptorimpl for this one think ll try to do something similar to what is present in metaconstraintbuilder buildmetaconstraint with annotationdescriptor and annotationfactory create also ve created very simple constrainedfieldjandexbuildertest that creates jandex index form bean to help write debug all this jandex related code so basically there not much done for now and just wanted to have place to discuss these kind of things so that don write lot of code that will be wrong also one more question is it ok to use java here or should we stay with and ignore streams and lambdas
3631,bekhta just quick answer on the java side we won backport this so feel free to use streams and lambdas and whatever fancy java features you want
3632,is there way to find out if an annotation is constraint or not based on annotationinstance jandex class you have to mimic what done by constrainthelper isconstraintannotation in the first iteration it should be enough to check for presence of the constraint meta annotation ve just asked dev december html on wildfly dev how to obtain meta annotations as it isn clear from the api to me how to convert annotationinstance to annotation we have to create an annotation proxy ourselve as we do it for xml based configuration too see org hibernate validator internal xml metaconstraintbuilder buildmetaconstraint it not clear to me yet how to get the actual annotation type but the answer may be provided with my question above on wildfly dev
3633,bekhta think you are on the right track overall let see what comes out of my question on wildfly dev
3634,thanks for the info ve just pushed new commit and there annotation creation in constrainedfieldjandexbuilder instancetoannotation method
3635,hi looking at the next line if annotationprocessingoptions areparameterconstraintsignoredfor executable metadata add and wondering if it should be with or not it in annotationmetadataprovider nevermind
3636,hi and here an update on this task ve finished with the builders for constraints and with the jandex provider in general there are some things left to be done like get the index from somewhere and few things from todos ll list them below how the index should be received by provider change class search as mentioned jandexhelper getclassforname ve made jandexhelper and it methods nonstatic so the inside logic of getclassforname can be changed without changes to the method itself plan to look into this change next there seems to be problem with jandex index and parameter annotations please see test constrainedfieldjandexbuildertest validannotationismissing it looks that jandex is ignoring the annotation on parameter as result right now jandex metadata provider is throwing an for cases when there type argument constraint for method parameter there are couple of methods like isindexable ismap isiterable which are reusing reflectionhelper methods and cannot see way to mimic the logic using jandex classes haven found any possibility to determine if annotation is constraint or not based on jandex classes and can see that for now there no answer on wildfly dev about it in groupsequencejandexhelper there are two methods copied from annotationmetadataprovider to obtain groupsequenceprovider based on what is done in them not sure if it ll be possible to do the same with jandex classes don see way to filter out synthetic methods methods and constructors are returned in one collection and they don have any differences at least didn find any obvious one constructor names are in such form so ve added logic to check if method name match this form then it constructor and we should look for constructor rather that for method in such case when looking for class member reflection class maybe parameternameprovider can be improved to consume not only method constructor but as executable executable is already available at the point when parameternameprovider is used not sure if such change would be of any use that seems to summarize it all
3637,hey bekhta we still need to follow up in more depth but one quick answer to the last one maybe parameternameprovider can be improved to consume not only method constructor we cannot really change that one as it part of the bv api but check out executableparameternameprovider it does what you want
3638,hi thanks for the answer ve used the executableparameternameprovider in the code already for example you can see at this line validator pull files diff bc febc it was just thought to maybe save some execution time but as at that point executable is already available it probably will not do any change
3639,bekhta fyi taking look at it ll probably push some fixes
3640,great thanks for the update
3641,bekhta there seems to be problem with jandex index and parameter annotations please see test constrainedfieldjandexbuildertest validannotationismissing it looks that jandex is ignoring the annotation on parameter as result right now jandex metadata provider is throwing an for cases when there type argument constraint for method parameter afaics the test is working did miss something
3642,for me it gives next java lang assertionerror expected size but was in at org hibernate validator test internal metadata jandex constrainedfieldjandexbuildertest validannotationismissing constrainedfieldjandexbuildertest java so it seems that is ignored
3643,bekhta it weird don have this error at all it working correctly here
3644,how the index should be received by provider this is something that is still undecided afaik we need to see how we could get the index from wildfly also wondering how we could test this jandex stuff with all our tests simply replacing the annotationmetadataprovider to see how it behaves it really not easy considering you have to add the indexed classes one at time if we can find way to access the jandex index of wildfly we could run the tck in container mode dincontainer to exercise the jandex implementation change class search as mentioned jandexhelper getclassforname ve made jandexhelper and it methods nonstatic so the inside logic of getclassfornamecan be changed without changes to the method itself plan to look into this change next haven taken look at this think it can be left alone for now there seems to be problem with jandex index and parameter annotations please see test constrainedfieldjandexbuildertest validannotationismissing it looks that jandex is ignoring the annotation on parameter as result right now jandex metadata provider is throwing an for cases when there type argument constraint for method parameter as mentioned don have this issue at all the test is passing here running the test in eclipse if it matters there are couple of methods like isindexable ismap isiterable which are reusing reflectionhelper methods and cannot see way to mimic the logic using jandex classes yeah they are less used now due to changes gunnar made recently but we still need them think ll rebase your patch on top of our recent work and see how it goes from there haven found any possibility to determine if annotation is constraint or not based on jandex classes and can see that for now there no answer on wildfly dev about it think did make it work in groupsequencejandexhelper there are two methods copied from annotationmetadataprovider to obtain groupsequenceprovider based on what is done in them not sure if it ll be possible to do the same with jandex classes let keep them for now we ll see if we need parent class or something once we have working experiment don see way to filter out synthetic methods did it the hard way we ll need to open jandex issue so that they expose method for it methods and constructors are returned in one collection and they don have any differences at least didn find any obvious one constructor names are in such form so ve added logic to check if method name match this form then it constructor and we should look for constructor rather that for method in such case when looking for class member reflection class yeah think it as good as we can do for now moved it to its own method to be more clear we will need to open jandex issue maybe parameternameprovider can be improved to consume not only method constructor but asexecutable executable is already available at the point when parameternameprovider is used not sure if such change would be of any use haven taken look to this yet next comment will be about the changes made
3645,it weird don have this error at all it working correctly here it definitely is ve just tried to run the test with maven and it fails results failed tests constrainedfieldjandexbuildertest testgetconstrainedfields validation hv constrainedfieldjandexbuildertest validannotationismissing expected size but was in tests run failures errors skipped as well as if run the test through the idea and it the behavior that have on two different computers
3646,my current tree is here validator tree pr fixed couple of bugs the provider is now working haven inspected the result yet just that there some beanconfiguration returned note that one important change is that it does not scan all the classes of the index but just the constrained beans still unsure my implementation is sufficient especially regarding class hierarchy apart from that mainly cleaned up reorganized the code here are few general comments that might help you always make your methods fields private by default and make them protected only if needed put the methods only required by subclass in the subclass itself not in the parent no need for commenting everything we document the api and what might be unclear but for private method if you understand what it does just by reading its name and parameters there no need for javadoc we are on holiday shutdown starting this evening but think ll try to revisit few things next week like to rebase this on the current master as not sure it going to be an easy task and still need to understand few things finally would really like to find way to build usable index
3647,hi great improvements to the implementation not sure either about filtering constrained beans suppose we ll be more sure when we have real index at our hands right and good catch with those stream concatenations the only thing that probably change is return type of jandexmetadataprovider findconstrainedbeans from set to stream but it just my personal preference try to return streams instead of collections wherever possible to omit returning modifiable collections to prevent change of state of some bean enclosing that collection and to prevent calls to stream right after receiving collection don know if that would be more efficient than what we have right now but probably would done something like this private static stream findconstrainedbeans indexview indexview list constraintannotations todo hv not sure this is totally accurate especially wondering how it will behave with subclasses and such return constraintannotations stream flatmap constraintannotation indexview getannotations constraintannotation stream map ai ai target map jandexmetadataprovider annotationinstancetoclassinfo distinct also thanks for those points on visibility modifiers and documentation ve tried to run the tests on one more machine and it still the same for me the tests are failing with the same error tried to run the code from your branch as well thanks again and happy new year to you
3648,closing this one ll create another one superseding this one to continue the discussion
3649,bekhta personally all for using streams when you expect to work on the result but if not must admit my preference is to use good old collection types it only an implementation detail anyway if we get to just having that to discuss think we would have come great way
3650,using this one without passing classloader may give us trouble due to classes not being visible to the implicitly used loader you can check out org hibernate validator internal util privilegedactions loadclass and its usage as starting point
3651,hi all looks great you definitely are much better at naming methods and variables and great improvement to methodinheritancetree as well also can see that it seems like still need to do some changes to my ide formatting as there still are some differences as for the delays it all fine and completely understand it myself got stuck with my work and wasn able to spent much time on hv related items have nice day marko
3652,bekhta thanks for the review pushed commit fixing your remarks is it better now ll probably squash it before merging
3653,yes looks great
3654,bekhta and merged thanks for your tenacity on this subject we finally got this in
3655,great
3656,it looks that collectoverriddenmethodsininterfaces can be moved out of if else as it is called in both cases
3657,maybe get enclosing element before the loop or this operation is not very expensive something like typeelement methodenclosingtype getenclosingtypeelement currentmethod for if elementutils overrides currentmethod executableelement element methodenclosingtype
3658,just out of interest did you changed to set to be more consistent with the existing checks or is there any other reasons was thinking that if we are not using any set specific behavior more general collection interface can be used that just an explanation why used collection in the first place
3659,yes it just for the sake of consistency must admit wouldn have changed it if didn have other changes to do to be honest if had to do it from the ground up think would have used arraylist everywhere to have the result as predictable as possible don think sets are of much value here
3660,there slight difference in the calls one is using overriddenmethod and the other overridingmethod thought it was clearer this way than to declare another variable your question makes me think might be wrong wdyt
3661,right ll fix it thanks for noticing
3662,ok fixed it it seems to be clearer now
3663,ahhaa when was looking at it these two lines looked the same to me
3664,the error will be shown in the context of the method do we need to repeat the entire signature shouldn the compiler itself point it out
3665,is there strong need to check for this technically it doesn represent any constraint strengthening
3666,no biggie but we can use simple names in javadocs and import them too reads tad nicer
3667,well it does not respect the inheritance rules we defined the rule is that you cannot define constraints in the method hierarchy if there are already one method defining constraints in the method hierarchy that what we implemented here and it definitely easier to throw an error for this than trying to determine what is or what is not constraint strengthening
3668,at runtime we allow that one see overridingmethodmustnotalterparameterconstraints and how it calling method isequallyparameterconstrained that primarily due to the behavior of weld proxy classes though which would copy the annotations from proxied classes verbatim to the method definition on the proxy prefer behavior of the ap to closely mimic the runtime engine but if it too cumbersome to do we can leave as you ve proposed it it in the sense of the spec for sure
3669,merged thanks
3670,superseded by thanks we are almost there
3671,looks good added some minor final comments
3672,think that it more was requirement to use el at all it wouldn have worked with the default interpolator remember that we added that test now see hv
3673,ll work on trying to put together test for that
3674,tried to write test using our ignoringpackageclassloader but didn succeed think the only way to get it working would be to isolate the test in its own jvm so for now think would let it like that it exercises the fact that we can create specific expressionfactory but we can really test that it is used
3675,can you update it with my change from think then we are good to go thanks ton for fighting through this craziness
3676,couldn we even simplify that entire test by simply relying on the default interpolator
3677,supposed the purpose of this test was to check that passing an external expressionfactory would work
3678,name it setcontextclassloader
3679,we named these methods action in the case where there are not several ones with different semantics
3680,where is that coming from
3681,maybe add comment on what that needed for
3682,it comes from the fact that we are now using setting the tccl thus the validation xml is loaded
3683,yup just made it symmetry of getclassloader ll change it
3684,done
3685,done
3686,done
3687,yes makes sense we added this constructor for specifically working around the tccl usage as remember now again it not needed really anymore with our changes here but it makes sense to leave the test in place
3688,superseded by validator pull
3689,see also validator pull and
3690,superseded by validator pull
3691,but this dependency on javax el implementation org glassfish web javax el licensed under osi approved licenses common development and distribution license cddl version gnu general public license gpl version june with the classpath exception that means that users of hibernate validator library should distribute their sourcode how we can use new hibernate validator versions with our closed source application
3692,hi first we didn really change anything except we are now failing early instead of failing at runtime second the cddl allows you to distribute the javax el dependency in proprietary software finally if you really don need it you can use another messageinterpolator validator validator validation bydefaultprovider configure messageinterpolator new parametermessageinterpolator buildvalidatorfactory getvalidator all in all don think it an issue
3693,that means that users of hibernate validator library should distribute their sourcode no that not true that exactly what gpl with the classpath exception prevents check out the very last box on
3694,hi thanks for your quick response will read carefully my initial assumptions based on this cddl statement availability of source code any covered software that you distribute or otherwise make available in executable form must also be made available in source code form and that source code form must be distributed only under the terms of this license
3695,afaiu this clause only affects the files under cddl themselves but not any other work using or integrating the cddl licensed files but either way uel is dual licensed cddl and gpl with the classpath exception which allows you to create an executable under your own terms note that there also is juel which is licensed under the apache license you have plenty of options here
3696,added few comments here and there mostly minor things must admit that would like an explanation for this commit validator pull commits be bbdf which did not understand fully
3697,must admit that would like an explanation for this commit which did not understand fully previously the path would already have contained the node for the property of interest now we ll add that node when validating the constraint via that new single validatemetaconstraint method hence removing it from the path so we don end up with having it twice one could argue that the new approach is bit less efficient as we don pre select the relevant constraints but preferred that for the sake of less redundant code we can look into optimizing things later on if needed eventually we also should visit the constraints in order of their location first all constraints on foo bar then all on foo baz etc same for method parameters this will allow us to do less appendnode removenode calls not do it per constraint but per location it also should help with that bval issue about ordered validation of constraints think we are getting to better base for that
3698,rebased amended few commit messages and force pushed
3699,rebased and merged nice progress on the clean up
3700,we should update the javadoc here too
3701,you changed the impl from set to list this is what you intended to do
3702,do you have an idea on how to secure this
3703,shouldn we do this sooner bit worried we transform them along the way
3704,not sure understand the rationale of this commit maybe more explicit commit message and comment around the two propertypath removeleafnode would help understand what is going on
3705,nice like this change
3706,typo in the commit message of this particular commit ae implmentation implementation
3707,we should change the name of the method as it not collecting constraints anymore
3708,same here
3709,like validator pull commits fe bfb cf bd aedfe but it bit unfortunate we have to duplicate this logic several times
3710,withdrawn you fixed it in follow up commit
3711,withdrawn you fixed it in follow up commit
3712,don think it makes any effective difference at this point kinda liked that it keeps the order of the parameters when iterating through the cascaded ones
3713,we have to invoke securitymanager checkpermission
3714,not super happy with that special handling of type parameter constraints overall but think it good for now
3715,previously the path would already have contained the node for the property of interest now we ll add that node when validating the constraint via that new single validatemetaconstraint method hence removing it from the path so we don end up with having it twice one could argue that the new approach is bit less efficient as we don pre select the relevant constraints but preferred that for the sake of less redundant code we can look into optimizing things later on if needed eventually we also should visit the constraints in order of their location first all constraints on foo bar then all on foo baz etc same for method parameters this will allow us to do less appendnode removenode calls not do it per constraint but per location it also should help with that bval issue about ordered validation of constraints think we are getting to better base for that
3716,yes think using list would be beneficial in lot of places when looked at the constraints validation ordering having sets everywhere annoyed me think it would be nice to have the result of validation as deterministic as possible
3717,ok we should open jira for that don think would like us to release something with this
3718,my question was more is this special casing specific to this place or should we move it bit sooner to get propertymetadata return these transformed type parameter constraints
3719,ok could you add comment at the end of the propertypath removeleafnode lines so that we remember why we remove this last node it wasn obvious when read the code so pretty sure it won be in years when ll read that code again
3720,ve filed hv
3721,ideally we get rid of the special handling of type parameter constraints altogether but my preference is to leave this as is for now and look into it again when implementing the container stuff proper from bv the delegate business in typeparameterlocation is kind of hack but think it good enough for now and allows us to move on
3722,pushed rebase interesting issues to discuss when you ll get there
3723,think addressed all the comments found valid feel free to insist on the ones discarded if you feel strongly about it
3724,merged thanks
3725,why has that one changed reckon just for the sake of using the new api it good just trying to figure the reasoning
3726,think we should leave it in for now circling back to our discussion about compatability but deprecate it and remove the documentation
3727,same here
3728,ah see we marked it as experimental then it should be alright to remove
3729,are we removing the joda support
3730,know it done inconsistently but prefer to have this named log that how do it in new code as it constant
3731,thought it was good idea for our examples to use the new java time api nothing more
3732,yes we discussed about it few weeks ago on hipchat and we decided to remove it as it was experimental having both clockprovider and timeprovider would be confusing
3733,this is also my preference for the very same reason but was trying to be consistent with existing code happy to change it to log from now on
3734,no we are still supporting it moved the class and changed the implementation so git wasn able to detect it move
3735,pushed commit to fix it probably to squash with the one introducing the classes when merging
3736,kinda regret we started doing this for sets and maps unfortunately initializing them with the number of intended elements will cause resize the reason being we don take the load factor into account which is by default so resize will happen after inserting the rd or th element so in order to let it hold elements we have to initialize it with but it all such micro optimization that think we could go for the default constructor equally well
3737,technically wouldn it be class extends clockprovider
3738,stable environment reliable manner
3739,might make more sense to actually show usage of fixed date zoneddatetime of
3740,
3741,small comment would be nice
3742,is there any specific reason for wrapping this exception here
3743,re use is desirable but prefer specific implementations one if pushed from the execution path to solely validator resolution time
3744,usually we just make the instance member public no strong preference just noticed the slight derivation from the usual pattern
3745,ah guess that stems from the original class
3746,should it be just debug
3747,the new toshortname facility could be used here
3748,parameternameprovider clockprovider or better yet let just move to getunabletoinstantiateexception don think there much value in having the dedicated versions really
3749,puh was wondering whether the test may begin to fail in but it looks safe
3750,you lost your right to make this sort of comment when you voted against my pr to adapt collectionhelper to avoid the resize see ogm pull really think we should do it once and for all and be done with it
3751,ah didn remember that we had discussed it before personally just use the default constructor in the very most cases or pass size big enough for the few cases where it seems useful
3752,it in line with the others see validator blob master engine src main java org hibernate validator internal util logging log java for instance
3753,the usage of getunabletoinstantiateexception and the other similar ones is in fact very specific changed it to getunabletoinstantiateclockproviderclassexception
3754,yeah the issue is that we often do collectionhelper newcollection othercollection size and won expect people to do the math by themselves ll cherry pick the ogm commit to fix this once and for all
3755,yes as don know what the implementor will do thought it was better to catch and wrap the exception
3756,fixed
3757,yup coming from timeprovider fixed anyway
3758,used an abstract method instead
3759,fixed
3760,done
3761,done
3762,not really we have string not type or class we could implement one to work on string but don think it really worth it in this case
3763,pushed another commit which makes the documentation module pass too only remaining issue is in distribution related to javadocs
3764,amending surefire arg line with required module exports don see this part in the commit did miss something and did you test locally on multi core machine that removing the threads for the engine tests doesn slow down the build
3765,don see this part in the commit did miss something happens by virtue of the surefire argline and surefire argline extension properties in the parent pom there is jdk profile which does it once for all sub modules and did you test locally on multi core machine that removing the threads for the engine tests doesn slow down the build ah seems went bit too far by trying to centralize the surefire config ve added this back ve also pushed another commit which makes the distribution build work javadoc can be generated now on without build failure but it looks broken reckon the style sheet was changed in java again ll leave that for another time going to open an issue
3766,merged thanks
3767,couldn you put the exclusion directly on the wildfly patching artifact
3768,unfortunately not the plug in depends on wildfly cli directly too so the jconsole stull would still be pulled in when excluding it via the patching path
3769,merged and added one more commit for hv remove update links for included javadocs thanks
3770,ok looks good overall apart from my minor comments questions saw that you fixed the behavior of the type arguments constraints regarding the collection element node maybe an additional test would be in order
3771,saw that you fixed the behavior of the type arguments constraints regarding the collection element node there should be no change in behavior can you elaborate bit on where you think it has changed
3772,maybe it not triggered but thinking about validator pull files diff af dc de and validator pull files diff cd ca be cde before that we added the collection element node unconditionally but maybe you can have propertyname set if you re dealing with type argument constraint
3773,but maybe you can have propertyname set if you re dealing with type argument constraint you can have property name with type argument constraint private optional mypositiveinteger but the code for method validation does its own path appending atm it doesn talk to constraintlocation appendnode as it eventually should hence think everything fits together as of this pr but for sure it in an intermediate state plan to fix in follow up prs
3774,pushed one more commit to address your last concern about the proliferation of epnp instances it happens only in validatorfactoryimpl and validatorcontextimpl now the latter in case specific pnp is given for single validator
3775,cool merged
3776,shouldn we wrap it once and for all in validatorfactoryimpl instead of doing it this way especially worried about the fact that we might inadvertently wrap it several times
3777,any reason why you create temporary variable
3778,didn you introduce new helper method just for that
3779,maybe jira would be in order or it part of the container work
3780,it part of my upcoming work
3781,good catch that left over
3782,so we just have this last question pending
3783,interesting and impressive use of maven hackery curious though to know how widespread the usage of this patch feature is if it is widespread agree with you it would be the way to go and apart from the fact we need to download the tool from github it not that bad
3784,jenkins retest this please
3785,removed the layer property and few others with that consider the actual work done the only thing missing is doc update which ll send tomorrow
3786,it may be we need to change the jobs on jenkins to include settings example xml not sure whether the plug in is propagated to maven central too
3787,pushed commit for the docs
3788,merged thanks
3789,looks like we can remove layer name don think it used anymore
3790,this very minor comment still stands other than that it looks good
3791,that the only thing which remains to annoy me we need to have separate start applypatch stop cycle which should not be needed as patch can run offline but that not supported by the maven plug in atm in case we are bored to death we could write our own version of the patchhandler which only works offline see createpatchoperationtarget we only should do the logic in the else branch which runs offline
3792,jenkins retest this please
3793,for this approach it is really nice to be able to test hv and bv throughout the whole wildfly stack do you plan to fix the todo before merging or should create jira issue and merge it
3794,changed the module name as discussed and merged thanks
3795,this was bad practice anyways custom modules should go directly under modules
3796,thanks for the review ll apply the changes and when you respond to the comment on cycles ll apply the changes based on it and push it all
3797,hi ve read all the comments once more with fresh head and found all the answers ve added warning for case when interfaces used in group sequences are extending other interfaces added check if the interface was not already used in given group sequence already and also done some clean up it ll be great if you have look when you have time thanks also was thinking more about these cycles and here case when think we should produce an error please let me know if right public static class case public interface group public interface group value group class group class public interface group value group class public interface group value group class group class public interface group in this case it ll be group group group group is this valid case if so ll need to update the code to go through such chains and find all interfaces sorry for all these questions but as said not very familiar with groupsequence
3798,in this case it ll be group group group group is this valid case it seems not valid indeed you could try to valid this using the actual hv engine it should raise an error
3799,great thanks for the answer ll do what you suggested with engine and make the changes to groupsequencecheck to handle such cases as well
3800,checked that such case is failing when using an engine and ve modified code to look for such cases as well let me know if anything else should be done for this task
3801,bekhta so squashed and merged it with some additional cleanup see validator commit ba dbaac ed the main issue was that the following is perfectly valid java case hierarchy of groups public static class case public interface group public interface group extends group public interface group value group class group class public interface groupsequence you can define hierarchy of groups it even one of the first examples in the specification draft spec constraintdeclarationvalidationprocess groupsequence groupinheritance what is not recommended is having group sequence inheriting another interface so changed it this misunderstanding had another consequence you do not check that group inheritance creates cyclic definitions think you had something along those lines but checking group sequences inheritance once in your code and it was removed due to one of gunnar comment did not have time to fix it so would appreciate if you could do it added test at the bottom of invalidgroupsequenceparameters which should throw an error see the xxx we will release beta without this it would be nice if you could fix it for cr created specific issue to track it thanks again
3802,great ll look into hv
3803,would have expected it to be attached to an annotationtype group sequence annotation
3804,let call it groupsequencecheck
3805,do we agree that you don detect cyclic definitions defined with on interfaces defining group sequence afaics you only check the hierarchy not the thinking about something like java group class public interface group group class public interface group not sure we can do anything about it but this is probably the most common case of cyclic definition it can of course be far more complicated to detect than this very simple example
3806,there no such value present so ll add it in the next commit
3807,ok ve renamed it as you suggested ve just named it the same way as other parameter checks were named as thought that this is sort of parameter check as well
3808,correct not very familiar with the group sequences and apparently didn understood everything about them after reading the doc ve provided solution for such problem in the next commit
3809,the part for default group sequence re definition could be omitted it should be clear from the context of the error message
3810,are group group and yetotherbean actually needed for this case all tests pass if comment them out so they could go away it seems
3811,what the difference between this and someotherbean seems one should be enough for the test
3812,say one test for primitive is enough
3813,bit confused by this test couldn simple cycle test look like this value group class group class group class public interface mysequence wouldn consider the case where group sequence inherits from another interface it discouraged by the spec so if anything we could raise warning when detecting it
3814,maybe this one could be slimmed down bit
3815,remove the not
3816,this could be structured bit nicer with separate method annotationmirror groupsequence getgroupsequence groupelement annotationvalue annotationapihelper getannotationarrayvalue annotationmirror value
3817,wouldn you also have to check whether given element has been specified in the sequence already
3818,for somebean it list of valid invalid values and for someotherbean it only one invalid value it to make sure that check goes through all values provided and to cover different combinations of valid invalid values but in the end one can say that somebean can be enough
3819,same as before you are right it just more to cover different values maybe the implementation is just looking for boolean but again based on the fact that we know that it determining if the provided class is primitive or not we can leave just one
3820,as ve responded in this comment validator pull pullrequestreview my initial understanding of cycles was bit off should drop the code that checks the hierarchies and instead add another check to existing one to produce warning when provided interface is extending some other
3821,this method is receiving an annotated element typeelement with one of its values from groupsequence annotation so groupelement is already part of one groupsequence and we are checking if there groupsequence annotation on it and if so then there shouldn be an annotated element typeelement present within its values or did you mean the case like this group class group class group class group class public interface group where group group is present multiple times
3822,looks good apart from my minor comments not big fan of wrapping the parameternameprovider though
3823,not big fan of wrapping the parameternameprovider though open for all suggestions it helps to avoid if instanceof then switches at several places
3824,pushed two more commits for addressing your remarks and for benefiting bit more from java goodness
3825,looks good waiting for ci to validate it and will merge it
3826,rebased and merged thanks
3827,ve pushed one more commit related to the removal of the previous grouping functionality right to master validator commit ceb bb bd after being to the fresh air ve realized that the previous approach was les than ideal
3828,any reason why you remove this test
3829,maybe add final attribute for this
3830,surprised you re not using some java magic
3831,it would have been nice to change the parameternameprovider contract but suppose we cannot do it taking into account the discussion we had yesterday
3832,know it will probably be harder to test but would have expected getexecutableasstring executable executable method
3833,yes it wasn needed really the only invocation path not originating from tests already makes sure that the given parameter values match the length of the validated executable see validatorimpl validateparametersforgroup hence this check never triggered anyways
3834,will do
3835,it is just copied moved code but ll look into using the new joiner facility
3836,yes would be nice but parameternameprovider even is bv defined contract so we cannot alter it
3837,withdrawn looks like we more often have them in the name parametertypes form
3838,there are cases were we don have an actual executable when configuring method using the fluent api then this one is used to report non existing method but see executableformatter which is doing what you say for cases where we have an executable and makes invocations of log bit simpler
3839,ok
3840,well we are writing the new bv specification
3841,yes but do you have good idea how it could look like without breaking existing implementations we cannot remove the existing methods from pnp as that break existing implementations so we only could add getparameternames executable but think that only obfuscate the contract more than it helps
3842,fixed typo missed when reviewing and merged thanks
3843,we prefer using the short version for links now your text we fix them when we see them so you might as well clean up the line above about nip thanks no need to fix all the links in the file we do it when we update specific parts
3844,good catch
3845,thanks for the info pushed fix for those links also ve checked the link on that tituloeleitoral and it seems to be broken should we replace it to point somewhere else maybe wiki page
3846,the best and only interesting piece of information found is this one cpf cnpj titulo de eleitor parte ii btw only see one commit for the typo did you push the other one or were you waiting for my answer
3847,you can ignore my question misread your commit message
3848,can one of the admins add this person to the trusted builders reply with add to whitelist or ok to test
3849,ok to test
3850,good catch it weird nobody got the problem before apart from my comments inline could you fix the formatting issues our code style requires space padding for method arguments run mvn checkstyle check to verify everything is ok we have ide code styles here ide codestyles if you re interested in contributing on regular basis could you prefix your commit message with the jira number could you add the annotation with the jira number to your test and last but not least could you sign the cla for the hibernate validator project here and get back to me with the user name you used it very simple form to fill once you have jboss account thanks for your contribution
3851,all set guess username for cla is mulderbaba thanks
3852,good call done
3853,ok perfect waiting for the cla approval and ll merge it it will be included in we should release very soon
3854,great do you think it be possible to cherry pick this into branch also need this to be used by hk project in order get payara working properly looks like hk guys tend to stay on atm
3855,hi thanks for your fix we don have plans for another release at this point but we can push it to we ve planned the release of early next week and there shouldn be any issue with upgrading to that from
3856,merged in master and backported to the branch thanks
3857,good catch
3858,could you get the default locale before changing it and restore it after the test it would be cleaner to let the state consistent after the test
3859,after giving it some thoughts could you change it to use locale root think it emphasizes better what we want to do after that we re good to go thanks
3860,thanks
3861,see my comments inline have mixed feeling about this it does not really simplify the logic and we lose an information which is admittedly useless at the time no strong opinion though so if you prefer it like that let go for it
3862,reworked the commit to address your remark and merged thanks for reviewing
3863,couldn this statement be outside of the loop
3864,same here
3865,bekhta isn the language code for ukrainian uk
3866,correct language uk country ua and was thinking why the property file was showing as out of resource bundle thanks
3867,thanks for fixing the issue merged
3868,rebased and applied to master thanks
3869,bit concerned about validatorimpl growing more and more it becoming very tough to grok agreed it becoming unmanageable
3870,fixed your comments rebased and force pushed
3871,rebased and applied to master tried to cherry pick to but it doesn cleanly apply could you do it as you ve done the original change
3872,of course will do
3873,seems these assertions are never reached due to the expected exception before
3874,same here
3875,merged thanks
3876,it should be containsonly containsexactly expects the specific order again ll change it
3877,rebased and applied thanks
3878,ve also rewritten the test so it doesn need reflection in the actual test routine nice
3879,pushed an update
3880,ok see fwiw don think that the javabeans spec mandates that getter always returns the same value but it changed as per your request now
3881,merged thanks
3882,thought about this approach but must admit really disliked the fact that we instantiate new resourcebundlemessageinterpolator each time we call this method and getmessageinterpolator would expect us to return the same object for each call thinking about it and as noticed configuration is not supposed to be thread safe couldn we store the interpolators the first time the methods are called that would solve this issue
3883,not really concerned about it these methods are not expected to be invoked gazillion of times is there anything specific you base your expectation for the same instance to be returned upon storing them as you say should work configurationstate unlike configuration doesn explicitly state that it not thread safe but think it reasonable assumption then that it isn
3884,just to be clear on my worries it named like getter and it used to work like getter so didn think it was such trivial change to make it return different instance for each call don think it an inappropriate expectation to have it behave like getter
3885,can one of the admins add this person to the trusted builders reply with add to whitelist or ok to test
3886,created jiras hv force language hv document group inheritance
3887,do you plan to fix the issues mentioned or should do it thanks
3888,ll fix it would like to refactor my commits to have one for each jira
3889,pushed rewrite of commits one for each issue it takes you comments into account
3890,added one more commit for some minor wording improvements and merged thanks
3891,btw could you sign the cla for the hibernate validator project it simple form to fill at thanks
3892,signed the license agreement created my jboss developer account as jfurgerot
3893,could you name the tag testgroupinheritance
3894,please remove the empty line
3895,know it is bit cumbersome but we try to keep the code included in the documentation very simple and with as little magic as possible could you stick to the iterator approach see carisrented
3896,could you add backticks around the classnames groups included
3897,from the default group
3898,from the racecarchecks group
3899,only one empty line is enough
3900,only one empty line is enough
3901,rebased and applied many thanks bekhta
3902,wouldn value getvalue instanceof declaredtype be better test
3903,unnecessary whitespace
3904,unnecessary whitespace
3905,hmm this instanceof is more for safety of next conversion ve added it more for the cases when the annotation is of some different kind and groups parameter is present but contains something else but if it only for constraint annotations it can be probably be removed completely wdyt
3906,the current check implementation would miss if int class was given as group think the following would be right safely assume typemirror is given as value groups only expects class objects so the user couldn provide string or long or so if getkind is not declared flag it as error preventing something like int class to be given if kind is declared but the type is not an interface flag it as error as you already do
3907,going to close this one as ve found solution without the need for synchronization validator pull thanks
3908,ve removed that custom weights parameter and cleaned up javadocs also ve updated the jira ticket as for the translations ll need to create separate jira tickets for those right
3909,yes separate tickets for those changes would be great
3910,rebased and applied thanks bekhta could you send in another pr for adding the new constraints to the docs as well see here validator blob master documentation src main asciidoc ch asciidoc additional constraints thanks again
3911,validator pull here pr for doc is that what you had in mind or should there be more information
3912,could you add an english description of rejestr gospodarki narodowej
3913,validator for it apparent that it is class
3914,better to omit it
3915,how about that by default weight of will be used for each digit
3916,seems we don have polish translations file yet maybe as separate issue you could create one assuming you speak the language based on the fact that you created these constraints
3917,thinking more about it is this actually used for the new constraints if not don think we should add it
3918,if needed can provide ukrainian translation as it my native language as for polish ll look into it ll do it if the messages would be easy for me to translate or maybe ll ask friend
3919,ve put comment in jira about it initially thought to use this annotation for those numbers but after investigation ve found out that the algorithm differs not only in weights but in final calculation so that why ve added those new validators if this weights parameter wouldn be useful for any other reasons than agree with you that it should be removed than but leave the weights in mod checkvalidator so we do not write the same code for these new validators so should remove this parameter from annotation
3920,ah sorry wrong thinking on my side ukrainian would be nice too
3921,if these new constraints cannot be written based on top of the existing ones wouldn bother to add these weights then and let change the title of the issue to reflect that it is about adding these three polish constraints
3922,as you asked me you may try the same in hsearch just make sure to use recent jdk ideally the latest earlier ones expose bug in conjunction with weld
3923,ah nice was aware of the weld issue didn know it was fixed in the jdk thanks
3924,merged thanks
3925,wouldn it make more sense to add back the module to the global list
3926,yeah good point force pushed an update
3927,starting to become skeptical about the entire thing the spec clearly says is not honored by this method for validatevalue and validateproperty it seems we violating this paradigm by supporting nested paths in hindsight think it should not have been done or rather via some explicit option to opt in
3928,closing as will push another one
3929,hi it more of question ve noticed that there this collectionhelper util class and sometimes in the code it is used to create different collections with for example collectionhelper newhashmap and some times jus simple instantiation is used like here is there any preferences recommendations when to use what or is it more of style thing
3930,collectionhelper was created at the time where the diamond didn exist so it was convenient method to initialize generic collection it also has helpers to create sized collection it has little less sense now that we have the diamond but we still use it as the primary way to initialize collection in this case must admit that like to keep it simple for this sort of test but it matter of preference and didn use the diamond operator as plan to backport this on
3931,thanks for the explanation everything else looks good to me but not as familiar with this part of code as any of you are so probably not the one who should merge it in
3932,instead of property gettype the actual value type should be used in the case of validateproperty as bv dicates to use runtime type rather than static type for constraint retrieval
3933,getvalue is called once before already few lines up it may do the right thing but struggling to grasp what this method is doing there are so many conditionals partly checking repeatedly on the same conditions feel some more thorough clean up is due should we decide to keep this functionality also it not so nice that it implemented recursively instead of purely iterative
3934,good catch
3935,ok so after giving it some thoughts think prefer the numberpattern approach wouldn make both available and would limit the patch to adding numberpattern as adding new constraint is something big would like to have feedback on this approach before going further
3936,ve cleaned everything so only numberpattern related code was left and force pushed clean commit with all of your comments applied
3937,as discussed on the jira issue going to close it as we don see the use case really thanks for your efforts either way bekhta
3938,wouldn tie the annotations together don think reusing flag from pattern is such good idea especially with pattern being part of javax validation
3939,would go for format used to format the number if left blank tostring will be used to create string representation of number except for bigdecimal where bigdecimal toplainstring is used number might override tostring so don think it good idea to link to number tostring
3940,once you have removed the dependency to pattern flag you ll be able to remove the fqcn
3941,you can do that as decimalformat is not thread safe and constraintvalidator are shared what you should do is check if the format is valid and initialize string if it is and use this string to instantiate new decimalformat on validation don think using threadlocal would be good idea
3942,see stringhelper isnulloremptystring
3943,mmmmh can see the difference here what did you change
3944,there was typo expection exception
3945,looks like there is missing value here
3946,raaah spent minutes trying to find it
3947,wondering if we should find way to include the format here wdyt
3948,so it ll be like value value which is validated maybe it ll be better to change the parameter value number and then it ll be number value which is validated
3949,it ll be longer message than as that format parameter is optional and we would need to somehow mention that right so for example it might be something like string representation of number formatted with numberformat if one was provided must match regexp but don know
3950,yes you can do it it will be clearer that being said keep in mind it formatted value value which is validated in the resulting javadoc
3951,see javax validation constraints decimalmax message for conditional usage not sure either about this let it alone for now we can improve that later if users complain
3952,we usually keep the empty line at the end of the file
3953,added commit to fix the indentation and add comment merged it as is in will update the base version once final is released
3954,but all in all think it the responsibility of the user to test his regexp and make sure it working with the given type yes that was my thought as well another thought was to make different annotation for numbers something like and add parameter to that annotation which will provide number format which will be used to convert the annotated number to string and then tested by regexp
3955,bekhta could you experiment with your numberformat idea think it might be better fit especially for bigdecimal the number format could be optional and we would use tostring and maybe toplainstring for bigdecimal if not provided think the best is to keep this pr as is and open another pr with the result of your experimentation if it ends well
3956,ve updated javadoc of basepatternvalidator bit to reflect the move of isvalid method and yes ll try to implement this numberformat approach and create another pr for it
3957,as discussed on the jira issue going to close it as we don see the use case really thanks for your efforts either way bekhta
3958,maybe you could even keep this method here well generified version of it and have charsequence getcharsequencerepresentation value method to override
3959,yes ll do that
3960,merged and backported to
3961,when do we clone it
3962,no actual change here besides the method extraction right
3963,oops we don it leftover of some investigation
3964,yes no change but needed to use the exact same code few lines above so extracted it
3965,fixed rebased and force pushed it should be ok now
3966,kinda like how it optimizes for the simplest case no initialize needed as the constraint has no parameters no access to constraint validator context needed should we provide an alternative for where these things are needed or leave that to implementing an actual class don think so let keep it simple for the simple case and implement class for further needs think it can be implemented without bytecode generation yes it would be nice to avoid it if we can think it make sense to have this as some sort of prototype api first in hv alpha beta and then add it to the spec think people needs to play with it in real life cases so that we can have useful feedback
3967,so what the idea really provide an alternative new constraint mapping api guess from that perspective it might be ok but it in the end bv has always been about declarative constraint mapping also find it odd that this is just working for simple cases would expect something which works for all cases if not rather stick to what we have lambadas are the new generics and will get overused as generics did
3968,hey hardy so what the idea really provide an alternative new constraint mapping api no not mapping api really rather simplified way to implement constraint logic it means to address user requests about making constraint implementation more light weight bv has always been about declarative constraint mapping that wouldn change you still put your constraints in declarative fashion would expect something which works for all cases yes that question have too can see how we could have two overloaded methods or so but it violate the provide one way to do thing paradigm in that light kinda like to provide just more light weight approach for the most common case lambadas are the new generics and will get overused as generics did hah don be that pessimistic believe in the good in people think we should add it in one way or another as experimental in hv alpha and look for feedback
3969,that wouldn change you still put your constraints in declarative fashion ok yes that question have too can see how we could have two overloaded methods or so but it violate the provide one way to do thing paradigm in that light kinda like to provide just more light weight approach for the most common case as said am not big fan especially if it just addresses one case think we should add it in one way or another as experimental in hv alpha and look for feedback guess could also see it as some experimental feature to explore it but don think it is ready for bv
3970,hey ve pushed an update it not using bytebuddy anymore now let me know what you think from my side it good apart from doc update
3971,can we merge it
3972,thanks for reviewing ve pushed some more commits for addressing your remarks about the naming in way type could be applied to the descriptors too but agree that class was too far off should be fixed everywhere now adding new annotation see hv and putting it to the new api members adding docs
3973,taking step back there are two loose ends remaining currently validatetype only takes class object but think we should have one for type too because user may wish to define an expression for list instead of raw list an equivalent to sizevalidatorforcollection currently there is no way to declare cross parameter constraint using lambda expression as the supported validation target is controlled via an annotation on constraintvalidator implementations think we can do these two separately as there always is the current way of doing things
3974,think we can do these two separately as there always is the current way of doing things could you create jira issues for them
3975,added few more comments on your changes can fix them on merging if you prefer
3976,sweet thanks ll rework my last commits to address your final remarks and then do the push
3977,could you create jira issues for them done hv
3978,merged it yippie
3979,declare constraint with method reference
3980,or lambda
3981,null is never passed would be better
3982,don think validatortypes is accurate as the descriptor also contains the lambda in the lambda case why not validatordescriptors
3983,same here
3984,wouldn it be better to do this in the constructor and have final variable with it
3985,same here
3986,not sure the javadoc is accurate see my remark about validatortypes earlier
3987,maybe little more formatting and javadoc love is in order
3988,validatordescriptor would be nice to be consistent with the naming few lines below
3989,good to have something more type safe now
3990,same remark about validator types
3991,shouldn we change the name to be clear it return descriptors
3992,same remark about validator types not being accurate
3993,btw just thinking out loud but any chance we could use classmate instead of exposing new typehelper method
3994,yes that be nice but say let handle it separately it isn fully trivial change when tried it while ago got two test failures around some corner cases
3995,incompatibly
3996,incompatibly
3997,missing new line just above
3998,looks like you missed this one
3999,did you see my comment about avoiding exposing new typehelper method and use classmate instead maybe it does not make sense here and has risk of not being consistent with the rest but thought might as well ask
4000,yep saw it and replied definitely like it but think it ll need some tinkering as this change here essentially just is existing code relocated didn want to touch this one too there separate issue for it
